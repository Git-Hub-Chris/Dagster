{
  "parents": [{ "link": "../../api/", "title": "API Docs" }],
  "prev": { "link": "../../api/", "title": "API Docs" },
  "next": { "link": "../pipeline/", "title": "Pipelines" },
  "title": "Solids",
  "meta": {},
  "body": "<div class=\"section\" id=\"solids\">\n<h1>Solids<a class=\"headerlink\" href=\"#solids\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>The foundational unit of composition in Dagster.</p>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"defining-solids\">\n<h2>Defining solids<a class=\"headerlink\" href=\"#defining-solids\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"function\">\n<dt id=\"dagster.lambda_solid\">\n<code class=\"sig-prename descclassname\">&#64;</code><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">lambda_solid</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">input_defs=None</em>, <em class=\"sig-param\">output_def=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/decorators/#lambda_solid\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.lambda_solid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a simple solid from the decorated function.</p>\n<p>This shortcut allows the creation of simple solids that do not require\nconfiguration and whose implementations do not require a\n<a class=\"reference internal\" href=\"../execution/#dagster.SystemComputeExecutionContext\" title=\"dagster.SystemComputeExecutionContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">context</span></code></a>.</p>\n<p>Lambda solids take any number of inputs and produce a single output.</p>\n<p>Inputs can be defined using <a class=\"reference internal\" href=\"#dagster.InputDefinition\" title=\"dagster.InputDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InputDefinition</span></code></a> and passed to the <code class=\"docutils literal notranslate\"><span class=\"pre\">input_defs</span></code> argument\nof this decorator, or inferred from the type signature of the decorated function.</p>\n<p>The single output can be defined using <a class=\"reference internal\" href=\"#dagster.OutputDefinition\" title=\"dagster.OutputDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OutputDefinition</span></code></a> and passed as the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">output_def</span></code> argument of this decorator, or its type can be inferred from the type signature\nof the decorated function.</p>\n<p>The body of the decorated function should return a single value, which will be yielded as the\nsolid\u2019s output.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Name of solid.</p></li>\n<li><p><strong>description</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Solid description.</p></li>\n<li><p><strong>input_defs</strong> (<em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.InputDefinition\" title=\"dagster.InputDefinition\"><em>InputDefinition</em></a><em>]</em>) \u2013 List of input_defs.</p></li>\n<li><p><strong>output_def</strong> (<a class=\"reference internal\" href=\"#dagster.OutputDefinition\" title=\"dagster.OutputDefinition\"><em>OutputDefinition</em></a>) \u2013 The output of the solid. Defaults to\n<a class=\"reference internal\" href=\"#dagster.OutputDefinition\" title=\"dagster.OutputDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OutputDefinition()</span></code></a>.</p></li>\n</ul>\n</dd>\n</dl>\n<p>Examples:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@lambda_solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;hello&#39;</span>\n\n<span class=\"nd\">@lambda_solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)],</span>\n    <span class=\"n\">output_def</span><span class=\"o\">=</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">):</span>\n    <span class=\"c1\"># explictly type and name inputs and outputs</span>\n    <span class=\"k\">return</span> <span class=\"n\">foo</span>\n\n<span class=\"nd\">@lambda_solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"c1\"># same as above inferred from signature</span>\n    <span class=\"k\">return</span> <span class=\"n\">foo</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"dagster.solid\">\n<code class=\"sig-prename descclassname\">&#64;</code><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">solid</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">input_defs=None</em>, <em class=\"sig-param\">output_defs=None</em>, <em class=\"sig-param\">config=None</em>, <em class=\"sig-param\">required_resource_keys=None</em>, <em class=\"sig-param\">metadata=None</em>, <em class=\"sig-param\">step_metadata_fn=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/decorators/#solid\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.solid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a solid with the specified parameters from the decorated function.</p>\n<p>This shortcut simplifies the core <a class=\"reference internal\" href=\"#dagster.SolidDefinition\" title=\"dagster.SolidDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SolidDefinition</span></code></a> API by exploding arguments into\nkwargs of the decorated compute function and omitting additional parameters when they are not\nneeded.</p>\n<p>Input and output definitions will be inferred from the type signature of the decorated function\nif not explicitly provided.</p>\n<p>The decorated function will be used as the solid\u2019s compute function. The signature of the\ndecorated function is more flexible than that of the <code class=\"docutils literal notranslate\"><span class=\"pre\">compute_fn</span></code> in the core API; it may:</p>\n<ol class=\"arabic simple\">\n<li><p>Return a value. This value will be wrapped in an <a class=\"reference internal\" href=\"#dagster.Output\" title=\"dagster.Output\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Output</span></code></a> and yielded by the compute function.</p></li>\n<li><p>Return an <a class=\"reference internal\" href=\"#dagster.Output\" title=\"dagster.Output\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Output</span></code></a>. This output will be yielded by the compute function.</p></li>\n<li><p>Yield <a class=\"reference internal\" href=\"#dagster.Output\" title=\"dagster.Output\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Output</span></code></a> or other <a class=\"reference external\" href=\"events\">event objects</a>. Same as default compute behaviour.</p></li>\n</ol>\n<p>Note that options 1) and 2) are incompatible with yielding other events \u2013 if you would like\nto decorate a function that yields events, it must also wrap its eventual output in an\n<a class=\"reference internal\" href=\"#dagster.Output\" title=\"dagster.Output\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Output</span></code></a> and yield it.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Name of solid. Must be unique within any <a class=\"reference internal\" href=\"../pipeline/#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PipelineDefinition</span></code></a>\nusing the solid.</p></li>\n<li><p><strong>description</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Human-readable description of this solid.</p></li>\n<li><p><strong>input_defs</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.InputDefinition\" title=\"dagster.InputDefinition\"><em>InputDefinition</em></a><em>]</em><em>]</em>) \u2013 List of input definitions. Inferred from typehints if not provided.</p></li>\n<li><p><strong>output_defs</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.OutputDefinition\" title=\"dagster.OutputDefinition\"><em>OutputDefinition</em></a><em>]</em><em>]</em>) \u2013 List of output definitions. Inferred from typehints if not provided.</p></li>\n<li><p><strong>config</strong> (<em>Optional</em><em>[</em><em>Any</em><em>]</em>) \u2013 <p>The schema for the config. Configuration data available\nas context.solid_config.\nThis value can be a:</p>\n<blockquote>\n<div><ul>\n<li><p><a class=\"reference internal\" href=\"../types/#dagster.Field\" title=\"dagster.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a></p></li>\n<li><dl class=\"simple\">\n<dt>Python primitive types that resolve to dagster config types</dt><dd><ul>\n<li><p>int, float, bool, str, list.</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>A dagster config type: Int, Float, Bool, List, Optional, <a class=\"reference internal\" href=\"../types/#dagster.Selector\" title=\"dagster.Selector\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Selector</span></code></a>, <a class=\"reference internal\" href=\"../types/#dagster.Dict\" title=\"dagster.Dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dict</span></code></a></p></li>\n<li><p>A bare python dictionary, which is wrapped in Field(Dict(\u2026)). Any values of</p></li>\n</ul>\n<p>in the dictionary get resolved by the same rules, recursively.</p>\n</div></blockquote>\n</p></li>\n<li><p><strong>required_resource_keys</strong> (<em>Optional</em><em>[</em><em>Set</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em><em>]</em>) \u2013 Set of resource handles required by this solid.</p></li>\n<li><p><strong>metadata</strong> (<em>Optional</em><em>[</em><em>Dict</em><em>[</em><em>Any</em><em>, </em><em>Any</em><em>]</em><em>]</em>) \u2013 Arbitrary metadata for the solid. Frameworks may\nexpect and require certain metadata to be attached to a solid. Users should generally\nnot set metadata directly.</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">_context</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">_context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">}</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">_context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">})</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">_context</span><span class=\"p\">):</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">})</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">_context</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">foo</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">_context</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>\n    <span class=\"c1\"># explictly type and name inputs and outputs</span>\n    <span class=\"k\">return</span> <span class=\"n\">foo</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">_context</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"c1\"># same as above inferred from signature</span>\n    <span class=\"k\">return</span> <span class=\"n\">foo</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;log something&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">foo</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;str_value&#39;</span> <span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)}</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>\n    <span class=\"c1\"># context.solid_config is a dictionary with &#39;str_value&#39; key</span>\n    <span class=\"k\">return</span> <span class=\"n\">foo</span> <span class=\"o\">+</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;str_value&#39;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.SolidDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">SolidDefinition</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">input_defs</em>, <em class=\"sig-param\">compute_fn</em>, <em class=\"sig-param\">output_defs</em>, <em class=\"sig-param\">config=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">metadata=None</em>, <em class=\"sig-param\">required_resource_keys=None</em>, <em class=\"sig-param\">step_metadata_fn=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/solid/#SolidDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.SolidDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The definition of a Solid that peforms a user defined computation.</p>\n<p>For more details on what a solid is, refer to the\n<a class=\"reference external\" href=\"../../learn/guides/solid/solid.html\">Solid Guide</a> .</p>\n<p>End users should prefer the <a class=\"reference internal\" href=\"#dagster.solid\" title=\"dagster.solid\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;solid</span></code></a> and <a class=\"reference internal\" href=\"#dagster.lambda_solid\" title=\"dagster.lambda_solid\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;lambda_solid</span></code></a>\ndecorators. SolidDefinition is generally intended to be used by framework authors.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Name of the solid. Must be unique within any <a class=\"reference internal\" href=\"../pipeline/#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PipelineDefinition</span></code></a>\nusing the solid.</p></li>\n<li><p><strong>input_defs</strong> (<em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.InputDefinition\" title=\"dagster.InputDefinition\"><em>InputDefinition</em></a><em>]</em>) \u2013 Inputs of the solid.</p></li>\n<li><p><strong>compute_fn</strong> (<em>Callable</em>) \u2013 <p>The core of the solid, the function that does the actual\ncomputation. The signature of this function is determined by <code class=\"docutils literal notranslate\"><span class=\"pre\">input_defs</span></code>, with\nan additional injected first argument, <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code>, a collection of information provided\nby the system.</p>\n<p>This function must return a generator, which must yield one <a class=\"reference internal\" href=\"#dagster.Output\" title=\"dagster.Output\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Output</span></code></a> for each\nof the solid\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">output_defs</span></code>, and additionally may yield other types of Dagster\nevents, including <a class=\"reference internal\" href=\"#dagster.Materialization\" title=\"dagster.Materialization\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Materialization</span></code></a> and <a class=\"reference internal\" href=\"#dagster.ExpectationResult\" title=\"dagster.ExpectationResult\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ExpectationResult</span></code></a>.</p>\n</p></li>\n<li><p><strong>output_defs</strong> (<em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.OutputDefinition\" title=\"dagster.OutputDefinition\"><em>OutputDefinition</em></a><em>]</em>) \u2013 Outputs of the solid.</p></li>\n<li><p><strong>config</strong> (<em>Optional</em><em>[</em><em>Any</em><em>]</em>) \u2013 <p>The schema for the config. Configuration data available in\n<cite>init_context.solid_config</cite>.\nThis value can be a:</p>\n<blockquote>\n<div><ul>\n<li><p><a class=\"reference internal\" href=\"../types/#dagster.Field\" title=\"dagster.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a></p></li>\n<li><dl class=\"simple\">\n<dt>Python primitive types that resolve to dagster config types</dt><dd><ul>\n<li><p>int, float, bool, str, list.</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>A dagster config type: Int, Float, Bool, List, Optional, <a class=\"reference internal\" href=\"../types/#dagster.Selector\" title=\"dagster.Selector\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Selector</span></code></a>, <a class=\"reference internal\" href=\"../types/#dagster.Dict\" title=\"dagster.Dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dict</span></code></a></p></li>\n<li><p>A bare python dictionary, which is wrapped in Field(Dict(\u2026)). Any values of</p></li>\n</ul>\n<p>in the dictionary get resolved by the same rules, recursively.</p>\n</div></blockquote>\n</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Human-readable description of the solid.</p></li>\n<li><p><strong>metadata</strong> (<em>Optional</em><em>[</em><em>Dict</em><em>[</em><em>Any</em><em>, </em><em>Any</em><em>]</em><em>]</em>) \u2013 Arbitrary metadata for the solid. Frameworks may\nexpect and require certain metadata to be attached to a solid.</p></li>\n<li><p><strong>required_resource_keys</strong> (<em>Optional</em><em>[</em><em>Set</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em><em>]</em>) \u2013 Set of resources handles required by this\nsolid.</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">_add_one</span><span class=\"p\">(</span><span class=\"n\">_context</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">):</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">[</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">SolidDefinition</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;add_one&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s2\">&quot;num&quot;</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">)],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">Int</span><span class=\"p\">)],</span> <span class=\"c1\"># default name (&quot;result&quot;)</span>\n    <span class=\"n\">compute_fn</span><span class=\"o\">=</span><span class=\"n\">_add_one</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"inputs-outputs\">\n<h2>Inputs &amp; outputs<a class=\"headerlink\" href=\"#inputs-outputs\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"dagster.InputDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">InputDefinition</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">dagster_type=None</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/input/#InputDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.InputDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defines an argument to a solid\u2019s compute function.</p>\n<p>Inputs may flow from previous solids\u2019 outputs, or be stubbed using config. They may optionally\nbe typed using the Dagster type system.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Name of the input.</p></li>\n<li><p><strong>dagster_type</strong> (<em>Optional</em><em>[</em><em>Any</em><em>]</em>) \u2013 The type of this input. Users should provide one of the\n<a class=\"reference internal\" href=\"../types/#builtin\"><span class=\"std std-ref\">built-in types</span></a>, a dagster type explicitly constructed with\n<a class=\"reference internal\" href=\"../types/#dagster.as_dagster_type\" title=\"dagster.as_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">as_dagster_type()</span></code></a>, <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;dagster_type</span> <span class=\"pre\">&lt;dagster_type()</span></code>, or\n<a class=\"reference internal\" href=\"../types/#dagster.define_python_dagster_type\" title=\"dagster.define_python_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">define_python_dagster_type()</span></code></a>, or a Python type. Defaults to <a class=\"reference internal\" href=\"../types/#dagster.Any\" title=\"dagster.Any\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Any</span></code></a>.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Human-readable description of the input.</p></li>\n</ul>\n</dd>\n</dl>\n<dl class=\"method\">\n<dt id=\"dagster.InputDefinition.mapping_to\">\n<code class=\"sig-name descname\">mapping_to</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">solid_name</em>, <em class=\"sig-param\">input_name</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/input/#InputDefinition.mapping_to\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.InputDefinition.mapping_to\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an input mapping to an input of a child solid.</p>\n<p>In a CompositeSolidDefinition, you can use this helper function to construct\nan <a class=\"reference internal\" href=\"#dagster.InputMapping\" title=\"dagster.InputMapping\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InputMapping</span></code></a> to the input of a child solid.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>solid_name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of the child solid to which to map this input.</p></li>\n<li><p><strong>input_name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of the child solid\u2019 input to which to map this input.</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">input_mapping</span> <span class=\"o\">=</span> <span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;composite_input&#39;</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mapping_to</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;child_solid&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;int_input&#39;</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.OutputDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">OutputDefinition</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dagster_type=None</em>, <em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">is_optional=False</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/output/#OutputDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.OutputDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defines an output from a solid\u2019s compute function.</p>\n<p>Solids can have multiple outputs, in which case outputs cannot be anonymous.</p>\n<p>Many solids have only one output, in which case the user can provide a single output definition\nthat will be given the default name, \u201cresult\u201d.</p>\n<p>Output definitions may be typed using the Dagster type system.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>dagster_type</strong> (<em>Optional</em><em>[</em><em>Any</em><em>]</em>) \u2013 The type of this output. Users should provide one of the\n<a class=\"reference internal\" href=\"../types/#builtin\"><span class=\"std std-ref\">built-in types</span></a>, a dagster type explicitly constructed with\n<a class=\"reference internal\" href=\"../types/#dagster.as_dagster_type\" title=\"dagster.as_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">as_dagster_type()</span></code></a>, <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;dagster_type</span> <span class=\"pre\">&lt;dagster_type()</span></code>, or\n<a class=\"reference internal\" href=\"../types/#dagster.define_python_dagster_type\" title=\"dagster.define_python_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">define_python_dagster_type()</span></code></a>, or a Python type. Defaults to <a class=\"reference internal\" href=\"../types/#dagster.Any\" title=\"dagster.Any\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Any</span></code></a>.</p></li>\n<li><p><strong>name</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Name of the output. (default: \u201cresult\u201d)</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Human-readable description of the output.</p></li>\n<li><p><strong>is_optional</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#bool\" title=\"(in Python v3.8)\"><em>bool</em></a><em>]</em>) \u2013 Set if this output is optional. (default: False)</p></li>\n</ul>\n</dd>\n</dl>\n<dl class=\"method\">\n<dt id=\"dagster.OutputDefinition.mapping_from\">\n<code class=\"sig-name descname\">mapping_from</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">solid_name</em>, <em class=\"sig-param\">output_name=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/output/#OutputDefinition.mapping_from\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.OutputDefinition.mapping_from\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an output mapping from an output of a child solid.</p>\n<p>In a CompositeSolidDefinition, you can use this helper function to construct\nan <a class=\"reference internal\" href=\"#dagster.OutputMapping\" title=\"dagster.OutputMapping\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OutputMapping</span></code></a> from the output of a child solid.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>solid_name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of the child solid from which to map this output.</p></li>\n<li><p><strong>input_name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of the child solid\u2019s output from which to map this output.</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">output_mapping</span> <span class=\"o\">=</span> <span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">Int</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mapping_from</span><span class=\"p\">(</span><span class=\"s1\">&#39;child_solid&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"composing-solids\">\n<h2>Composing solids<a class=\"headerlink\" href=\"#composing-solids\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"function\">\n<dt id=\"dagster.composite_solid\">\n<code class=\"sig-prename descclassname\">&#64;</code><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">composite_solid</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">input_defs=None</em>, <em class=\"sig-param\">output_defs=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">config=None</em>, <em class=\"sig-param\">config_fn=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/decorators/#composite_solid\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.composite_solid\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a composite solid with the specified parameters from the decorated composition\nfunction.</p>\n<p>Using this decorator allows you to build up the dependency graph of the composite by writing a\nfunction that invokes solids and passes the output to other solids. This is similar to the use\nof the <a class=\"reference internal\" href=\"../pipeline/#dagster.pipeline\" title=\"dagster.pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;pipeline</span></code></a> decorator, with the additional ability to remap inputs,\noutputs, and config across the composite boundary.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Name for the new composite solid. Must be unique within any\n<a class=\"reference internal\" href=\"../pipeline/#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PipelineDefinition</span></code></a> using the solid.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Human-readable description of the new composite solid.</p></li>\n<li><p><strong>input_defs</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.InputDefinition\" title=\"dagster.InputDefinition\"><em>InputDefinition</em></a><em>]</em><em>]</em>) \u2013 <p>Input definitions for the composite solid.\nIf not provided explicitly, these will be inferred from typehints.</p>\n<p>Uses of these inputs in the body of the decorated composition function will be used to\ninfer the appropriate set of <a class=\"reference internal\" href=\"#dagster.InputMapping\" title=\"dagster.InputMapping\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InputMappings</span></code></a> passed to the\nunderlying <a class=\"reference internal\" href=\"#dagster.CompositeSolidDefinition\" title=\"dagster.CompositeSolidDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CompositeSolidDefinition</span></code></a>.</p>\n</p></li>\n<li><p><strong>output_defs</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.OutputDefinition\" title=\"dagster.OutputDefinition\"><em>OutputDefinition</em></a><em>]</em><em>]</em>) \u2013 <p>Output definitions for the composite solid.\nIf not provided explicitly, these will be inferred from typehints.</p>\n<p>Uses of these outputs in the body of the decorated composition function, as well as the\nreturn value of the decorated function, will be used to infer the appropriate set of\n<a class=\"reference internal\" href=\"#dagster.OutputMapping\" title=\"dagster.OutputMapping\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OutputMappings</span></code></a> for the underlying\n<a class=\"reference internal\" href=\"#dagster.CompositeSolidDefinition\" title=\"dagster.CompositeSolidDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CompositeSolidDefinition</span></code></a>.</p>\n<p>To map multiple outputs, return a dictionary from the composition function.</p>\n</p></li>\n<li><p><strong>config</strong> (<em>Optional</em><em>[</em><em>Any</em><em>]</em>) \u2013 <p>The schema for the config.\nThis value can be a:</p>\n<blockquote>\n<div><ul>\n<li><p><a class=\"reference internal\" href=\"../types/#dagster.Field\" title=\"dagster.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a></p></li>\n<li><dl class=\"simple\">\n<dt>Python primitive types that resolve to dagster config types</dt><dd><ul>\n<li><p>int, float, bool, str, list.</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>A dagster config type: Int, Float, Bool, List, Optional, <a class=\"reference internal\" href=\"../types/#dagster.Selector\" title=\"dagster.Selector\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Selector</span></code></a>, <a class=\"reference internal\" href=\"../types/#dagster.Dict\" title=\"dagster.Dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dict</span></code></a></p></li>\n<li><p>A bare python dictionary, which is wrapped in Field(Dict(\u2026)). Any values of</p></li>\n</ul>\n<p>in the dictionary get resolved by the same rules, recursively.</p>\n</div></blockquote>\n</p></li>\n<li><p><strong>config_fn</strong> (<em>Callable</em><em>[</em><em>[</em><a class=\"reference internal\" href=\"#dagster.ConfigMappingContext\" title=\"dagster.ConfigMappingContext\"><em>ConfigMappingContext</em></a><em>, </em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.8)\"><em>dict</em></a><em>]</em><em>, </em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.8)\"><em>dict</em></a><em>]</em>) \u2013 <p>By specifying a config mapping\nfunction, you can override the configuration for the child solids contained within this\ncomposite solid.</p>\n<p>Config mappings require the configuration field to be specified as <code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code>, which\nwill be exposed as the configuration field for the composite solid, as well as a\nconfiguration mapping function, <code class=\"docutils literal notranslate\"><span class=\"pre\">config_fn</span></code>, which maps the config provided to the\ncomposite solid to the config that will be provided to the child solids.</p>\n</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@lambda_solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_one</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"nd\">@composite_solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_two</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"n\">adder_1</span> <span class=\"o\">=</span> <span class=\"n\">add_one</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;adder_1&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">adder_2</span> <span class=\"o\">=</span> <span class=\"n\">add_one</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;adder_2&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">adder_2</span><span class=\"p\">(</span><span class=\"n\">adder_1</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.CompositeSolidDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">CompositeSolidDefinition</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">solid_defs</em>, <em class=\"sig-param\">input_mappings=None</em>, <em class=\"sig-param\">output_mappings=None</em>, <em class=\"sig-param\">config_mapping=None</em>, <em class=\"sig-param\">dependencies=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">metadata=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/solid/#CompositeSolidDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.CompositeSolidDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The core unit of composition and abstraction, composite solids allow you to\ndefine a solid from a graph of solids.</p>\n<p>In the same way you would refactor a block of code in to a function to deduplicate, organize,\nor manage complexity - you can refactor solids in a pipeline in to a composite solid.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of this composite solid. Must be unique within any\n<a class=\"reference internal\" href=\"../pipeline/#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PipelineDefinition</span></code></a> using the solid.</p></li>\n<li><p><strong>solid_defs</strong> (<em>List</em><em>[</em><em>Union</em><em>[</em><a class=\"reference internal\" href=\"#dagster.SolidDefinition\" title=\"dagster.SolidDefinition\"><em>SolidDefinition</em></a><em>, </em><a class=\"reference internal\" href=\"#dagster.CompositeSolidDefinition\" title=\"dagster.CompositeSolidDefinition\"><em>CompositeSolidDefinition</em></a><em>]</em><em>]</em>) \u2013 The set of solid\ndefinitions used in this composite solid. Composites may be arbitrarily nested.</p></li>\n<li><p><strong>input_mappings</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.InputMapping\" title=\"dagster.InputMapping\"><em>InputMapping</em></a><em>]</em><em>]</em>) \u2013 Define the inputs to the composite solid,\nand how they map to the inputs of its constituent solids.</p></li>\n<li><p><strong>output_mappings</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.OutputMapping\" title=\"dagster.OutputMapping\"><em>OutputMapping</em></a><em>]</em><em>]</em>) \u2013 Define the outputs of the composite solid,\nand how they map from the outputs of its constituent solids.</p></li>\n<li><p><strong>config_mapping</strong> (<em>Optional</em><em>[</em><a class=\"reference internal\" href=\"#dagster.ConfigMapping\" title=\"dagster.ConfigMapping\"><em>ConfigMapping</em></a><em>]</em>) \u2013 By specifying a config mapping, you can override\nthe configuration for the child solids contained within this composite solid. Config\nmappings require both a configuration field to be specified, which is exposed as the\nconfiguration for the composite solid, and a configuration mapping function, which\nis called to map the configuration of the composite solid into the configuration that\nis applied to any child solids.</p></li>\n<li><p><strong>dependencies</strong> (<em>Optional</em><em>[</em><em>Dict</em><em>[</em><em>Union</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>, </em><a class=\"reference internal\" href=\"../pipeline/#dagster.SolidInvocation\" title=\"dagster.SolidInvocation\"><em>SolidInvocation</em></a><em>]</em><em>, </em><em>Dict</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>, </em><a class=\"reference internal\" href=\"../pipeline/#dagster.DependencyDefinition\" title=\"dagster.DependencyDefinition\"><em>DependencyDefinition</em></a><em>]</em><em>]</em><em>]</em>) \u2013 A structure that declares where each solid gets its inputs. The keys at the top\nlevel dict are either string names of solids or SolidInvocations. The values\nare dicts that map input names to DependencyDefinitions.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Human readable description of this composite solid.</p></li>\n<li><p><strong>metadata</strong> (<em>Optional</em><em>[</em><em>Dict</em><em>[</em><em>Any</em><em>, </em><em>Any</em><em>]</em><em>]</em>) \u2013 Arbitrary metadata for the composite solid. Frameworks\nmay expect and require certain metadata to be attached to a solid.</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@lambda_solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_one</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">add_two</span> <span class=\"o\">=</span> <span class=\"n\">CompositeSolidDefinition</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;add_two&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">solid_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">add_one</span><span class=\"p\">],</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"n\">SolidInvocation</span><span class=\"p\">(</span><span class=\"s1\">&#39;add_one&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;adder_1&#39;</span><span class=\"p\">):</span> <span class=\"p\">{},</span>\n        <span class=\"n\">SolidInvocation</span><span class=\"p\">(</span><span class=\"s1\">&#39;add_one&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;adder_2&#39;</span><span class=\"p\">):</span> <span class=\"p\">{</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">:</span> <span class=\"n\">DependencyDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;adder_1&#39;</span><span class=\"p\">)},</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">input_mappings</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mapping_to</span><span class=\"p\">(</span><span class=\"s1\">&#39;adder_1&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;num&#39;</span><span class=\"p\">)],</span>\n    <span class=\"n\">output_mappings</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">Int</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mapping_from</span><span class=\"p\">(</span><span class=\"s1\">&#39;adder_2&#39;</span><span class=\"p\">)],</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.InputMapping\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">InputMapping</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/input/#InputMapping\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.InputMapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defines an input mapping for a composite solid.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>definition</strong> (<a class=\"reference internal\" href=\"#dagster.InputDefinition\" title=\"dagster.InputDefinition\"><em>InputDefinition</em></a>) \u2013 Defines the input to the composite solid.</p></li>\n<li><p><strong>solid_name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of the child solid onto which to map the input.</p></li>\n<li><p><strong>input_name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of the input to the child solid onto which to map the input.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.OutputMapping\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">OutputMapping</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/output/#OutputMapping\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.OutputMapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defines an output mapping for a composite solid.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>definition</strong> (<a class=\"reference internal\" href=\"#dagster.OutputDefinition\" title=\"dagster.OutputDefinition\"><em>OutputDefinition</em></a>) \u2013 Defines the output of the composite solid.</p></li>\n<li><p><strong>solid_name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of the child solid from which to map the output.</p></li>\n<li><p><strong>output_name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of the child solid\u2019s output from which to map the output.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.ConfigMapping\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">ConfigMapping</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/config/#ConfigMapping\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.ConfigMapping\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defines a config mapping for a composite solid.</p>\n<p>By specifying a config mapping function, you can override the configuration for the child\nsolids contained within a composite solid.</p>\n<p>Config mappings require the configuration field to be specified as <code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code>, which will be\nexposed as the configuration field for the composite solid, as well as a configuration mapping\nfunction, <code class=\"docutils literal notranslate\"><span class=\"pre\">config_fn</span></code>, which maps the config provided to the composite solid to the config\nthat will be provided to the child solids.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>config_fn</strong> (<em>Callable</em><em>[</em><em>[</em><a class=\"reference internal\" href=\"#dagster.ConfigMappingContext\" title=\"dagster.ConfigMappingContext\"><em>ConfigMappingContext</em></a><em>, </em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.8)\"><em>dict</em></a><em>]</em><em>, </em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.8)\"><em>dict</em></a><em>]</em>) \u2013 The function that will be called\nto map the composite config to a config appropriate for the child solids.</p></li>\n<li><p><strong>config_field</strong> (<em>Field</em>) \u2013 The schema of the composite config.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.ConfigMappingContext\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">ConfigMappingContext</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/config/#ConfigMappingContext\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.ConfigMappingContext\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Config mapping-specific context.</p>\n<dl class=\"attribute\">\n<dt id=\"dagster.ConfigMappingContext.run_config\">\n<code class=\"sig-name descname\">run_config</code><a class=\"headerlink\" href=\"#dagster.ConfigMappingContext.run_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The run config belonging to this pipeline run.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"../execution/#dagster.RunConfig\" title=\"dagster.RunConfig\">RunConfig</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"events\">\n<h2>Events<a class=\"headerlink\" href=\"#events\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The objects that can be yielded by the body of solids\u2019 compute functions to communicate with the\nDagster framework.</p>\n<p>(Note that <a class=\"reference internal\" href=\"#dagster.Failure\" title=\"dagster.Failure\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Failure</span></code></a> is intended to be raised from solids rather than yielded.)</p>\n<div class=\"section\" id=\"event-types\">\n<h3>Event types<a class=\"headerlink\" href=\"#event-types\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"class\">\n<dt id=\"dagster.Output\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Output</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#Output\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.Output\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Event corresponding to one of a solid\u2019s outputs.</p>\n<p>Solid compute functions must explicitly yield events of this type when they have more than\none output, or when they also yield events of other types, or when defining a solid using the\n<a class=\"reference internal\" href=\"#dagster.SolidDefinition\" title=\"dagster.SolidDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SolidDefinition</span></code></a> API directly.</p>\n<p>Outputs are values produced by solids that will be consumed by downstream solids in a pipeline.\nThey are type-checked at solid boundaries when their corresponding <a class=\"reference internal\" href=\"#dagster.OutputDefinition\" title=\"dagster.OutputDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OutputDefinition</span></code></a>\nor the downstream <a class=\"reference internal\" href=\"#dagster.InputDefinition\" title=\"dagster.InputDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InputDefinition</span></code></a> is typed.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>value</strong> (<em>Any</em>) \u2013 The value returned by the compute function.</p></li>\n<li><p><strong>output_name</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Name of the corresponding output definition. (default:\n\u201cresult\u201d)</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.Materialization\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Materialization</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#Materialization\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.Materialization\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Event indicating that a solid has materialized a value.</p>\n<p>Solid compute functions may yield events of this type whenever they wish to indicate to the\nDagster framework (and the end user) that they have produced a materialized value as a\nside effect of computation. Unlike outputs, materializations can not be passed to other solids,\nand their persistence is controlled by solid logic, rather than by the Dagster framework.</p>\n<p>Solid authors should use these events to organize metadata about the side effects of their\ncomputations to enable downstream tooling like artifact catalogues and diff tools.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>label</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 A short display name for the materialized value.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A longer human-radable description of the materialized value.</p></li>\n<li><p><strong>metadata_entries</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.EventMetadataEntry\" title=\"dagster.EventMetadataEntry\"><em>EventMetadataEntry</em></a><em>]</em><em>]</em>) \u2013 Arbitrary metadata about the\nmaterialized value.</p></li>\n</ul>\n</dd>\n</dl>\n<dl class=\"method\">\n<dt id=\"dagster.Materialization.file\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">file</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">path</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#Materialization.file\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.Materialization.file\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Static constructor for standard materializations corresponding to files on disk.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The path to the file.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of the materialization.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.ExpectationResult\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">ExpectationResult</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#ExpectationResult\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.ExpectationResult\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Event corresponding to a data quality test.</p>\n<p>Solid compute functions may yield events of this type whenever they wish to indicate to the\nDagster framework (and the end user) that a data quality test has produced a (positive or\nnegative) result.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>success</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#bool\" title=\"(in Python v3.8)\"><em>bool</em></a>) \u2013 Whether the expectation passed or not.</p></li>\n<li><p><strong>label</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Short display name for expectation. Defaults to \u201cresult\u201d.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A longer human-readable description of the expectation.</p></li>\n<li><p><strong>metadata_entries</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.EventMetadataEntry\" title=\"dagster.EventMetadataEntry\"><em>EventMetadataEntry</em></a><em>]</em><em>]</em>) \u2013 Arbitrary metadata about the\nexpectation.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.TypeCheck\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">TypeCheck</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#TypeCheck\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.TypeCheck\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Event corresponding to a successful typecheck.</p>\n<p>Events of this type should be returned by user-defined type checks when they need to encapsulate\nadditional metadata about a type check\u2019s success or failure. (i.e., when using\n<a class=\"reference internal\" href=\"../types/#dagster.as_dagster_type\" title=\"dagster.as_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">as_dagster_type()</span></code></a>, <a class=\"reference internal\" href=\"../types/#dagster.dagster_type\" title=\"dagster.dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;dagster_type</span></code></a>, or the underlying\n<a class=\"reference internal\" href=\"../types/#dagster.define_python_dagster_type\" title=\"dagster.define_python_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">define_python_dagster_type()</span></code></a> API.)</p>\n<p>Solid compute functions should generally avoid yielding events of this type to avoid confusion.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>success</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#bool\" title=\"(in Python v3.8)\"><em>bool</em></a>) \u2013 <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the type check succeeded, <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> otherwise.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of the type check.</p></li>\n<li><p><strong>metadata_entries</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.EventMetadataEntry\" title=\"dagster.EventMetadataEntry\"><em>EventMetadataEntry</em></a><em>]</em><em>]</em>) \u2013 Arbitrary metadata about the\ntype check.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.Failure\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Failure</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">metadata_entries=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#Failure\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.Failure\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Event indicating solid failure.</p>\n<p>Raise events of this type from within solid compute functions or custom type checks in order to\nindicate an unrecoverable failure in user code to the Dagster machinery and return\nstructured metadata about the failure.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of the failure.</p></li>\n<li><p><strong>metadata_entries</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.EventMetadataEntry\" title=\"dagster.EventMetadataEntry\"><em>EventMetadataEntry</em></a><em>]</em><em>]</em>) \u2013 Arbitrary metadata about the\nfailure.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"metadata-entries\">\n<h3>Metadata entries<a class=\"headerlink\" href=\"#metadata-entries\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Dagster uses lists of metadata entries to communicate arbitrary user-specified metadata about\nstructured events.</p>\n<dl class=\"class\">\n<dt id=\"dagster.EventMetadataEntry\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">EventMetadataEntry</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#EventMetadataEntry\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.EventMetadataEntry\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The standard structure for describing metadata for Dagster events.</p>\n<p>Lists of objects of this type can be passed as arguments to Dagster events and will be displayed\nin Dagit and other tooling.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>label</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Short display label for this metadata entry.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of this metadata entry.</p></li>\n<li><p><strong>entry_data</strong> (<em>Union</em><em>[</em><a class=\"reference internal\" href=\"#dagster.TextMetadataEntryData\" title=\"dagster.TextMetadataEntryData\"><em>TextMetadataEntryData</em></a><em>, </em><a class=\"reference internal\" href=\"#dagster.UrlMetadataEntryData\" title=\"dagster.UrlMetadataEntryData\"><em>UrlMetadataEntryData</em></a><em>, </em><a class=\"reference internal\" href=\"#dagster.PathMetadataEntryData\" title=\"dagster.PathMetadataEntryData\"><em>PathMetadataEntryData</em></a><em>, </em><a class=\"reference internal\" href=\"#dagster.JsonMetadataEntryData\" title=\"dagster.JsonMetadataEntryData\"><em>JsonMetadataEntryData</em></a><em>, </em><a class=\"reference internal\" href=\"#dagster.MarkdownMetadataEntryData\" title=\"dagster.MarkdownMetadataEntryData\"><em>MarkdownMetadataEntryData</em></a><em>]</em>) \u2013 Typed metadata entry data. The different types allow for customized display in tools\nlike dagit.</p></li>\n</ul>\n</dd>\n</dl>\n<dl class=\"method\">\n<dt id=\"dagster.EventMetadataEntry.fspath\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">fspath</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">path</em>, <em class=\"sig-param\">label=None</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#EventMetadataEntry.fspath\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.EventMetadataEntry.fspath\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Static constructor for a metadata entry containing a filesystem path as\n<a class=\"reference internal\" href=\"#dagster.PathMetadataEntryData\" title=\"dagster.PathMetadataEntryData\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PathMetadataEntryData</span></code></a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The path contained by this metadata entry.</p></li>\n<li><p><strong>label</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Short display label for this metadata entry. Defaults to the\nbase name of the path.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of this metadata entry.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.EventMetadataEntry.json\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">json</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">data</em>, <em class=\"sig-param\">label</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#EventMetadataEntry.json\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.EventMetadataEntry.json\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Static constructor for a metadata entry containing JSON data as\n<a class=\"reference internal\" href=\"#dagster.JsonMetadataEntryData\" title=\"dagster.JsonMetadataEntryData\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JsonMetadataEntryData</span></code></a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>data</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The JSON data contained by this metadata entry.</p></li>\n<li><p><strong>label</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Short display label for this metadata entry.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of this metadata entry.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.EventMetadataEntry.md\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">md</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">md_str</em>, <em class=\"sig-param\">label</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#EventMetadataEntry.md\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.EventMetadataEntry.md\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Static constructor for a metadata entry containing markdown.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>md_str</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The markdown contained by this metadata entry.</p></li>\n<li><p><strong>label</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Short display label for this metadata entry.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of this metadata entry.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.EventMetadataEntry.path\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">path</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">path</em>, <em class=\"sig-param\">label</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#EventMetadataEntry.path\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.EventMetadataEntry.path\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Static constructor for a metadata entry containing a path as\n<a class=\"reference internal\" href=\"#dagster.PathMetadataEntryData\" title=\"dagster.PathMetadataEntryData\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PathMetadataEntryData</span></code></a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The path contained by this metadata entry.</p></li>\n<li><p><strong>label</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Short display label for this metadata entry.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of this metadata entry.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.EventMetadataEntry.text\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">text</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">text</em>, <em class=\"sig-param\">label</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#EventMetadataEntry.text\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.EventMetadataEntry.text\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Static constructor for a metadata entry containing text as\n<a class=\"reference internal\" href=\"#dagster.TextMetadataEntryData\" title=\"dagster.TextMetadataEntryData\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextMetadataEntryData</span></code></a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>text</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The text of this metadata entry.</p></li>\n<li><p><strong>label</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Short display label for this metadata entry.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of this metadata entry.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.EventMetadataEntry.url\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">url</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">url</em>, <em class=\"sig-param\">label</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#EventMetadataEntry.url\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.EventMetadataEntry.url\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Static constructor for a metadata entry containing a URL as\n<a class=\"reference internal\" href=\"#dagster.UrlMetadataEntryData\" title=\"dagster.UrlMetadataEntryData\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UrlMetadataEntryData</span></code></a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>url</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The URL contained by this metadata entry.</p></li>\n<li><p><strong>label</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Short display label for this metadata entry.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of this metadata entry.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.JsonMetadataEntryData\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">JsonMetadataEntryData</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#JsonMetadataEntryData\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.JsonMetadataEntryData\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Container class for JSON metadata entry data.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>data</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The JSON data.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.MarkdownMetadataEntryData\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">MarkdownMetadataEntryData</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#MarkdownMetadataEntryData\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.MarkdownMetadataEntryData\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Container class for markdown metadata entry data.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>md_str</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The markdown as a string.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.PathMetadataEntryData\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">PathMetadataEntryData</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#PathMetadataEntryData\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.PathMetadataEntryData\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Container class for path metadata entry data.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>path</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The path as a string.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.TextMetadataEntryData\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">TextMetadataEntryData</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#TextMetadataEntryData\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.TextMetadataEntryData\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Container class for text metadata entry data.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>text</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The text data.</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.UrlMetadataEntryData\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">UrlMetadataEntryData</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/events/#UrlMetadataEntryData\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.UrlMetadataEntryData\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Container class for URL metadata entry data.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>url</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The URL as a string.</p>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    ["sections/api/apidocs/pipeline", "Pipelines", "N", "next"],
    ["sections/api/api", "API Docs", "P", "previous"]
  ],
  "sourcename": "sections/api/apidocs/solids.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Solids</a><ul>\n<li><a class=\"reference internal\" href=\"#defining-solids\">Defining solids</a></li>\n<li><a class=\"reference internal\" href=\"#inputs-outputs\">Inputs &amp; outputs</a></li>\n<li><a class=\"reference internal\" href=\"#composing-solids\">Composing solids</a></li>\n<li><a class=\"reference internal\" href=\"#events\">Events</a><ul>\n<li><a class=\"reference internal\" href=\"#event-types\">Event types</a></li>\n<li><a class=\"reference internal\" href=\"#metadata-entries\">Metadata entries</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/api/apidocs/solids",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
