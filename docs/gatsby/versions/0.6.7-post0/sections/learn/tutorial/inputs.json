{
  "parents": [
    { "link": "../../learn/", "title": "Learn" },
    { "link": "../", "title": "Tutorial" }
  ],
  "prev": { "link": "../hello_dag/", "title": "Connecting solids together" },
  "next": { "link": "../config/", "title": "Parametrizing solids with config" },
  "title": "Parametrizing solids with inputs",
  "meta": {},
  "body": "<div class=\"section\" id=\"parametrizing-solids-with-inputs\">\n<h1>Parametrizing solids with inputs<a class=\"headerlink\" href=\"#parametrizing-solids-with-inputs\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>So far, we\u2019ve only seen solids whose behavior is the same every time they\u2019re run:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">serial_pipeline.py</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">load_cereals</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">dataset_path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cereal.csv&#39;</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">dataset_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">cereals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Found </span><span class=\"si\">{n_cereals}</span><span class=\"s1\"> cereals&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_cereals</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">cereals</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>In general, though, rather than relying on hardcoded values like <code class=\"docutils literal notranslate\"><span class=\"pre\">dataset_path</span></code>, we\u2019d like to be\nable to parametrize our solid logic. Appropriately parameterized solids are more testable, and\nalso more reusable. Consider the following more generic solid:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">inputs.py</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">csv_path</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Read </span><span class=\"si\">{n_lines}</span><span class=\"s1\"> lines&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_lines</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">lines</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Here, rather than hardcoding the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">dataset_path</span></code>, we use an input, <code class=\"docutils literal notranslate\"><span class=\"pre\">csv_path</span></code>. It\u2019s\neasy to see why this is better. We can reuse the same solid in all the different places we\nmight need to read in a .csv from a filepath. We can test the solid by pointing it at some known\ntest csv file. And we can use the output of another upstream solid to determine which file to load.</p>\n<p>Let\u2019s rebuild a pipeline we\u2019ve seen before, but this time using our newly parameterized solid.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">inputs.py</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">csv</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">execute_pipeline</span><span class=\"p\">,</span> <span class=\"n\">pipeline</span><span class=\"p\">,</span> <span class=\"n\">solid</span>\n\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">csv_path</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Read </span><span class=\"si\">{n_lines}</span><span class=\"s1\"> lines&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_lines</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">lines</span>\n\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">sort_by_calories</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_cereals</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cereal</span><span class=\"p\">:</span> <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Least caloric cereal: </span><span class=\"si\">{least_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">least_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Most caloric cereal: </span><span class=\"si\">{most_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">most_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;least_caloric&#39;</span><span class=\"p\">:</span> <span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n        <span class=\"s1\">&#39;most_caloric&#39;</span><span class=\"p\">:</span> <span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">inputs_pipeline</span><span class=\"p\">():</span>\n<span class=\"hll\">    <span class=\"n\">sort_by_calories</span><span class=\"p\">(</span><span class=\"n\">read_csv</span><span class=\"p\">())</span>\n</span></pre></div>\n</td></tr></table></div>\n</div>\n<p>As you can see above, what\u2019s missing from this setup is a way to specify the <code class=\"docutils literal notranslate\"><span class=\"pre\">csv_path</span></code>\ninput to our new <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code> solid in the absence of any upstream solids whose outputs we can\nrely on.</p>\n<p>Dagster provides the ability to stub inputs to solids that aren\u2019t satisfied by the pipeline\ntopology as part of its flexible configuration facility. We can specify config for a pipeline\nexecution regardless of which modality we use to execute the pipeline \u2013 the Python API, the Dagit\nGUI, or the command line.</p>\n<div class=\"section\" id=\"specifying-config-in-the-python-api\">\n<h2>Specifying config in the Python API<a class=\"headerlink\" href=\"#specifying-config-in-the-python-api\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>We previously encountered the <a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.execute_pipeline\" title=\"dagster.execute_pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">execute_pipeline()</span></code></a> function. Pipeline configuration is\nspecified by the second argument to this function, which must be a dict (the \u201cenvironment dict\u201d).</p>\n<p>This dict contains all of the user-provided configuration with which to execute a pipeline. As such,\nit can have <a class=\"reference internal\" href=\"../../../api/apidocs/execution/#config-schema\"><span class=\"std std-ref\">a lot of sections</span></a>, but we\u2019ll only use one of them here:\nper-solid configuration, which is specified under the key <code class=\"docutils literal notranslate\"><span class=\"pre\">solids</span></code>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">inputs.py</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>40\n41\n42\n43\n44</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\">environment_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;solids&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;read_csv&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;inputs&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;csv_path&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;cereal.csv&#39;</span><span class=\"p\">}}}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">solids</span></code> dict is keyed by solid name, and each solid is configured by a dict that may itself\nhave several sections. In this case we are only interested in the <code class=\"docutils literal notranslate\"><span class=\"pre\">inputs</span></code> section, so\nthat we can specify the value of the input <code class=\"docutils literal notranslate\"><span class=\"pre\">csv_path</span></code>.</p>\n<p>Now you can pass this environment dict to <a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.execute_pipeline\" title=\"dagster.execute_pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">execute_pipeline()</span></code></a>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">inputs.py</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>45\n46\n47</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">execute_pipeline</span><span class=\"p\">(</span>\n    <span class=\"n\">inputs_pipeline</span><span class=\"p\">,</span> <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"n\">environment_dict</span>\n<span class=\"p\">)</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n</div>\n<div class=\"section\" id=\"specifying-config-using-yaml-fragments-and-the-dagster-cli\">\n<h2>Specifying config using YAML fragments and the dagster CLI<a class=\"headerlink\" href=\"#specifying-config-using-yaml-fragments-and-the-dagster-cli\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When executing pipelines with the dagster CLI, we\u2019ll need to provide the environment dict in a\nconfig file. We use YAML for the file-based representation of an environment dict, but the values\nare the same as before:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">inputs_env.yaml</span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-YAML notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">solids</span><span class=\"p\">:</span>\n  <span class=\"nt\">read_csv</span><span class=\"p\">:</span>\n    <span class=\"nt\">inputs</span><span class=\"p\">:</span>\n      <span class=\"nt\">csv_path</span><span class=\"p\">:</span>\n        <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"s\">&quot;cereal.csv&quot;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>We can pass config files in this format to the dagster CLI tool with the <code class=\"docutils literal notranslate\"><span class=\"pre\">-e</span></code> flag.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> dagster pipeline execute -f inputs.py -n inputs_pipeline -e inputs_env.yaml\n</pre></div>\n</div>\n<p>In practice, you might have different sections of your environment dict in different yaml files \u2013\nif, for instance, some sections change more often (e.g. in test and prod) while other are more\nstatic. In this case, you can set multiple instances of the <code class=\"docutils literal notranslate\"><span class=\"pre\">-e</span></code> flag on CLI invocations, and\nthe CLI tools will assemble the YAML fragments into a single environment dict.</p>\n</div>\n</div>\n<div class=\"section\" id=\"using-the-dagit-config-editor\">\n<h1>Using the Dagit config editor<a class=\"headerlink\" href=\"#using-the-dagit-config-editor\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Dagit provides a powerful, schema-aware, typeahead-enabled config editor to enable rapid\nexperimentation with and debugging of parameterized pipeline executions. As always, run:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> dagit -f inputs.py -n inputs_pipeline\n</pre></div>\n</div>\n<p>Notice the error in the right hand pane of the <strong>Execute</strong> tab.</p>\n<a class=\"\"\n               data-lightbox=\"group-54347a6c-0a1a-4bfa-92e8-b56fc3b19e05\"\n               href=\"../../../../_images/inputs_figure_one1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/inputs_figure_one1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Because Dagit is schema-aware, it knows that this pipeline now requires configuration in order to\nrun without errors. In this case, since the pipeline is relatively trivial, it wouldn\u2019t be\nespecially costly to run the pipeline and watch it fail. But when pipelines are complex and slow,\nit\u2019s invaluable to get this kind of feedback up front rather than have an unexpected failure deep\ninside a pipeline.</p>\n<p>Recall that the execution plan, which we would ordinarily see in the right-hand pane of the\n<strong>Execute</strong> tab, is the concrete pipeline that Dagster will actually execute. Without a valid\nconfig, Dagster can\u2019t construct a parametrization of the logical pipeline \u2013 so no execution plan\nis available for us to preview.</p>\n<p>Press <cite>CTRL-Space</cite> in order to bring up the typeahead assistant.</p>\n<a class=\"\"\n               data-lightbox=\"group-40b85ba3-f4ed-4fe0-8144-9ecff80abf48\"\n               href=\"../../../../_images/inputs_figure_two1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/inputs_figure_two1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Here you can see all of the sections available in the environment dict. Don\u2019t worry, we\u2019ll get to\nthem all later.</p>\n<p>Let\u2019s enter the config we need in order to execute our pipeline.</p>\n<a class=\"\"\n               data-lightbox=\"group-c28912c4-4173-45cf-8ec4-85869d281f26\"\n               href=\"../../../../_images/inputs_figure_three1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/inputs_figure_three1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Note that as you type and edit the config, the config minimap hovering on the right side of the\neditor pane changes to provide context \u2013 so you always know where in the nested config schema you\nare while making changes.</p>\n<div class=\"section\" id=\"writing-tests-that-supply-inputs-to-solids\">\n<h2>Writing tests that supply inputs to solids<a class=\"headerlink\" href=\"#writing-tests-that-supply-inputs-to-solids\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You\u2019ll frequently want to provide test inputs to solids. You can use <a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.execute_pipeline\" title=\"dagster.execute_pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">execute_pipeline()</span></code></a> and\nthe environment dict to do this, but you can also pass input values directly using the\n<a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.execute_solid\" title=\"dagster.execute_solid\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">execute_solid()</span></code></a> API. This can be especially useful when it is cumbersome or impossible to\nparametrize an input through the environment dict.</p>\n<p>For example, we may want to test <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_calories</span></code> on a controlled data set where we know the\nmost and least caloric cereals in advance, but without having to flow its input from an upstream\nsolid implementing a data ingest process.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id7\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">test_inputs.py</span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_sort_by_calories</span><span class=\"p\">():</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">execute_solid</span><span class=\"p\">(</span>\n        <span class=\"n\">sort_by_calories</span><span class=\"p\">,</span>\n        <span class=\"n\">input_values</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s1\">&#39;cereals&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;just_lard&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;1100&#39;</span><span class=\"p\">},</span>\n                <span class=\"p\">{</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;dry_crust&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;20&#39;</span><span class=\"p\">},</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">success</span>\n    <span class=\"n\">output_value</span> <span class=\"o\">=</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">output_value</span><span class=\"p\">()</span>\n    <span class=\"k\">assert</span> <span class=\"n\">output_value</span><span class=\"p\">[</span><span class=\"s1\">&#39;most_caloric&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;just_lard&#39;</span>\n    <span class=\"k\">assert</span> <span class=\"n\">output_value</span><span class=\"p\">[</span><span class=\"s1\">&#39;least_caloric&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;dry_crust&#39;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>When we execute this test (e.g., using pytest), we\u2019ll be reminded again of one of the reasons why\nit\u2019s always a good idea to write unit tests, even for the most seemingly trivial components.</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span> <span class=\"o\">================================</span> <span class=\"nv\">FAILURES</span> <span class=\"o\">=================================</span>\n __________________________ test_sort_by_calories __________________________\n\n     def test_sort_by_calories<span class=\"o\">()</span>:\n         <span class=\"nv\">res</span> <span class=\"o\">=</span> execute_solid<span class=\"o\">(</span>\n             sort_by_calories,\n             <span class=\"nv\">input_values</span><span class=\"o\">={</span>\n                 <span class=\"s1\">&#39;cereals&#39;</span>: <span class=\"o\">[</span>\n                     <span class=\"o\">{</span><span class=\"s1\">&#39;name&#39;</span>: <span class=\"s1\">&#39;just_lard&#39;</span>, <span class=\"s1\">&#39;calories&#39;</span>: <span class=\"s1\">&#39;1100&#39;</span><span class=\"o\">}</span>,\n                     <span class=\"o\">{</span><span class=\"s1\">&#39;name&#39;</span>: <span class=\"s1\">&#39;dry_crust&#39;</span>, <span class=\"s1\">&#39;calories&#39;</span>: <span class=\"s1\">&#39;20&#39;</span><span class=\"o\">}</span>\n                 <span class=\"o\">]</span>\n             <span class=\"o\">}</span>\n         <span class=\"o\">)</span>\n         assert res.success\n         <span class=\"nv\">output_value</span> <span class=\"o\">=</span> res.output_value<span class=\"o\">()</span>\n &gt;       assert output_value<span class=\"o\">[</span><span class=\"s1\">&#39;most_caloric&#39;</span><span class=\"o\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;just_lard&#39;</span>\n<span class=\"hll\"> E       AssertionError: assert <span class=\"o\">{</span><span class=\"s1\">&#39;calories&#39;</span>: <span class=\"s1\">&#39;20&#39;</span>, <span class=\"s1\">&#39;name&#39;</span>: <span class=\"s1\">&#39;dry_crust&#39;</span><span class=\"o\">}</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;just_lard&#39;</span>\n</span>\n test_inputs.py:18: AssertionError\n</pre></div>\n</div>\n<p>It looks as though we\u2019ve forgotten to coerce our calorie counts to integers before sorting by them.\n(Alternatively, we could modify our <code class=\"docutils literal notranslate\"><span class=\"pre\">load_cereals</span></code> logic to extend the basic functionality\nprovided by <a class=\"reference external\" href=\"https://docs.python.org/3/library/csv.html#csv.DictReader\" title=\"(in Python v3.8)\"><code class=\"docutils literal notranslate\"><span class=\"pre\">csv.DictReader</span></code></a> and add a facility to specify column-wise datatype\nconversion.)</p>\n</div>\n</div>\n<div class=\"section\" id=\"type-checking-inputs\">\n<h1>Type-checking inputs<a class=\"headerlink\" href=\"#type-checking-inputs\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Note that this section requires Python 3.</p>\n<p>If you zoom in on the <strong>Explore</strong> tab in Dagit and click on one of our pipeline solids, you\u2019ll see\nthat its inputs and outputs are annotated with types.</p>\n<a class=\"\"\n               data-lightbox=\"group-924e0b7c-d682-4f24-b93f-60d7098a9fcf\"\n               href=\"../../../../_images/inputs_figure_four1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/inputs_figure_four1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>By default, every untyped value in Dagster is assigned the catch-all type <a class=\"reference internal\" href=\"../../../api/apidocs/types/#dagster.Any\" title=\"dagster.Any\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Any</span></code></a>. This means that\nany errors in the config won\u2019t be surfaced until the pipeline is executed.</p>\n<p>For example, when we execute our pipeline with this config, it\u2019ll fail at runtime:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id8\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">inputs_env_bad.yaml</span><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-YAML notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">solids</span><span class=\"p\">:</span>\n  <span class=\"nt\">read_csv</span><span class=\"p\">:</span>\n    <span class=\"nt\">inputs</span><span class=\"p\">:</span>\n      <span class=\"nt\">csv_path</span><span class=\"p\">:</span>\n        <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2343</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>When we enter this mistyped config in Dagit and execute our pipeline, you\u2019ll see that an error\nappears in the structured log viewer pane of the <strong>Execute</strong> tab:</p>\n<a class=\"\"\n               data-lightbox=\"group-2a28f6b4-00ce-48c7-841f-da2feeec0834\"\n               href=\"../../../../_images/inputs_figure_five1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/inputs_figure_five1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Click on \u201cView Full Message\u201d or on the red dot on the execution step that failed and a detailed\nstacktrace will pop up.</p>\n<a class=\"\"\n               data-lightbox=\"group-f12939d9-581f-49b4-a4f8-6938cbf75d99\"\n               href=\"../../../../_images/inputs_figure_six1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/inputs_figure_six1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>It would be better if we could catch this error earlier, when we specify the config. So let\u2019s\nmake the inputs typed.</p>\n<p>A user can apply types to inputs and outputs using Python 3\u2019s type annotation syntax. In this case,\nwe just want to type the input as the built-in <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id9\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">inputs_typed.py</span><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"hll\"><span class=\"k\">def</span> <span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">csv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n</span>    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Read </span><span class=\"si\">{n_lines}</span><span class=\"s1\"> lines&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_lines</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">lines</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>By using typed input instead we can catch this error prior to execution, and reduce the surface\narea we need to test and guard against in user code.</p>\n<a class=\"\"\n               data-lightbox=\"group-1c6ef9f2-b8ac-4ed7-933c-17096916cb49\"\n               href=\"../../../../_images/inputs_figure_seven1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/inputs_figure_seven1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a></div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    [
      "sections/learn/tutorial/config",
      "Parametrizing solids with config",
      "N",
      "next"
    ],
    [
      "sections/learn/tutorial/hello_dag",
      "Connecting solids together",
      "P",
      "previous"
    ]
  ],
  "sourcename": "sections/learn/tutorial/inputs.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Parametrizing solids with inputs</a><ul>\n<li><a class=\"reference internal\" href=\"#specifying-config-in-the-python-api\">Specifying config in the Python API</a></li>\n<li><a class=\"reference internal\" href=\"#specifying-config-using-yaml-fragments-and-the-dagster-cli\">Specifying config using YAML fragments and the dagster CLI</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#using-the-dagit-config-editor\">Using the Dagit config editor</a><ul>\n<li><a class=\"reference internal\" href=\"#writing-tests-that-supply-inputs-to-solids\">Writing tests that supply inputs to solids</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#type-checking-inputs\">Type-checking inputs</a></li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/tutorial/inputs",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
