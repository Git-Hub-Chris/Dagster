{
  "parents": [
    { "link": "../../learn/", "title": "Learn" },
    { "link": "../", "title": "Tutorial" }
  ],
  "prev": {
    "link": "../multiple_outputs/",
    "title": "Multiple and conditional outputs"
  },
  "next": { "link": "../materializations/", "title": "Materializations" },
  "title": "Composing solids",
  "meta": {},
  "body": "<div class=\"section\" id=\"composing-solids\">\n<h1>Composing solids<a class=\"headerlink\" href=\"#composing-solids\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Abstracting business logic into reusable, configurable solids is one important step towards making\ndata applications like other software applications. The other basic facility that we expect from\nsoftware in other domains is composability \u2013 the ability to combine building blocks into larger\nfunctional units.</p>\n<p>Composite solids can be used to organize and refactor large or complicated pipelines, abstracting\naway complexity, as well as to wrap reusable general-purpose solids together with domain-specific\nlogic.</p>\n<p>As an example, let\u2019s compose two instances of a complex, general-purpose <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code> solid along\nwith some domain-specific logic for the specific purpose of joining our cereal dataset with a\nlookup table providing human-readable names for the cereal manufacturers.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">composite_solids.py</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>126\n127\n128\n129\n130</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span>\n<span class=\"nd\">@composite_solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">load_cereals</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">DataFrame</span><span class=\"p\">:</span>\n    <span class=\"n\">read_cereals</span> <span class=\"o\">=</span> <span class=\"n\">read_csv</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;read_cereals&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">read_manufacturers</span> <span class=\"o\">=</span> <span class=\"n\">read_csv</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;read_manufacturers&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Defining a composite solid is similar to defining a pipeline, except that we use the\n<a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.composite_solid\" title=\"dagster.composite_solid\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;composite_solid</span></code></a> decorator instead of\n<a class=\"reference internal\" href=\"../../../api/apidocs/pipeline/#dagster.pipeline\" title=\"dagster.pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;pipeline</span></code></a>.</p>\n<p>Dagit has sophisticated facilities for visualizing composite solids:</p>\n<a class=\"\"\n               data-lightbox=\"group-5aa97b28-247e-4895-a129-67c016c60b4f\"\n               href=\"../../../../_images/composite_solids1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/composite_solids1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>All of the complexity of the composite solid is hidden by default, but we can expand it at will by\nclicking into the solid (or on the \u201cExpand\u201d button in the right-hand pane):</p>\n<a class=\"\"\n               data-lightbox=\"group-22c15efc-432c-4bf3-a2d5-d2b4e5522d11\"\n               href=\"../../../../_images/composite_solids_expanded1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/composite_solids_expanded1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Note the line indicating that the output of <code class=\"docutils literal notranslate\"><span class=\"pre\">join_cereal</span></code> is returned as the output of the\ncomposite solid as a whole.</p>\n<p>Config for the individual solids making up the composite is nested, as follows:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">composite_solids.yaml</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-YAML notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"hll\"><span class=\"nt\">solids</span><span class=\"p\">:</span>\n</span><span class=\"hll\">  <span class=\"nt\">load_cereals</span><span class=\"p\">:</span>\n</span><span class=\"hll\">    <span class=\"nt\">solids</span><span class=\"p\">:</span>\n</span>      <span class=\"nt\">read_cereals</span><span class=\"p\">:</span>\n        <span class=\"nt\">inputs</span><span class=\"p\">:</span>\n          <span class=\"nt\">csv_path</span><span class=\"p\">:</span>\n            <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"s\">&quot;cereal.csv&quot;</span>\n      <span class=\"nt\">read_manufacturers</span><span class=\"p\">:</span>\n        <span class=\"nt\">config</span><span class=\"p\">:</span>\n          <span class=\"nt\">delimiter</span><span class=\"p\">:</span> <span class=\"s\">&quot;;&quot;</span>\n        <span class=\"nt\">inputs</span><span class=\"p\">:</span>\n          <span class=\"nt\">csv_path</span><span class=\"p\">:</span>\n            <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"s\">&quot;manufacturers.csv&quot;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>When we execute this pipeline, Dagit includes information about the nesting of individual execution\nsteps within the composite:</p>\n<a class=\"\"\n               data-lightbox=\"group-6a662a8b-a2ee-4bec-9cb0-1336c1369113\"\n               href=\"../../../../_images/composite_solids_expanded1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/composite_solids_expanded1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a></div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    [
      "sections/learn/tutorial/materializations",
      "Materializations",
      "N",
      "next"
    ],
    [
      "sections/learn/tutorial/multiple_outputs",
      "Multiple and conditional outputs",
      "P",
      "previous"
    ]
  ],
  "sourcename": "sections/learn/tutorial/composite_solids.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Composing solids</a></li>\n</ul>\n",
  "display_toc": false,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/tutorial/composite_solids",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
