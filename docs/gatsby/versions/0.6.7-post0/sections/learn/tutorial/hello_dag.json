{
  "parents": [
    { "link": "../../learn/", "title": "Learn" },
    { "link": "../", "title": "Tutorial" }
  ],
  "prev": { "link": "../hello_cereal/", "title": "Hello, cereal!" },
  "next": { "link": "../inputs/", "title": "Parametrizing solids with inputs" },
  "title": "Connecting solids together",
  "meta": {},
  "body": "<div class=\"section\" id=\"connecting-solids-together\">\n<h1>Connecting solids together<a class=\"headerlink\" href=\"#connecting-solids-together\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Our pipelines wouldn\u2019t be very interesting if they were limited to solids acting in isolation\nfrom each other. Pipelines are useful because they let us connect solids into arbitrary DAGs\n(<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Directed_acyclic_graph\">directed acyclic graphs</a>) of computation.</p>\n<div class=\"section\" id=\"let-s-get-serial\">\n<h2>Let\u2019s get serial<a class=\"headerlink\" href=\"#let-s-get-serial\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>We\u2019ll add a second solid to the pipeline we worked with in the first section of the tutorial.</p>\n<p>This new solid will consume the output of the first solid, which read the cereal dataset in from\ndisk, and in turn will sort the list of cereals by their calorie content per serving.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">serial_pipeline.py</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">csv</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">execute_pipeline</span><span class=\"p\">,</span> <span class=\"n\">pipeline</span><span class=\"p\">,</span> <span class=\"n\">solid</span>\n\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">load_cereals</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">dataset_path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cereal.csv&#39;</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">dataset_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">cereals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Found </span><span class=\"si\">{n_cereals}</span><span class=\"s1\"> cereals&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_cereals</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span>\n<span class=\"hll\">    <span class=\"k\">return</span> <span class=\"n\">cereals</span>\n</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"hll\"><span class=\"k\">def</span> <span class=\"nf\">sort_by_calories</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n</span>    <span class=\"n\">sorted_cereals</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n        <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cereal</span><span class=\"p\">:</span> <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Least caloric cereal: </span><span class=\"si\">{least_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">least_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Most caloric cereal: </span><span class=\"si\">{most_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">most_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">serial_pipeline</span><span class=\"p\">():</span>\n<span class=\"hll\">    <span class=\"n\">sort_by_calories</span><span class=\"p\">(</span><span class=\"n\">load_cereals</span><span class=\"p\">())</span>\n</span></pre></div>\n</td></tr></table></div>\n</div>\n<p>You\u2019ll see that we\u2019ve modified our existing <code class=\"docutils literal notranslate\"><span class=\"pre\">load_cereals</span></code> solid to return an output, in this\ncase the list of dicts into which :py:class:<code class=\"docutils literal notranslate\"><span class=\"pre\">csv.DictReader</span> <span class=\"pre\">&lt;python:csv.DictReader&gt;</span></code> reads the\ncereals dataset.</p>\n<p>We\u2019ve defined our new solid, <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_calories</span></code>, to take a user-defined input, <code class=\"docutils literal notranslate\"><span class=\"pre\">cereals</span></code>, in\naddition to the system-provided <a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.SystemComputeExecutionContext\" title=\"dagster.SystemComputeExecutionContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">context</span></code></a> object.</p>\n<p>We can use inputs and outputs to connect solids to each other. Here we tell Dagster that\nalthough <code class=\"docutils literal notranslate\"><span class=\"pre\">load_cereals</span></code> doesn\u2019t depend on the output of any other solid, <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_calories</span></code>\ndoes \u2013 it depends on the output of <code class=\"docutils literal notranslate\"><span class=\"pre\">load_cereals</span></code>.</p>\n<p>Let\u2019s visualize the DAG we\u2019ve just defined in dagit.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> dagit -f serial_pipeline.py -n serial_pipeline\n</pre></div>\n</div>\n<p>Navigate to <a class=\"reference external\" href=\"http://127.0.0.1:3000/p/serial_pipeline/explore\">http://127.0.0.1:3000/p/serial_pipeline/explore</a> or choose \u201cserial_pipeline\u201d\nfrom the dropdown:</p>\n<a class=\"\"\n               data-lightbox=\"group-d300174f-fa56-4129-a5d0-d94ca0d05f62\"\n               href=\"../../../../_images/serial_pipeline_figure_one1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/serial_pipeline_figure_one1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a></div>\n<div class=\"section\" id=\"a-more-complex-dag\">\n<h2>A more complex DAG<a class=\"headerlink\" href=\"#a-more-complex-dag\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Solids don\u2019t need to be wired together serially. The output of one solid can be consumed by any\nnumber of other solids, and the outputs of several different solids can be consumed by a single\nsolid.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">complex_pipeline.py</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">load_cereals</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">):</span>\n    <span class=\"n\">dataset_path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cereal.csv&#39;</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">dataset_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">cereals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n    <span class=\"k\">return</span> <span class=\"n\">cereals</span>\n\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">sort_by_calories</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_cereals</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n        <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cereal</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">]))</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">least_caloric</span> <span class=\"o\">=</span> <span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">most_caloric</span> <span class=\"o\">=</span> <span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">least_caloric</span><span class=\"p\">,</span> <span class=\"n\">most_caloric</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">sort_by_protein</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_cereals</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n        <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cereal</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;protein&#39;</span><span class=\"p\">]))</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">least_protein</span> <span class=\"o\">=</span> <span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">most_protein</span> <span class=\"o\">=</span> <span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">least_protein</span><span class=\"p\">,</span> <span class=\"n\">most_protein</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">display_results</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">calorie_results</span><span class=\"p\">,</span> <span class=\"n\">protein_results</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Least caloric cereal: </span><span class=\"si\">{least_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">least_caloric</span><span class=\"o\">=</span><span class=\"n\">calorie_results</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Most caloric cereal: </span><span class=\"si\">{most_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">most_caloric</span><span class=\"o\">=</span><span class=\"n\">calorie_results</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Least protein-rich cereal: </span><span class=\"si\">{least_protein}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">least_protein</span><span class=\"o\">=</span><span class=\"n\">protein_results</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Most protein-rich cereal: </span><span class=\"si\">{most_protein}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">most_protein</span><span class=\"o\">=</span><span class=\"n\">protein_results</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">complex_pipeline</span><span class=\"p\">():</span>\n<span class=\"hll\">    <span class=\"n\">cereals</span> <span class=\"o\">=</span> <span class=\"n\">load_cereals</span><span class=\"p\">()</span>\n</span><span class=\"hll\">    <span class=\"n\">display_results</span><span class=\"p\">(</span>\n</span><span class=\"hll\">        <span class=\"n\">calorie_results</span><span class=\"o\">=</span><span class=\"n\">sort_by_calories</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">),</span>\n</span><span class=\"hll\">        <span class=\"n\">protein_results</span><span class=\"o\">=</span><span class=\"n\">sort_by_protein</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">),</span>\n</span><span class=\"hll\">    <span class=\"p\">)</span>\n</span></pre></div>\n</td></tr></table></div>\n</div>\n<p>First we introduce the intermediate variable <code class=\"docutils literal notranslate\"><span class=\"pre\">cereals</span></code> into our pipeline definition to\nrepresent the output of the <code class=\"docutils literal notranslate\"><span class=\"pre\">load_cereals</span></code> solid. Then we make both <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_calories</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_protein</span></code> consume this output. Their outputs are in turn both consumed by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">display_results</span></code>.</p>\n<p>Let\u2019s visualize this pipeline in Dagit (<code class=\"docutils literal notranslate\"><span class=\"pre\">dagit</span> <span class=\"pre\">-f</span> <span class=\"pre\">complex_pipeline.py</span> <span class=\"pre\">-n</span> <span class=\"pre\">complex_pipeline</span></code>):</p>\n<a class=\"\"\n               data-lightbox=\"group-74e06b2e-6c19-47bf-b0c8-5bfeeb0ff582\"\n               href=\"../../../../_images/complex_pipeline_figure_one1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/complex_pipeline_figure_one1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>When you execute this example from Dagit, you\u2019ll see that <code class=\"docutils literal notranslate\"><span class=\"pre\">load_cereals</span></code> executes first,\nfollowed by <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_calories</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_protein</span></code> \u2013 in any order \u2013 and that\n<code class=\"docutils literal notranslate\"><span class=\"pre\">display_results</span></code> executes last, only after <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_calories</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_protein</span></code> have\nboth executed.</p>\n<p>In more sophisticated execution environments, <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_calories</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_protein</span></code> could\nexecute not just in any order, but at the same time, since they don\u2019t depend on each other\u2019s\noutputs \u2013 but both would still have to execute after <code class=\"docutils literal notranslate\"><span class=\"pre\">load_cereals</span></code> (because they depend on its\noutput) and before <code class=\"docutils literal notranslate\"><span class=\"pre\">display_results</span></code> (because <code class=\"docutils literal notranslate\"><span class=\"pre\">display_results</span></code> depends on both of\ntheir outputs).</p>\n<p>We\u2019ll write a simple test for this pipeline showing how we can assert that all four of its solids\nexecuted successfully.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">complex_pipeline.py</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>72\n73\n74\n75\n76\n77</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_complex_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">execute_pipeline</span><span class=\"p\">(</span><span class=\"n\">complex_pipeline</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">success</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">solid_result_list</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">4</span>\n    <span class=\"k\">for</span> <span class=\"n\">solid_res</span> <span class=\"ow\">in</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">solid_result_list</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">solid_res</span><span class=\"o\">.</span><span class=\"n\">success</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    [
      "sections/learn/tutorial/inputs",
      "Parametrizing solids with inputs",
      "N",
      "next"
    ],
    ["sections/learn/tutorial/hello_cereal", "Hello, cereal!", "P", "previous"]
  ],
  "sourcename": "sections/learn/tutorial/hello_dag.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Connecting solids together</a><ul>\n<li><a class=\"reference internal\" href=\"#let-s-get-serial\">Let\u2019s get serial</a></li>\n<li><a class=\"reference internal\" href=\"#a-more-complex-dag\">A more complex DAG</a></li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/tutorial/hello_dag",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
