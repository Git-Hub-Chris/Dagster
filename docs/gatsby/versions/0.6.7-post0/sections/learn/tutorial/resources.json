{
  "parents": [
    { "link": "../../learn/", "title": "Learn" },
    { "link": "../", "title": "Tutorial" }
  ],
  "prev": { "link": "../intermediates/", "title": "Intermediates" },
  "next": {
    "link": "../repos/",
    "title": "Organizing pipelines in repositories"
  },
  "title": "Parametrizing pipelines with resources",
  "meta": {},
  "body": "<div class=\"section\" id=\"parametrizing-pipelines-with-resources\">\n<h1>Parametrizing pipelines with resources<a class=\"headerlink\" href=\"#parametrizing-pipelines-with-resources\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Often, we\u2019ll want to be able to configure pipeline-wide facilities, like uniform access to the\nfile system, databases, or cloud services. Dagster models interactions with features of the external\nenvironment like these as resources (and library modules such as <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_aws</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_gcp</span></code>,\nand even <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_slack</span></code> provide out-of-the-box implementations for many common external\nservices).</p>\n<p>Typically, your data processing pipelines will want to store their results in a data warehouse\nsomewhere separate from the raw data sources. We\u2019ll adjust our toy pipeline so that it does a little\nmore work on our cereal dataset, stores the finished product in a swappable data warehouse, and\nlets the team know when we\u2019re finished.</p>\n<p>You might have noticed that our cereal dataset isn\u2019t normalized \u2013 that is, the serving sizes for\nsome cereals are as small as a quarter of a cup, and for others are as large as a cup and a half.\nThis grossly understates the nutritional difference between our different cereals.</p>\n<p>Let\u2019s transform our dataset and then store it in a normalized table in the warehouse:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">resources.py</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">normalize_calories</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n    <span class=\"n\">columns_to_normalize</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;protein&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;fat&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;sodium&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;fiber&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;carbo&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;sugars&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;potass&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;vitamins&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;cups&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">cereal</span> <span class=\"ow\">in</span> <span class=\"n\">cereals</span><span class=\"p\">]</span>\n    <span class=\"n\">reweights</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">quantity</span> <span class=\"ow\">in</span> <span class=\"n\">quantities</span><span class=\"p\">]</span>\n\n    <span class=\"n\">normalized_cereals</span> <span class=\"o\">=</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">normalized_cereals</span><span class=\"p\">)):</span>\n        <span class=\"n\">cereal</span> <span class=\"o\">=</span> <span class=\"n\">normalized_cereals</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">column</span> <span class=\"ow\">in</span> <span class=\"n\">columns_to_normalize</span><span class=\"p\">:</span>\n            <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">reweights</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n\n<span class=\"hll\">    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">warehouse</span><span class=\"o\">.</span><span class=\"n\">update_normalized_cereals</span><span class=\"p\">(</span><span class=\"n\">normalized_cereals</span><span class=\"p\">)</span>\n</span></pre></div>\n</td></tr></table></div>\n</div>\n<p>Resources are another facility that Dagster makes available on the <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code> object passed to\nsolid logic. Note that we\u2019ve completely encapsulated access to the database behind the call to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">context.resources.warehouse.update_normalized_cereals</span></code>. This means that we can easily swap resource\nimplementations \u2013 for instance, to test against a local SQLite database instead of a production\nSnowflake database; to abstract software changes, such as swapping raw SQL for SQLAlchemy; or to\naccomodate changes in business logic, like moving from an overwriting scheme to append-only,\ndate-partitioned tables.</p>\n<p>To implement a resource and specify its config schema, we use the\n<a class=\"reference internal\" href=\"../../../api/apidocs/pipeline/#dagster.resource\" title=\"dagster.resource\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">&#64;resource</span></code></a> decorator. The decorated function should return whatever\nobject you wish to make available under the specific resource\u2019s slot in <code class=\"docutils literal notranslate\"><span class=\"pre\">context.resources</span></code>.\nResource constructor functions have access to their own <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code> argument, which gives access to\nresource-specific config. (Unlike the contexts we\u2019ve seen so far, which are instances of\n<a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.SystemComputeExecutionContext\" title=\"dagster.SystemComputeExecutionContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SystemComputeExecutionContext</span></code></a>, this context is\nan instance of <a class=\"reference internal\" href=\"../../../api/apidocs/pipeline/#dagster.InitResourceContext\" title=\"dagster.InitResourceContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InitResourceContext</span></code></a>.)</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">resources.py</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">LocalSQLiteWarehouse</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">conn_str</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_conn_str</span> <span class=\"o\">=</span> <span class=\"n\">conn_str</span>\n\n    <span class=\"c1\"># In practice, you&#39;ll probably want to write more generic, reusable logic on your resources</span>\n    <span class=\"c1\"># than this tutorial example</span>\n    <span class=\"k\">def</span> <span class=\"nf\">update_normalized_cereals</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">records</span><span class=\"p\">):</span>\n        <span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_conn_str</span><span class=\"p\">)</span>\n        <span class=\"n\">curs</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">curs</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s1\">&#39;DROP TABLE IF EXISTS normalized_cereals&#39;</span><span class=\"p\">)</span>\n            <span class=\"n\">curs</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n                <span class=\"sd\">&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS normalized_cereals</span>\n<span class=\"sd\">                (name text, mfr text, type text, calories real,</span>\n<span class=\"sd\">                 protein real, fat real, sodium real, fiber real,</span>\n<span class=\"sd\">                 carbo real, sugars real, potass real, vitamins real,</span>\n<span class=\"sd\">                 shelf real, weight real, cups real, rating real)&#39;&#39;&#39;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">curs</span><span class=\"o\">.</span><span class=\"n\">executemany</span><span class=\"p\">(</span>\n                <span class=\"sd\">&#39;&#39;&#39;INSERT INTO normalized_cereals VALUES</span>\n<span class=\"sd\">                (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&#39;&#39;&#39;</span><span class=\"p\">,</span>\n                <span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">record</span> <span class=\"ow\">in</span> <span class=\"n\">records</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"n\">curs</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n\n<span class=\"hll\"><span class=\"nd\">@resource</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;conn_str&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)})</span>\n</span><span class=\"hll\"><span class=\"k\">def</span> <span class=\"nf\">local_sqlite_warehouse_resource</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n</span><span class=\"hll\">    <span class=\"k\">return</span> <span class=\"n\">LocalSQLiteWarehouse</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">resource_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;conn_str&#39;</span><span class=\"p\">])</span>\n</span></pre></div>\n</td></tr></table></div>\n</div>\n<p>The last thing we need to do is to attach the resource to our pipeline, so that it\u2019s properly\ninitialized when the pipeline run begins and made available to our solid logic as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">context.resources.warehouse</span></code>.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">resources.py</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>83\n84\n85\n86\n87\n88\n89\n90\n91</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@pipeline</span><span class=\"p\">(</span>\n<span class=\"hll\">    <span class=\"n\">mode_defs</span><span class=\"o\">=</span><span class=\"p\">[</span>\n</span><span class=\"hll\">        <span class=\"n\">ModeDefinition</span><span class=\"p\">(</span>\n</span><span class=\"hll\">            <span class=\"n\">resource_defs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;warehouse&#39;</span><span class=\"p\">:</span> <span class=\"n\">local_sqlite_warehouse_resource</span><span class=\"p\">}</span>\n</span><span class=\"hll\">        <span class=\"p\">)</span>\n</span><span class=\"hll\">    <span class=\"p\">]</span>\n</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">resources_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">normalize_calories</span><span class=\"p\">(</span><span class=\"n\">read_csv</span><span class=\"p\">())</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>All resources are associated with a <a class=\"reference internal\" href=\"../../../api/apidocs/pipeline/#dagster.ModeDefinition\" title=\"dagster.ModeDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModeDefinition</span></code></a>. So far,\nall of our pipelines have had only a single, system default mode, so we haven\u2019t had to tell Dagster\nwhat mode to run them in. Even in this case, where we provide a single anonymous mode to the\n<a class=\"reference internal\" href=\"../../../api/apidocs/pipeline/#dagster.pipeline\" title=\"dagster.pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;pipeline</span></code></a> decorator, we won\u2019t have to specify which mode to use (it\nwill take the place of the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> mode).</p>\n<p>We can put it all together with the following config:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">resources.yaml</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-YAML notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"hll\"><span class=\"nt\">resources</span><span class=\"p\">:</span>\n</span><span class=\"hll\">  <span class=\"nt\">warehouse</span><span class=\"p\">:</span>\n</span><span class=\"hll\">    <span class=\"nt\">config</span><span class=\"p\">:</span>\n</span><span class=\"hll\">      <span class=\"nt\">conn_str</span><span class=\"p\">:</span> <span class=\"s\">&quot;:memory:&quot;</span>\n</span><span class=\"nt\">solids</span><span class=\"p\">:</span>\n  <span class=\"nt\">read_csv</span><span class=\"p\">:</span>\n    <span class=\"nt\">inputs</span><span class=\"p\">:</span>\n      <span class=\"nt\">csv_path</span><span class=\"p\">:</span>\n        <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"s\">&quot;cereal.csv&quot;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>(Here, we pass the special string <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;:memory:&quot;</span></code> in config as the connection string for our\ndatabase \u2013 this is how SQLite designates an in-memory database.)</p>\n<div class=\"section\" id=\"expressing-resource-dependencies\">\n<h2>Expressing resource dependencies<a class=\"headerlink\" href=\"#expressing-resource-dependencies\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>We\u2019ve provided a <code class=\"docutils literal notranslate\"><span class=\"pre\">warehouse</span></code> resource to our pipeline, but we\u2019re still manually managing our\npipeline\u2019s dependency on this resource. Dagster also provides a way for solids to advertise\ntheir resource requirements, to make it easier to keep track of which resources need to be\nprovided for a pipeline.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">required_resources.py</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"hll\"><span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">required_resource_keys</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;warehouse&#39;</span><span class=\"p\">})</span>\n</span><span class=\"k\">def</span> <span class=\"nf\">normalize_calories</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n    <span class=\"n\">columns_to_normalize</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;protein&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;fat&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;sodium&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;fiber&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;carbo&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;sugars&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;potass&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;vitamins&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">quantities</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;cups&#39;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">cereal</span> <span class=\"ow\">in</span> <span class=\"n\">cereals</span><span class=\"p\">]</span>\n    <span class=\"n\">reweights</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span> <span class=\"o\">/</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">quantity</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">quantity</span> <span class=\"ow\">in</span> <span class=\"n\">quantities</span><span class=\"p\">]</span>\n\n    <span class=\"n\">normalized_cereals</span> <span class=\"o\">=</span> <span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">normalized_cereals</span><span class=\"p\">)):</span>\n        <span class=\"n\">cereal</span> <span class=\"o\">=</span> <span class=\"n\">normalized_cereals</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n        <span class=\"k\">for</span> <span class=\"n\">column</span> <span class=\"ow\">in</span> <span class=\"n\">columns_to_normalize</span><span class=\"p\">:</span>\n            <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"n\">column</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"n\">reweights</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">warehouse</span><span class=\"o\">.</span><span class=\"n\">update_normalized_cereals</span><span class=\"p\">(</span><span class=\"n\">normalized_cereals</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Now, the Dagster machinery knows that this solid requires a resource called <code class=\"docutils literal notranslate\"><span class=\"pre\">warehouse</span></code> to be\npresent on its mode definitions, and will complain if that resource is not present.</p>\n</div>\n</div>\n<div class=\"section\" id=\"pipeline-modes\">\n<h1>Pipeline modes<a class=\"headerlink\" href=\"#pipeline-modes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>By attaching different sets of resources with the same APIs to different modes, we can support\nrunning pipelines \u2013 with unchanged business logic \u2013 in different environments. So you might have\na \u201cunittest\u201d mode that runs against an in-memory SQLite database, a \u201cdev\u201d mode that runs against\nPostgres, and a \u201cprod\u201d mode that runs against Snowflake.</p>\n<p>Separating the resource definition from the business logic makes pipelines testable. As long as the\nAPIs of the resources agree, and the fundamental operations they expose are tested in each\nenvironment, we can test business logic independent of environments that may be very costly or\ndifficult to test against.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">modes.py</span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>74\n75\n76\n77\n78\n79\n80\n81\n82\n83</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span>\n<span class=\"k\">class</span> <span class=\"nc\">SqlAlchemyPostgresWarehouse</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">conn_str</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_conn_str</span> <span class=\"o\">=</span> <span class=\"n\">conn_str</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_engine</span> <span class=\"o\">=</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_conn_str</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update_normalized_cereals</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">records</span><span class=\"p\">):</span>\n        <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">bind</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_engine</span>\n        <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">drop_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_engine</span><span class=\"p\">)</span>\n        <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">create_all</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_engine</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Even if you\u2019re not familiar with SQLAlchemy, it\u2019s enough to note that this is a very different\nimplementation of the <code class=\"docutils literal notranslate\"><span class=\"pre\">warehouse</span></code> resource. To make this implementation available to Dagster, we\nattach it to a <a class=\"reference internal\" href=\"../../../api/apidocs/pipeline/#dagster.ModeDefinition\" title=\"dagster.ModeDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModeDefinition</span></code></a>.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id7\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">modes.py</span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span>\n<span class=\"nd\">@pipeline</span><span class=\"p\">(</span>\n    <span class=\"n\">mode_defs</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">ModeDefinition</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;unittest&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">resource_defs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;warehouse&#39;</span><span class=\"p\">:</span> <span class=\"n\">local_sqlite_warehouse_resource</span><span class=\"p\">},</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">ModeDefinition</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;dev&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">resource_defs</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"s1\">&#39;warehouse&#39;</span><span class=\"p\">:</span> <span class=\"n\">sqlachemy_postgres_warehouse_resource</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">modes_pipeline</span><span class=\"p\">():</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Each of the ways we can invoke a Dagster pipeline lets us select which mode we\u2019d like to run it in.</p>\n<p>From the command line, we can set <code class=\"docutils literal notranslate\"><span class=\"pre\">-d</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">--mode</span></code> and select the name of the mode:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ dagster pipeline execute -f modes.py -n modes_pipeline -d dev\n</pre></div>\n</div>\n<p>From the Python API, we can use the <a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.RunConfig\" title=\"dagster.RunConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunConfig</span></code></a>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id8\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">modes.py</span><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>151\n152\n153\n154\n155</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"p\">}</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">execute_pipeline</span><span class=\"p\">(</span>\n    <span class=\"n\">modes_pipeline</span><span class=\"p\">,</span>\n<span class=\"hll\">    <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n</span>    <span class=\"n\">run_config</span><span class=\"o\">=</span><span class=\"n\">RunConfig</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;unittest&#39;</span><span class=\"p\">),</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>And in Dagit, we can use the \u201cMode\u201d selector to pick the mode in which we\u2019d like to execute.</p>\n<a class=\"\"\n               data-lightbox=\"group-69d2d92b-0855-408d-8006-ef86fc4170ff\"\n               href=\"../../../../_images/modes1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/modes1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>The config editor is Dagit is mode-aware, so when you switch modes and introduce a resource that\nrequires additional config, the editor will prompt you.</p>\n</div>\n<div class=\"section\" id=\"pipeline-config-presets\">\n<h1>Pipeline config presets<a class=\"headerlink\" href=\"#pipeline-config-presets\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Useful as the Dagit config editor and the ability to stitch together YAML fragments is, once\npipelines have been productionized and config is unlikely to change, it\u2019s often useful to distribute\npipelines with embedded config. For example, you might point solids at different S3 buckets in\ndifferent environments, or want to pull database credentials from different environment variables.</p>\n<p>Dagster calls this a config preset:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id9\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">presets.py</span><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span>\n<span class=\"nd\">@pipeline</span><span class=\"p\">(</span>\n    <span class=\"n\">mode_defs</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">ModeDefinition</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;unittest&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">resource_defs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;warehouse&#39;</span><span class=\"p\">:</span> <span class=\"n\">local_sqlite_warehouse_resource</span><span class=\"p\">},</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">ModeDefinition</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;dev&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">resource_defs</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"s1\">&#39;warehouse&#39;</span><span class=\"p\">:</span> <span class=\"n\">sqlachemy_postgres_warehouse_resource</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">),</span>\n<span class=\"hll\">    <span class=\"p\">],</span>\n</span><span class=\"hll\">    <span class=\"n\">preset_defs</span><span class=\"o\">=</span><span class=\"p\">[</span>\n</span><span class=\"hll\">        <span class=\"n\">PresetDefinition</span><span class=\"p\">(</span>\n</span><span class=\"hll\">            <span class=\"s1\">&#39;unittest&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">            <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"p\">{</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;solids&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n</span><span class=\"hll\">                    <span class=\"s1\">&#39;read_csv&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n</span><span class=\"hll\">                        <span class=\"s1\">&#39;inputs&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;csv_path&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;value&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;cereal.csv&#39;</span><span class=\"p\">}}</span>\n</span><span class=\"hll\">                    <span class=\"p\">}</span>\n</span><span class=\"hll\">                <span class=\"p\">},</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;resources&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n</span><span class=\"hll\">                    <span class=\"s1\">&#39;warehouse&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;config&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;conn_str&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;:memory:&#39;</span><span class=\"p\">}}</span>\n</span><span class=\"hll\">                <span class=\"p\">},</span>\n</span><span class=\"hll\">            <span class=\"p\">},</span>\n</span><span class=\"hll\">            <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;unittest&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">        <span class=\"p\">),</span>\n</span><span class=\"hll\">        <span class=\"n\">PresetDefinition</span><span class=\"o\">.</span><span class=\"n\">from_files</span><span class=\"p\">(</span>\n</span><span class=\"hll\">            <span class=\"s1\">&#39;dev&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">            <span class=\"n\">environment_files</span><span class=\"o\">=</span><span class=\"p\">[</span>\n</span><span class=\"hll\">                <span class=\"n\">script_relative_path</span><span class=\"p\">(</span><span class=\"s1\">&#39;presets_dev_warehouse.yaml&#39;</span><span class=\"p\">),</span>\n</span><span class=\"hll\">                <span class=\"n\">script_relative_path</span><span class=\"p\">(</span><span class=\"s1\">&#39;presets_csv.yaml&#39;</span><span class=\"p\">),</span>\n</span><span class=\"hll\">            <span class=\"p\">],</span>\n</span><span class=\"hll\">            <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;dev&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">        <span class=\"p\">),</span>\n</span>    <span class=\"p\">],</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">presets_pipeline</span><span class=\"p\">():</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>We illustrate two ways of defining a preset.</p>\n<p>The first is to pass an <code class=\"docutils literal notranslate\"><span class=\"pre\">environment_dict</span></code> literal to the constructor. Because this dict is\ndefined in Python, you can do arbitrary computation to construct it \u2013 for instance, picking up\nenvironment variables, making a call to a secrets store like Hashicorp Vault, etc.</p>\n<p>The second is to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">from_files</span></code> static constructor, and pass a list of file globs from\nwhich to read YAML fragments. Order matters in this case, and keys from later files will overwrite\nkeys from earlier files.</p>\n<p>To select a preset for execution, we can use the CLI, the Python API, or Dagit.</p>\n<p>From the CLI, use <code class=\"docutils literal notranslate\"><span class=\"pre\">-p</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">--preset</span></code>:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ dagster pipeline execute -f modes.py -n modes_pipeline -p unittest\n</pre></div>\n</div>\n<p>From Python, you can use <a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.execute_pipeline_with_preset\" title=\"dagster.execute_pipeline_with_preset\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">execute_pipeline_with_preset</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">_name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n</pre></div>\n</div>\n<p>And in Dagit, we can use the \u201cPresets\u201d selector.</p>\n<a class=\"\"\n               data-lightbox=\"group-dac8ffa4-98c1-44ec-9942-80e2ce061533\"\n               href=\"../../../../_images/presets1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/presets1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a></div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    [
      "sections/learn/tutorial/repos",
      "Organizing pipelines in repositories",
      "N",
      "next"
    ],
    ["sections/learn/tutorial/intermediates", "Intermediates", "P", "previous"]
  ],
  "sourcename": "sections/learn/tutorial/resources.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Parametrizing pipelines with resources</a><ul>\n<li><a class=\"reference internal\" href=\"#expressing-resource-dependencies\">Expressing resource dependencies</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#pipeline-modes\">Pipeline modes</a></li>\n<li><a class=\"reference internal\" href=\"#pipeline-config-presets\">Pipeline config presets</a></li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/tutorial/resources",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
