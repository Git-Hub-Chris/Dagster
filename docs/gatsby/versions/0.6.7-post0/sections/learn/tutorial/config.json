{
  "parents": [
    { "link": "../../learn/", "title": "Learn" },
    { "link": "../", "title": "Tutorial" }
  ],
  "prev": { "link": "../inputs/", "title": "Parametrizing solids with inputs" },
  "next": { "link": "../types/", "title": "User-defined types" },
  "title": "Parametrizing solids with config",
  "meta": {},
  "body": "<div class=\"section\" id=\"parametrizing-solids-with-config\">\n<h1>Parametrizing solids with config<a class=\"headerlink\" href=\"#parametrizing-solids-with-config\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Solids often depend in predictable ways on features of the external world or the pipeline in which\nthey\u2019re invoked. For example, consider an extended version of our csv-reading solid that implements\nmore of the options available in the underlying Python API:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">config_bad_1.py</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">csv_path</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">row</span>\n            <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span>\n                <span class=\"n\">fd</span><span class=\"p\">,</span>\n<span class=\"hll\">                <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">                <span class=\"n\">doublequote</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n</span><span class=\"hll\">                <span class=\"n\">escapechar</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">                <span class=\"n\">quotechar</span><span class=\"o\">=</span><span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">                <span class=\"n\">quoting</span><span class=\"o\">=</span><span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">QUOTE_MINIMAL</span><span class=\"p\">,</span>\n</span><span class=\"hll\">                <span class=\"n\">skipinitialspace</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n</span><span class=\"hll\">                <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n</span>            <span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Read </span><span class=\"si\">{n_lines}</span><span class=\"s1\"> lines&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_lines</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">lines</span>\n\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>We obviously don\u2019t want to have to write a separate solid for each permutation of these parameters\nthat we use in our pipelines \u2013 especially because, in more realistic cases like configuring a\nSpark job or even parametrizing the <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code> function from a popular package like\n<a class=\"reference external\" href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html#pandas.read_csv\">Pandas</a>,\nwe might have dozens or hundreds of parameters like these.</p>\n<p>But hoisting all of these parameters into the signature of the solid function as inputs isn\u2019t the\nright answer either:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">config_bad_2.py</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">read_csv</span><span class=\"p\">(</span>\n    <span class=\"n\">context</span><span class=\"p\">,</span>\n    <span class=\"n\">csv_path</span><span class=\"p\">,</span>\n<span class=\"hll\">    <span class=\"n\">delimiter</span><span class=\"p\">,</span>\n</span><span class=\"hll\">    <span class=\"n\">doublequote</span><span class=\"p\">,</span>\n</span><span class=\"hll\">    <span class=\"n\">escapechar</span><span class=\"p\">,</span>\n</span><span class=\"hll\">    <span class=\"n\">quotechar</span><span class=\"p\">,</span>\n</span><span class=\"hll\">    <span class=\"n\">quoting</span><span class=\"p\">,</span>\n</span><span class=\"hll\">    <span class=\"n\">skipinitialspace</span><span class=\"p\">,</span>\n</span><span class=\"hll\">    <span class=\"n\">strict</span><span class=\"p\">,</span>\n</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">row</span>\n            <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span>\n                <span class=\"n\">fd</span><span class=\"p\">,</span>\n                <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"n\">delimiter</span><span class=\"p\">,</span>\n                <span class=\"n\">doublequote</span><span class=\"o\">=</span><span class=\"n\">doublequote</span><span class=\"p\">,</span>\n                <span class=\"n\">escapechar</span><span class=\"o\">=</span><span class=\"n\">escapechar</span><span class=\"p\">,</span>\n                <span class=\"n\">quotechar</span><span class=\"o\">=</span><span class=\"n\">quotechar</span><span class=\"p\">,</span>\n                <span class=\"n\">quoting</span><span class=\"o\">=</span><span class=\"n\">quoting</span><span class=\"p\">,</span>\n                <span class=\"n\">skipinitialspace</span><span class=\"o\">=</span><span class=\"n\">skipinitialspace</span><span class=\"p\">,</span>\n                <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"n\">strict</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Read </span><span class=\"si\">{n_lines}</span><span class=\"s1\"> lines&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_lines</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">lines</span>\n\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Defaults are often sufficient for configuation values like these, and sets of parameters are often\nreusable. And it\u2019s unlikely that values like this will be provided dynamically by the outputs of\nother solids in a pipeline.</p>\n<p>Inputs, on the other hand, will usually be provided by the outputs of other solids in a pipeline,\neven though we might sometimes want to stub them using the config facility.</p>\n<p>For all these reasons, it\u2019s bad practice to mix configuration values like these with true input\nvalues.</p>\n<p>The solution is to define a config schema for our solid:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">config.py</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">csv</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Bool</span><span class=\"p\">,</span>\n    <span class=\"n\">Field</span><span class=\"p\">,</span>\n    <span class=\"n\">Int</span><span class=\"p\">,</span>\n    <span class=\"n\">String</span><span class=\"p\">,</span>\n    <span class=\"n\">execute_pipeline</span><span class=\"p\">,</span>\n    <span class=\"n\">pipeline</span><span class=\"p\">,</span>\n    <span class=\"n\">solid</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n<span class=\"hll\">    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{</span>\n</span>        <span class=\"s1\">&#39;delimiter&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n            <span class=\"n\">String</span><span class=\"p\">,</span>\n            <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;,&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;A one-character string used to separate fields.&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n        <span class=\"s1\">&#39;doublequote&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n            <span class=\"n\">Bool</span><span class=\"p\">,</span>\n            <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;Controls how instances of quotechar appearing inside a field &#39;</span>\n                <span class=\"s1\">&#39;should themselves be quoted. When True, the character is &#39;</span>\n                <span class=\"s1\">&#39;doubled. When False, the escapechar is used as a prefix to &#39;</span>\n                <span class=\"s1\">&#39;the quotechar.&#39;</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n<span class=\"hll\">        <span class=\"s1\">&#39;escapechar&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n</span><span class=\"hll\">            <span class=\"n\">String</span><span class=\"p\">,</span>\n</span><span class=\"hll\">            <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">            <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n</span><span class=\"hll\">            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;On reading, the escapechar removes any special meaning from &#39;</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;the following character.&#39;</span>\n</span><span class=\"hll\">            <span class=\"p\">),</span>\n</span><span class=\"hll\">        <span class=\"p\">),</span>\n</span>        <span class=\"s1\">&#39;quotechar&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n            <span class=\"n\">String</span><span class=\"p\">,</span>\n            <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;A one-character string used to quote fields containing &#39;</span>\n                <span class=\"s1\">&#39;special characters, such as the delimiter or quotechar, &#39;</span>\n                <span class=\"s1\">&#39;or which contain new-line characters.&#39;</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n        <span class=\"s1\">&#39;quoting&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n            <span class=\"n\">Int</span><span class=\"p\">,</span>\n            <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">QUOTE_MINIMAL</span><span class=\"p\">,</span>\n            <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;Controls when quotes should be generated by the writer and &#39;</span>\n                <span class=\"s1\">&#39;recognised by the reader. It can take on any of the &#39;</span>\n                <span class=\"s1\">&#39;csv.QUOTE_* constants&#39;</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n        <span class=\"s1\">&#39;skipinitialspace&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n            <span class=\"n\">Bool</span><span class=\"p\">,</span>\n            <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;When True, whitespace immediately following the delimiter &#39;</span>\n                <span class=\"s1\">&#39;is ignored. The default is False.&#39;</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n        <span class=\"s1\">&#39;strict&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n            <span class=\"n\">Bool</span><span class=\"p\">,</span>\n            <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;When True, raise exception on bad CSV input.&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">csv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">row</span>\n            <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span>\n                <span class=\"n\">fd</span><span class=\"p\">,</span>\n                <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;delimiter&#39;</span><span class=\"p\">],</span>\n                <span class=\"n\">doublequote</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;doublequote&#39;</span><span class=\"p\">],</span>\n<span class=\"hll\">                <span class=\"n\">escapechar</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;escapechar&#39;</span><span class=\"p\">],</span>\n</span>                <span class=\"n\">quotechar</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;quotechar&#39;</span><span class=\"p\">],</span>\n                <span class=\"n\">quoting</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;quoting&#39;</span><span class=\"p\">],</span>\n                <span class=\"n\">skipinitialspace</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;skipinitialspace&#39;</span><span class=\"p\">],</span>\n                <span class=\"n\">strict</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;strict&#39;</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Read </span><span class=\"si\">{n_lines}</span><span class=\"s1\"> lines&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_lines</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">lines</span>\n\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">config_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">read_csv</span><span class=\"p\">()</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>First, we pass the <code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code> argument to the <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.solid\" title=\"dagster.solid\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;solid</span></code></a> decorator.\nThis tells Dagster to give our solid a config field structured as a dictionary, whose keys are the\nkeys of this argument, and the types of whose values are defined by the values of this argument\n(instances of <a class=\"reference internal\" href=\"../../../api/apidocs/types/#dagster.Field\" title=\"dagster.Field\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Field</span></code></a>).</p>\n<p>Then, we define one of these fields, <code class=\"docutils literal notranslate\"><span class=\"pre\">escapechar</span></code>, to be a string, setting a default value,\nmaking it optional, and setting a human-readable description.</p>\n<p>Finally, inside the body of the solid function, we access the config value set by the\nuser using the <code class=\"docutils literal notranslate\"><span class=\"pre\">solid_config</span></code> field on the familiar\n<a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.SystemComputeExecutionContext\" title=\"dagster.SystemComputeExecutionContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">context</span></code></a> object. When Dagster executes our pipeline,\nthe framework will make validated config for each solid available on this object.</p>\n<p>Let\u2019s see how all of this looks in dagit. As usual, run:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> dagit -f config.py -n config_pipeline\n</pre></div>\n</div>\n<a class=\"\"\n               data-lightbox=\"group-fd3869ae-888d-4fe2-b879-3b50e1a29f70\"\n               href=\"../../../../_images/config_figure_one1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/config_figure_one1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>As you may by now expect, Dagit provides a fully type-aware and schema-aware config editing\nenvironment with a typeahead. The human-readable descriptions we provided on our config fields\nappear in the config context minimap, as well as in typeahead tooltips and in the Explore pane\nwhen clicking into the individual solid definition.</p>\n<a class=\"\"\n               data-lightbox=\"group-34326d79-5118-43c4-97ec-7ee8aaa8100d\"\n               href=\"../../../../_images/config_figure_two1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/config_figure_two1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>You can see that we\u2019ve added a new section to the solid config. In addition to the <code class=\"docutils literal notranslate\"><span class=\"pre\">inputs</span></code>\nsection, which we\u2019ll still use to set the <code class=\"docutils literal notranslate\"><span class=\"pre\">csv_path</span></code> input, we now have a <code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code> section,\nwhere we can set values defined in the <code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code> argument to <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.solid\" title=\"dagster.solid\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;solid</span></code></a>.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">config_env_bad.yaml</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-YAML notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6\n7</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">solids</span><span class=\"p\">:</span>\n  <span class=\"nt\">read_csv</span><span class=\"p\">:</span>\n    <span class=\"nt\">config</span><span class=\"p\">:</span>\n      <span class=\"nt\">delimiter</span><span class=\"p\">:</span> <span class=\"s\">&quot;;&quot;</span>\n    <span class=\"nt\">inputs</span><span class=\"p\">:</span>\n      <span class=\"nt\">csv_path</span><span class=\"p\">:</span>\n        <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"s\">&quot;cereal.csv&quot;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Of course, this config won\u2019t give us the results we\u2019re expecting. The values in <code class=\"docutils literal notranslate\"><span class=\"pre\">cereal.csv</span></code>\nare comma-separated, not semicolon-separated, as they might be if this were a .csv from Europe,\nwhere commas are frequently used in place of the decimal point.</p>\n<p>We\u2019ll see later how we can use Dagster\u2019s facilities for automatic data quality checks to guard\nagainst semantic issues like this, which won\u2019t be caught by the type system.</p>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    ["sections/learn/tutorial/types", "User-defined types", "N", "next"],
    [
      "sections/learn/tutorial/inputs",
      "Parametrizing solids with inputs",
      "P",
      "previous"
    ]
  ],
  "sourcename": "sections/learn/tutorial/config.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Parametrizing solids with config</a></li>\n</ul>\n",
  "display_toc": false,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/tutorial/config",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
