{
  "parents": [{ "link": "../../", "title": "Module code" }],
  "title": "dagster_celery.executor",
  "body": "<h1>Source code for dagster_celery.executor</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">PermissiveDict</span><span class=\"p\">,</span> <span class=\"n\">String</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.definitions.executor</span> <span class=\"kn\">import</span> <span class=\"n\">executor</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.config</span> <span class=\"kn\">import</span> <span class=\"n\">CeleryConfig</span>\n\n\n<div class=\"viewcode-block\" id=\"celery_executor\"><a class=\"viewcode-back\" href=\"../../../sections/api/apidocs/dagster_celery/#dagster_celery.celery_executor\">[docs]</a><span class=\"nd\">@executor</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;celery&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">&#39;broker&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n            <span class=\"n\">String</span><span class=\"p\">,</span>\n            <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;The URL of the Celery broker. Default: &#39;</span>\n                <span class=\"s1\">&#39;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">pyamqp://guest@{os.getenv(</span><span class=\"se\">\\&#39;</span><span class=\"s1\">DAGSTER_CELERY_BROKER_HOST</span><span class=\"se\">\\&#39;</span><span class=\"s1\">,&#39;</span>\n                <span class=\"s1\">&#39;</span><span class=\"se\">\\&#39;</span><span class=\"s1\">localhost</span><span class=\"se\">\\&#39;</span><span class=\"s1\">)}//</span><span class=\"se\">\\&#39;</span><span class=\"s1\">.&#39;</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">),</span>\n        <span class=\"s1\">&#39;backend&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n            <span class=\"n\">String</span><span class=\"p\">,</span>\n            <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;rpc://&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;The URL of the Celery results backend. Default: </span><span class=\"se\">\\&#39;</span><span class=\"s1\">rpc://</span><span class=\"se\">\\&#39;</span><span class=\"s1\">.&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n        <span class=\"s1\">&#39;include&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n            <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">],</span> <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;List of modules every worker should import&#39;</span>\n        <span class=\"p\">),</span>\n        <span class=\"s1\">&#39;config_source&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n            <span class=\"n\">PermissiveDict</span><span class=\"p\">(),</span> <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;Settings for the Celery app.&#39;</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">celery_executor</span><span class=\"p\">(</span><span class=\"n\">init_context</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Celery-based executor.</span>\n\n<span class=\"sd\">    The Celery executor exposes config settings for the underlying Celery app under</span>\n<span class=\"sd\">    the ``config_source`` key. This config corresponds to the &quot;new lowercase settings&quot; introduced</span>\n<span class=\"sd\">    in Celery version 4.0 and the object constructed from config will be passed to the</span>\n<span class=\"sd\">    :py:class:`celery.Celery` constructor as its ``config_source`` argument.</span>\n<span class=\"sd\">    (See https://docs.celeryproject.org/en/latest/userguide/configuration.html for details.)</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">    The executor also exposes the ``broker``, `backend`, and ``include`` arguments to the</span>\n<span class=\"sd\">    :py:class:`celery.Celery` constructor.</span>\n\n<span class=\"sd\">    In the most common case, you may want to modify the ``broker`` and ``backend`` (e.g., to use</span>\n<span class=\"sd\">    Redis  instead of RabbitMQ). We expect that ``celery_settings`` will be less frequently</span>\n<span class=\"sd\">    modified, but that when solid executions are especially fast or slow, or when there are</span>\n<span class=\"sd\">    different requirements around idempotence or retry, it will make sense to execute pipelines</span>\n<span class=\"sd\">    with variations on these settings.</span>\n\n<span class=\"sd\">    **Config**:</span>\n<span class=\"sd\">    .. code-block::</span>\n\n<span class=\"sd\">        {</span>\n<span class=\"sd\">            broker?: &#39;pyamqp://guest@localhost//&#39;,  # The URL of the Celery broker</span>\n<span class=\"sd\">            backend?: &#39;rpc://&#39;, # The URL of the Celery results backend</span>\n<span class=\"sd\">            include?: [&#39;my_module&#39;], # List of modules every worker should import</span>\n<span class=\"sd\">            celery_settings: {</span>\n<span class=\"sd\">                ... # Celery app config</span>\n<span class=\"sd\">            }</span>\n<span class=\"sd\">        }</span>\n\n<span class=\"sd\">    If you&#39;d like to configure a celery executor in addition to the</span>\n<span class=\"sd\">    :py:class:`~dagster.default_executors`, you should add it to the ``executor_defs`` defined on a</span>\n<span class=\"sd\">    :py:class:`~dagster.ModeDefinition` as follows:</span>\n\n<span class=\"sd\">    .. code-block:: python</span>\n\n<span class=\"sd\">        from dagster import ModeDefinition, default_executors, pipeline</span>\n<span class=\"sd\">        from dagster_celery import celery_executor</span>\n\n<span class=\"sd\">        @pipeline(mode_defs=[ModeDefinition(executor_defs=default_executors + [celery_executor])])</span>\n<span class=\"sd\">        def celery_enabled_pipeline():</span>\n<span class=\"sd\">            pass</span>\n\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">CeleryConfig</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">init_context</span><span class=\"o\">.</span><span class=\"n\">executor_config</span><span class=\"p\">)</span></div>\n</pre></div>",
  "current_page_name": "_modules/dagster_celery/executor",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
