{
  "parents": [
    { "link": "../../learn/", "title": "Learn" },
    { "link": "../", "title": "Tutorial" }
  ],
  "prev": { "link": "../materializations/", "title": "Materializations" },
  "next": {
    "link": "../resources/",
    "title": "Parametrizing pipelines with resources"
  },
  "title": "Intermediates",
  "meta": {},
  "body": "<div class=\"section\" id=\"intermediates\">\n<span id=\"tutorial-intermediates\"></span><h1>Intermediates<a class=\"headerlink\" href=\"#intermediates\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>We\u2019ve already seen how solids can describe their persistent artifacts to the system using\n<a class=\"reference external\" href=\"materializations\">materializations</a>.</p>\n<p>Dagster also has a facility for automatically materializing the intermediate values that actually\npass between solids.</p>\n<p>This can be very useful for debugging, when you want to inspect the value output by a solid and\nensure that it is as you expect; for audit, when you want to understand how a particular\ndownstream output was created; and for re-executing downstream solids with cached results from\nexpensive upstream computations.</p>\n<p>To turn intermediate storage on, just set another key in the pipeline config:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">intermediates.yaml</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6\n7</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\">solids</span><span class=\"p\">:</span>\n  <span class=\"n\">read_csv</span><span class=\"p\">:</span>\n    <span class=\"n\">inputs</span><span class=\"p\">:</span>\n      <span class=\"n\">csv_path</span><span class=\"p\">:</span>\n        <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"s2\">&quot;cereal.csv&quot;</span>\n<span class=\"hll\"><span class=\"n\">storage</span><span class=\"p\">:</span>\n</span><span class=\"hll\">  <span class=\"n\">filesystem</span><span class=\"p\">:</span>\n</span></pre></div>\n</td></tr></table></div>\n</div>\n<p>When you execute the pipeline using this config, you\u2019ll see new structured entries in the Dagit\nlog viewer indicating that intermediates have been stored on the filesystem.</p>\n<a class=\"\"\n               data-lightbox=\"group-5b05a684-a351-4bc3-b4fc-a4511a911fdf\"\n               href=\"../../../../_images/intermediates1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/intermediates1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><div class=\"section\" id=\"intermediate-storage-for-types-that-cannot-be-pickled\">\n<h2>Intermediate storage for types that cannot be pickled<a class=\"headerlink\" href=\"#intermediate-storage-for-types-that-cannot-be-pickled\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>By default, Dagster will try to pickle intermediate values to store them on the filesystem. Some\ncustom data types cannot be pickled (for instance, a Spark RDD), so you will need to tell Dagster\nhow to serialize them.</p>\n<p>Our toy <code class=\"docutils literal notranslate\"><span class=\"pre\">LessSimpleDataFrame</span></code> is, of course, pickleable, but supposing it was not, let\u2019s set a\ncustom <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SerializationStrategy</span></code> on it to tell Dagster how\nto store intermediates of this type.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">serialization_strategy.py</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">CsvSerializationStrategy</span><span class=\"p\">(</span><span class=\"n\">SerializationStrategy</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CsvSerializationStrategy</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;csv_strategy&#39;</span><span class=\"p\">,</span> <span class=\"n\">read_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;r&#39;</span><span class=\"p\">,</span> <span class=\"n\">write_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;w&#39;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">serialize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">write_file_obj</span><span class=\"p\">):</span>\n        <span class=\"n\">fieldnames</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictWriter</span><span class=\"p\">(</span><span class=\"n\">write_file_obj</span><span class=\"p\">,</span> <span class=\"n\">fieldnames</span><span class=\"p\">)</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writeheader</span><span class=\"p\">()</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerows</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">deserialize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">read_file_obj</span><span class=\"p\">):</span>\n        <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">read_file_obj</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">LessSimpleDataFrame</span><span class=\"p\">([</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">])</span>\n\n\n<span class=\"nd\">@dagster_type</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;LessSimpleDataFrame&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;A naive representation of a data frame, e.g., as returned by &#39;</span>\n        <span class=\"s1\">&#39;csv.DictReader.&#39;</span>\n    <span class=\"p\">),</span>\n    <span class=\"n\">serialization_strategy</span><span class=\"o\">=</span><span class=\"n\">CsvSerializationStrategy</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Now, when we set the <code class=\"docutils literal notranslate\"><span class=\"pre\">storage</span></code> key in pipeline config and run this pipeline, we\u2019ll see that our\nintermediate is automatically persisted as a human-readable .csv:</p>\n<a class=\"\"\n               data-lightbox=\"group-bab16477-f088-4ccf-b407-e79ab236d30e\"\n               href=\"../../../../_images/serialization_strategy1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/serialization_strategy1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a></div>\n<div class=\"section\" id=\"reexecution\">\n<h2>Reexecution<a class=\"headerlink\" href=\"#reexecution\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Once intermediates are being stored, Dagit makes it possible to individually execute solids\nwhose outputs are satisfied by previously materialized intermediates. Click the small run button\nto the right of the <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_calories.compute</span></code> execution step to reexecute only this step,\nusing the automatically materialized intermediate output of the previous solid.</p>\n<a class=\"\"\n               data-lightbox=\"group-5870e6b3-c970-4a11-be21-ca2a06c65110\"\n               href=\"../../../../_images/reexecution1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/reexecution1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Reexecuting individual solids can be very helpful while you\u2019re writing solids, or while you\u2019re\nactively debugging them.</p>\n<p>You can also manually specify intermediates from previous runs as inputs to solids. Recall the\nsyntax we used to set input values using the config system:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">inputs_env.yaml</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-YAML notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">solids</span><span class=\"p\">:</span>\n  <span class=\"nt\">read_csv</span><span class=\"p\">:</span>\n    <span class=\"nt\">inputs</span><span class=\"p\">:</span>\n      <span class=\"nt\">csv_path</span><span class=\"p\">:</span>\n        <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"s\">&quot;cereal.csv&quot;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Instead of setting the key <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> (i.e., providing a ), we can also set <code class=\"docutils literal notranslate\"><span class=\"pre\">pickle</span></code>, as follows:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">reexecution_env.yaml</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-YAML notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">solids</span><span class=\"p\">:</span>\n  <span class=\"nt\">read_csv</span><span class=\"p\">:</span>\n    <span class=\"nt\">inputs</span><span class=\"p\">:</span>\n      <span class=\"nt\">csv_path</span><span class=\"p\">:</span>\n        <span class=\"nt\">pickle</span><span class=\"p\">:</span>\n          <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"s\">&quot;/dagster_home/storage/2584d954-a30f-4be6-bbfc-c919e4bee84b/intermediates/read_csv.compute/result&quot;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>(Of course, you\u2019ll need to use the path to an intermediate that is actually present on your\nfilesystem.)</p>\n<p>If you directly substitute this config into Dagit, you\u2019ll see an error, because the system still\nexpects the input to <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_calories</span></code> to be satisfied by the output from <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code>.</p>\n<a class=\"\"\n               data-lightbox=\"group-349df4e8-0e77-481f-863c-8a633a38f099\"\n               href=\"../../../../_images/reexecution_errors1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/reexecution_errors1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>To make this config valid, we\u2019ll need to tell Dagit to execute only a subset of the pipeline \u2013\njust the <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_by_calories</span></code> solid. Click on the subset-selector button in the bottom left of\nthe config editor screen (which, when no subset has been specified, will read \u201cAll Solids\u201d):</p>\n<a class=\"\"\n               data-lightbox=\"group-dcbd153c-37df-4d56-af4c-a75c18e0a529\"\n               href=\"../../../../_images/subset_selection1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/subset_selection1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Hit \u201cApply\u201d, and this config will now pass validation, and the individual solid can be reexecuted:</p>\n<a class=\"\"\n               data-lightbox=\"group-5b1b84ca-45ab-4544-91b9-2cb04613e0b8\"\n               href=\"../../../../_images/subset_config1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/subset_config1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>This facility is especially valuable during test, since it allows you to validate newly written\nsolids against values generated during previous runs of a known good pipeline.</p>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    [
      "sections/learn/tutorial/resources",
      "Parametrizing pipelines with resources",
      "N",
      "next"
    ],
    [
      "sections/learn/tutorial/materializations",
      "Materializations",
      "P",
      "previous"
    ]
  ],
  "sourcename": "sections/learn/tutorial/intermediates.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Intermediates</a><ul>\n<li><a class=\"reference internal\" href=\"#intermediate-storage-for-types-that-cannot-be-pickled\">Intermediate storage for types that cannot be pickled</a></li>\n<li><a class=\"reference internal\" href=\"#reexecution\">Reexecution</a></li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/tutorial/intermediates",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
