{
  "parents": [
    { "link": "../../learn/", "title": "Learn" },
    { "link": "../", "title": "Tutorial" }
  ],
  "prev": {
    "link": "../repos/",
    "title": "Organizing pipelines in repositories"
  },
  "next": { "link": "../intro_airflow/", "title": "Deploying to Airflow" },
  "title": "Scheduling pipeline runs",
  "meta": {},
  "body": "<div class=\"section\" id=\"scheduling-pipeline-runs\">\n<span id=\"scheduler\"></span><h1>Scheduling pipeline runs<a class=\"headerlink\" href=\"#scheduling-pipeline-runs\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Dagster includes a simple built-in scheduler that works with Dagit for control and monitoring.\nSuppose that we need to run our simple cereal pipeline every morning before breakfast, at 6:45 AM.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">scheduler.py</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">csv</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dagster_cron</span> <span class=\"kn\">import</span> <span class=\"n\">SystemCronScheduler</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">RepositoryDefinition</span><span class=\"p\">,</span>\n    <span class=\"n\">ScheduleDefinition</span><span class=\"p\">,</span>\n    <span class=\"n\">pipeline</span><span class=\"p\">,</span>\n    <span class=\"n\">schedules</span><span class=\"p\">,</span>\n    <span class=\"n\">solid</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.utils</span> <span class=\"kn\">import</span> <span class=\"n\">file_relative_path</span>\n\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_cereal</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">dataset_path</span> <span class=\"o\">=</span> <span class=\"n\">file_relative_path</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">,</span> <span class=\"s2\">&quot;cereal.csv&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"n\">dataset_path</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">dataset_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">cereals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Found </span><span class=\"si\">{n_cereals}</span><span class=\"s1\"> cereals&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_cereals</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_cereal_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">hello_cereal</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">cereal_repository</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">RepositoryDefinition</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;hello_cereal_repository&#39;</span><span class=\"p\">,</span> <span class=\"n\">pipeline_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">hello_cereal_pipeline</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>As before, we\u2019ve defined some solids, a pipeline, and a repository.</p>\n<div class=\"section\" id=\"defining-schedules\">\n<h2>Defining schedules<a class=\"headerlink\" href=\"#defining-schedules\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Now we\u2019ll write a <a class=\"reference internal\" href=\"../../../api/apidocs/schedules/#dagster.ScheduleDefinition\" title=\"dagster.ScheduleDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ScheduleDefinition</span></code></a> to define the schedule\nwe want. We pass the <code class=\"docutils literal notranslate\"><span class=\"pre\">cron_schedule</span></code> parameter to this class to define when the pipeline should run\nusing the standard cron syntax; the other parameters determine other familiar aspects of how the\npipeline will run, such as its config.</p>\n<p>We wrap the schedule definition in a function decorated with\n<a class=\"reference internal\" href=\"../../../api/apidocs/schedules/#dagster.schedules\" title=\"dagster.schedules\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">&#64;schedules</span></code></a>, which takes a single parameter, the scheduler to use.\nThis is pluggable (and you can write your own), but for now the only implemented scheduler is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_cron.SystemCronScheduler</span></code>.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">scheduler.py</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>38\n39\n40\n41\n42\n43\n44\n45\n46\n47</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@schedules</span><span class=\"p\">(</span><span class=\"n\">SystemCronScheduler</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cereal_schedules</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span>\n        <span class=\"n\">ScheduleDefinition</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;good_morning&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">cron_schedule</span><span class=\"o\">=</span><span class=\"s1\">&#39;45 6 * * *&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">pipeline_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;hello_cereal_pipeline&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;storage&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;filesystem&#39;</span><span class=\"p\">:</span> <span class=\"p\">{}}},</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>To complete the picture, we\u2019ll need to extend the <code class=\"docutils literal notranslate\"><span class=\"pre\">repository.yaml</span></code> structure we\u2019ve met before\nwith a new key, <code class=\"docutils literal notranslate\"><span class=\"pre\">scheduler</span></code>.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">scheduler.yaml</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\">repository</span><span class=\"p\">:</span>\n  <span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">py</span>\n  <span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">cereal_repository</span>\n<span class=\"n\">scheduler</span><span class=\"p\">:</span>\n  <span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">scheduler</span><span class=\"o\">.</span><span class=\"n\">py</span>\n  <span class=\"n\">fn</span><span class=\"p\">:</span> <span class=\"n\">cereal_schedules</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n</div>\n<div class=\"section\" id=\"starting-schedules\">\n<h2>Starting schedules<a class=\"headerlink\" href=\"#starting-schedules\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Whenever we make changes to schedule definitions using the <code class=\"docutils literal notranslate\"><span class=\"pre\">SystemCronScheduler</span></code>, we need to run\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dagster</span> <span class=\"pre\">schedule</span> <span class=\"pre\">up</span></code>. This utility will create, update, or remove schedules in the underlying\nsystem cron file as appropriate to assure it is consistent with the schedule definitions in code.</p>\n<p>To preview the changes, first run:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> dagster schedule up --preview -y scheduler.yaml\n<span class=\"go\">Planned Changes:</span>\n<span class=\"go\">  + good_morning (add)</span>\n</pre></div>\n</div>\n<p>After confirming schedule changes are as expected, run:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> dagster schedule up -y scheduler.yaml\n<span class=\"go\">Changes:</span>\n<span class=\"go\">  + good_morning (add)</span>\n</pre></div>\n</div>\n<p>Now, we can load dagit to view the schedule and monitor runs:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> dagit -y scheduler.yaml\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"cron-filters\">\n<h2>Cron filters<a class=\"headerlink\" href=\"#cron-filters\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you need to define a more specific schedule than cron allows, you can pass a function in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">should_execute</span></code> argument to <a class=\"reference internal\" href=\"../../../api/apidocs/schedules/#dagster.ScheduleDefinition\" title=\"dagster.ScheduleDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ScheduleDefinition</span></code></a>.</p>\n<p>For example, we can define a filter that only returns <cite>True</cite> on weekdays:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">weekday_filter</span><span class=\"p\">():</span>\n    <span class=\"n\">weekno</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">weekday</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Returns true if current day is a weekday</span>\n    <span class=\"k\">return</span> <span class=\"n\">weekno</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span>\n</pre></div>\n</div>\n<p>If we combine this <cite>should_execute</cite> filter with a <cite>cron_schedule</cite> that runs at 6:45am every day,\nthen we\u2019ll have a schedule that runs at 6:45am only on weekdays.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">good_weekday_morning</span> <span class=\"o\">=</span> <span class=\"n\">ScheduleDefinition</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;good_weekday_morning&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">cron_schedule</span><span class=\"o\">=</span><span class=\"s2\">&quot;45 6 * * *&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">pipeline_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;hello_cereal_pipeline&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;storage&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;filesystem&quot;</span><span class=\"p\">:</span> <span class=\"p\">{}}},</span>\n    <span class=\"n\">should_execute</span><span class=\"o\">=</span><span class=\"n\">weekday_filter</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    [
      "sections/learn/tutorial/intro_airflow",
      "Deploying to Airflow",
      "N",
      "next"
    ],
    [
      "sections/learn/tutorial/repos",
      "Organizing pipelines in repositories",
      "P",
      "previous"
    ]
  ],
  "sourcename": "sections/learn/tutorial/scheduler.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Scheduling pipeline runs</a><ul>\n<li><a class=\"reference internal\" href=\"#defining-schedules\">Defining schedules</a></li>\n<li><a class=\"reference internal\" href=\"#starting-schedules\">Starting schedules</a></li>\n<li><a class=\"reference internal\" href=\"#cron-filters\">Cron filters</a></li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/tutorial/scheduler",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
