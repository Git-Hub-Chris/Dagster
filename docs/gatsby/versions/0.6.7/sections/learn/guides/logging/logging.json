{
  "parents": [
    { "link": "../../../learn/", "title": "Learn" },
    { "link": "../../", "title": "Guides" }
  ],
  "prev": {
    "link": "../../testing/expectations/",
    "title": "Data Quality Tests"
  },
  "next": {
    "link": "../../data_science/data_science/",
    "title": "Data Science with Notebooks"
  },
  "title": "Logging Guide",
  "meta": {},
  "body": "<div class=\"section\" id=\"logging-guide\">\n<span id=\"logging-guide\"></span><h1>Logging Guide<a class=\"headerlink\" href=\"#logging-guide\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<ul class=\"simple\">\n<li><p><a class=\"reference external\" href=\"#The-log-guide\">The log guide</a></p>\n<ul>\n<li><p><a class=\"reference external\" href=\"#Logging-from-a-solid\">Logging from a solid</a></p></li>\n<li><p><a class=\"reference external\" href=\"#The-built-in-loggers\">The built-in loggers</a></p></li>\n<li><p><a class=\"reference external\" href=\"#Debugging-with-logs\">Debugging with logs</a></p></li>\n<li><p><a class=\"reference external\" href=\"#Configuring-the-built-in-loggers\">Configuring the built-in loggers</a></p></li>\n<li><p><a class=\"reference external\" href=\"#Modes-and-logging\">Modes and logging</a></p></li>\n<li><p><a class=\"reference external\" href=\"#Implementing-custom-loggers\">Implementing custom loggers</a></p></li>\n</ul>\n</li>\n</ul>\n<div class=\"section\" id=\"logging-from-a-solid\">\n<span id=\"logging-from-a-solid\"></span><h2>Logging from a solid<a class=\"headerlink\" href=\"#logging-from-a-solid\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Dagster includes a rich and extensible logging system. Any solid can emit log messages at any point\nin its computation:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">solid</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_logs</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Hello, world!&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code> object passed to every solid execution includes a built-in log manager, <code class=\"docutils literal notranslate\"><span class=\"pre\">context.log</span></code>,\nwhich exposes the usual <code class=\"docutils literal notranslate\"><span class=\"pre\">debug</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">info</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">warning</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">error</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">critical</span></code> methods you would expect\nanywhere else in Python.</p>\n</div>\n<div class=\"section\" id=\"the-built-in-loggers\">\n<span id=\"the-built-in-loggers\"></span><h2>The built-in loggers<a class=\"headerlink\" href=\"#the-built-in-loggers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When you run Dagster pipelines in Dagit, you\u2019ll have noticed that log messages are visible as\ncolored messages in the console:</p>\n<pre>\n<span style=\"color: green\">2019-05-31 15:11:48</span> - <span style=\"color:blue\">dagster</span> - <span style=\"color:grey\">INFO</span> -\n        orig_message = \"Hello, world!\"\n      log_message_id = \"49854579-e4d1-4289-8453-b3e177b20056\"\n       log_timestamp = \"2019-05-31T22:11:48.376372\"\n              run_id = \"4542c167-1b8c-40c7-b9b6-434b882ba734\"\n            pipeline = \"hello_logs_pipeline\"\n            step_key = \"hello_logs.compute\"\n               solid = \"hello_logs\"\n    solid_definition = \"hello_logs\"\n</pre><p>Logs also stream back to the Dagit frontend in real time:</p>\n<p><img alt=\"Dagit log display\" src=\"../../../../../_images/logging.png\" /></p>\n<p>Dagit exposes a powerful facility for filtering log messages based on free-text search and log\nlevel:</p>\n<p><img alt=\"Dagit log filtering\" src=\"../../../../../_images/logging2.png\" /></p>\n</div>\n<div class=\"section\" id=\"debugging-with-logs\">\n<span id=\"debugging-with-logs\"></span><h2>Debugging with logs<a class=\"headerlink\" href=\"#debugging-with-logs\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>What happens if we introduce an error into our solid logic?</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">solid</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_logs</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s1\">&#39;Somebody set up us the bomb&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Errors in user code are caught by the Dagster machinery to ensure pipelines gracefully halt or\ncontinue to execute, but messages including the original tracebacks get logged both to the console\nand back to Dagit.</p>\n<pre>\n<span style=\"color:green\">2019-05-31 15:26:31</span> - <span style=\"color:blue\">dagster</span> - <span style=\"color:grey\">ERROR</span> -\n<span style=\"color:red\">        orig_message = \"Execution of step \\\"hello_error.compute\\\" failed.\"\n      log_message_id = \"7eb6836b-f91e-4cdc-a82b-906dbf2fd0a5\"\n       log_timestamp = \"2019-09-04T03:15:48.695104\"\n              run_id = \"9f38a6dc-fab7-408d-8692-5126c89b4fc0\"\n            pipeline = \"hello_error_pipeline\"\nexecution_epoch_time = 1567566948.6136389\n            step_key = \"hello_error.compute\"\n               solid = \"hello_error\"\n    solid_definition = \"hello_error\"\n       dagster_event = {\"event_specific_data\": [[\"Exception: Somebody set up us the bomb\\n\", [\"  File \\\"/Users/sashankthupukari/projects/dagster/python_modules/dagster/dagster/core/errors.py\\\", line 104, in user_code_error_boundary\\n    yield\\n\", \"  File \\\"/Users/sashankthupukari/projects/dagster/python_modules/dagster/dagster/core/engine/engine_inprocess.py\\\", line 571, in _user_event_sequence_for_step_compute_fn\\n    for event in gen:\\n\", \"  File \\\"/Users/sashankthupukari/projects/dagster/python_modules/dagster/dagster/core/execution/plan/compute.py\\\", line 75, in _execute_core_compute\\n    for step_output in _yield_compute_results(compute_context, inputs, compute_fn):\\n\", \"  File \\\"/Users/sashankthupukari/projects/dagster/python_modules/dagster/dagster/core/execution/plan/compute.py\\\", line 52, in _yield_compute_results\\n    for event in user_event_sequence:\\n\", \"  File \\\"/Users/sashankthupukari/projects/dagster/python_modules/dagster/dagster/core/definitions/decorators.py\\\", line 340, in compute\\n    result = fn(context, **kwargs)\\n\", \"  File \\\"/Users/sashankthupukari/projects/dagster-playground/hello_dag.py\\\", line 6, in hello_error\\n    raise Exception('Somebody set up us the bomb')\\n\"], \"Exception\"], null], \"event_type_value\": \"STEP_FAILURE\", \"logging_tags\": {\"execution_epoch_time\": 1567566948.6136389, \"pipeline\": \"hello_error_pipeline\", \"solid\": \"hello_error\", \"solid_definition\": \"hello_error\", \"step_key\": \"hello_error.compute\"}, \"message\": \"Execution of step \\\"hello_error.compute\\\" failed.\", \"pipeline_name\": \"hello_error_pipeline\", \"solid_handle\": [\"hello_error\", \"hello_error\", null], \"step_key\": \"hello_error.compute\", \"step_kind_value\": \"COMPUTE\"}\n       pipeline_name = \"hello_error_pipeline\"\n</span>\n</pre><p>Messages at level <code class=\"docutils literal notranslate\"><span class=\"pre\">ERROR</span></code> or above are highlighted both in Dagit and in the console logs, so\nwe can easily pick them out of logs even without filtering.</p>\n<p><img alt=\"Dagit error logs\" src=\"../../../../../_images/logging3.png\" /></p>\n<p>In many cases, especially for local development, this log viewer, coupled with solid reexecution,\nis sufficient to enable a fast debug cycle for data pipelines.</p>\n</div>\n<div class=\"section\" id=\"configuring-the-built-in-loggers\">\n<span id=\"configuring-the-built-in-loggers\"></span><h2>Configuring the built-in loggers<a class=\"headerlink\" href=\"#configuring-the-built-in-loggers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Suppose that we\u2019ve gotten the kinks out of our pipelines developing locally, and now we want to run\nin production\u2014without all of the log spew from <code class=\"docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code> messages that was helpful during development.</p>\n<p>Just like solids, loggers can be configured when you run a pipeline. For example, to filter all\nmessages below <code class=\"docutils literal notranslate\"><span class=\"pre\">ERROR</span></code> out of the colored console logger, add the following snippet to your config\nYAML:</p>\n<div class=\"highlight-yaml notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">loggers</span><span class=\"p\">:</span>\n  <span class=\"nt\">console</span><span class=\"p\">:</span>\n    <span class=\"nt\">config</span><span class=\"p\">:</span>\n      <span class=\"nt\">log_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ERROR</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"modes-and-logging\">\n<span id=\"modes-and-logging\"></span><h2>Modes and logging<a class=\"headerlink\" href=\"#modes-and-logging\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Logging is environment-specific: you don\u2019t want messages generated by data scientists\u2019 local\ndevelopment loops to be aggregated with production messages; on the other hand, you may find that\nin production console logging is irrelevant or even counterproductive.</p>\n<p>Dagster recognizes this by attaching loggers to modes so that you can seamlessly switch from, e.g.,\nCloudwatch logging in production to console logging in development and test, without changing any\nof your code.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">pipeline</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.loggers</span> <span class=\"kn\">import</span> <span class=\"n\">colored_console_logger</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster_aws.loggers</span> <span class=\"kn\">import</span> <span class=\"n\">cloudwatch_logger</span>\n\n<span class=\"nd\">@pipeline</span><span class=\"p\">(</span>\n    <span class=\"n\">mode_defs</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">ModeDefinition</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;local&#39;</span><span class=\"p\">,</span> <span class=\"n\">logger_defs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;console&#39;</span><span class=\"p\">:</span> <span class=\"n\">colored_console_logger</span><span class=\"p\">}),</span>\n        <span class=\"n\">ModeDefinition</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;prod&#39;</span><span class=\"p\">,</span> <span class=\"n\">logger_defs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;cloudwatch&#39;</span><span class=\"p\">:</span> <span class=\"n\">cloudwatch_logger</span><span class=\"p\">})</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_modes</span><span class=\"p\">():</span>\n    <span class=\"n\">hello_logs</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>From Dagit, you can switch your pipeline mode to \u2018prod\u2019 and edit config in order to use the new Cloudwatch logger, e.g.:</p>\n<div class=\"highlight-yaml notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">loggers</span><span class=\"p\">:</span>\n  <span class=\"nt\">cloudwatch</span><span class=\"p\">:</span>\n    <span class=\"nt\">config</span><span class=\"p\">:</span>\n      <span class=\"nt\">log_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ERROR</span>\n      <span class=\"nt\">log_group_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">/my/cool/cloudwatch/log/group</span>\n      <span class=\"nt\">log_stream_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">very_good_log_stream</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"implementing-custom-loggers\">\n<span id=\"implementing-custom-loggers\"></span><h2>Implementing custom loggers<a class=\"headerlink\" href=\"#implementing-custom-loggers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You may find yourself wanting to add or supplement the built-in loggers so that Dagster logs\nare integrated with the rest of your log aggregation and monitoring infrastructure.</p>\n<p>For example, you may be operating in a containerized environment where container stdout is\naggregated by a tool such as Logstash. In this kind of environment, where logs will be aggregated\nand parsed by machine, the multi-line output from the default colored console logger is unhelpful.\nInstead, we\u2019d much prefer to see single-line, structured log messages like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">{</span><span class=\"s2\">&quot;orig_message&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Hello, world!&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;log_message_id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;49854579-e4d1-4289-8453-b3e177b20056&quot;</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>In fact, a logger that prints JSON-formatted single-line messages like this to the console is\nalready included as <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster.loggers.json_console_logger</span></code>. But let\u2019s look at how we might\nimplement a simplified version of this logger.</p>\n<p>Loggers are defined internally using the <code class=\"docutils literal notranslate\"><span class=\"pre\">LoggerDefinition</span></code> class, but, following a common pattern\nin the Dagster codebase, the <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;logger</span></code> decorator exposes a simpler API for the common use case and\nis typically what you\u2019ll use to define your own loggers. The decorated function should take a single\nargument, the <code class=\"docutils literal notranslate\"><span class=\"pre\">init_context</span></code> available during logger initialization, and return a <code class=\"docutils literal notranslate\"><span class=\"pre\">logging.Logger</span></code>.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"nd\">@logger</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;log_level&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;INFO&#39;</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;dagster&#39;</span><span class=\"p\">),</span>\n    <span class=\"p\">},</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;A JSON-formatted console logger&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">json_console_logger</span><span class=\"p\">(</span><span class=\"n\">init_context</span><span class=\"p\">):</span>\n    <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">init_context</span><span class=\"o\">.</span><span class=\"n\">logger_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;log_level&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">init_context</span><span class=\"o\">.</span><span class=\"n\">logger_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">klass</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLoggerClass</span><span class=\"p\">()</span>\n    <span class=\"n\">logger_</span> <span class=\"o\">=</span> <span class=\"n\">klass</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">level</span><span class=\"p\">)</span>\n\n    <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">JsonFormatter</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Formatter</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">record</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n\n    <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">setFormatter</span><span class=\"p\">(</span><span class=\"n\">JsonFormatter</span><span class=\"p\">())</span>\n    <span class=\"n\">logger_</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">logger_</span>\n</pre></div>\n</div>\n<p>As you can see, this decorator takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">config_field</span></code> argument, representing the config that users\ncan pass to the logger, e.g.:</p>\n<div class=\"highlight-yaml notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">loggers</span><span class=\"p\">:</span>\n  <span class=\"nt\">json_console</span><span class=\"p\">:</span>\n    <span class=\"nt\">config</span><span class=\"p\">:</span>\n      <span class=\"nt\">log_level</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">INFO</span>\n</pre></div>\n</div>\n<p>Note that it\u2019s also possible to emit log messages during the initialization of a logger, by calling,\ne.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">init_context.log.info</span></code>.</p>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    [
      "sections/learn/guides/data_science/data_science",
      "Data Science with Notebooks",
      "N",
      "next"
    ],
    [
      "sections/learn/guides/testing/expectations",
      "Data Quality Tests",
      "P",
      "previous"
    ]
  ],
  "sourcename": "sections/learn/guides/logging/logging.md.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Logging Guide</a><ul>\n<li><a class=\"reference internal\" href=\"#logging-from-a-solid\">Logging from a solid</a></li>\n<li><a class=\"reference internal\" href=\"#the-built-in-loggers\">The built-in loggers</a></li>\n<li><a class=\"reference internal\" href=\"#debugging-with-logs\">Debugging with logs</a></li>\n<li><a class=\"reference internal\" href=\"#configuring-the-built-in-loggers\">Configuring the built-in loggers</a></li>\n<li><a class=\"reference internal\" href=\"#modes-and-logging\">Modes and logging</a></li>\n<li><a class=\"reference internal\" href=\"#implementing-custom-loggers\">Implementing custom loggers</a></li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".md",
  "current_page_name": "sections/learn/guides/logging/logging",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
