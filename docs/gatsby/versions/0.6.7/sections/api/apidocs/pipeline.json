{
  "parents": [{ "link": "../../api/", "title": "API Docs" }],
  "prev": { "link": "../solids/", "title": "Solids" },
  "next": { "link": "../execution/", "title": "Execution" },
  "title": "Pipelines",
  "meta": {},
  "body": "<div class=\"section\" id=\"pipelines\">\n<h1>Pipelines<a class=\"headerlink\" href=\"#pipelines\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"pipeline-definitions\">\n<h2>Pipeline definitions<a class=\"headerlink\" href=\"#pipeline-definitions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"function\">\n<dt id=\"dagster.pipeline\">\n<code class=\"sig-prename descclassname\">&#64;</code><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">pipeline</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">mode_defs=None</em>, <em class=\"sig-param\">preset_defs=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/decorators/#pipeline\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.pipeline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a pipeline with the specified parameters from the decorated composition function.</p>\n<p>Using this decorator allows you to build up the dependency graph of the pipeline by writing a\nfunction that invokes solids and passes the output to other solids.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 The name of the pipeline. Must be unique within any\n<a class=\"reference internal\" href=\"#dagster.RepositoryDefinition\" title=\"dagster.RepositoryDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RepositoryDefinition</span></code></a> containing the pipeline.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of the pipeline.</p></li>\n<li><p><strong>mode_defs</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.ModeDefinition\" title=\"dagster.ModeDefinition\"><em>ModeDefinition</em></a><em>]</em><em>]</em>) \u2013 The set of modes in which this pipeline can\noperate. Modes are used to attach resources, custom loggers, custom system storage\noptions, and custom executors to a pipeline. Modes can be used, e.g., to vary\navailable resource and logging implementations between local test and production runs.</p></li>\n<li><p><strong>preset_defs</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.PresetDefinition\" title=\"dagster.PresetDefinition\"><em>PresetDefinition</em></a><em>]</em><em>]</em>) \u2013 A set of preset collections of configuration\noptions that may be used to execute a pipeline. A preset consists of an environment\ndict, an optional subset of solids to execute, and a mode selection. Presets can be used\nto ship common combinations of options to pipeline end users in Python code, and can\nbe selected by tools like Dagit.</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@lambda_solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">emit_one</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n<span class=\"nd\">@lambda_solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_one</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n<span class=\"nd\">@lambda_solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">mult_two</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">add_one</span><span class=\"p\">(</span><span class=\"n\">mult_two</span><span class=\"p\">(</span><span class=\"n\">emit_one</span><span class=\"p\">()))</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.PipelineDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">PipelineDefinition</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">solid_defs</em>, <em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">dependencies=None</em>, <em class=\"sig-param\">mode_defs=None</em>, <em class=\"sig-param\">preset_defs=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/pipeline/#PipelineDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.PipelineDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defines a Dagster pipeline.</p>\n<p>A pipeline is made up of</p>\n<ul class=\"simple\">\n<li><p>Solids, each of which is a single functional unit of data computation.</p></li>\n<li><p>Dependencies, which determine how the values produced by solids as their outputs flow from\none solid to another. This tells Dagster how to arrange solids, and potentially multiple\naliased instances of solids, into a directed, acyclic graph (DAG) of compute.</p></li>\n<li><p>Modes, which can be used to attach resources, custom loggers, custom system storage\noptions, and custom executors to a pipeline, and to switch between them.</p></li>\n<li><p>Presets, which can be used to ship common combinations of pipeline config options in Python\ncode, and to switch between them.</p></li>\n</ul>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>solid_defs</strong> (<em>List</em><em>[</em><a class=\"reference internal\" href=\"../solids/#dagster.SolidDefinition\" title=\"dagster.SolidDefinition\"><em>SolidDefinition</em></a><em>]</em>) \u2013 The set of solids used in this pipeline.</p></li>\n<li><p><strong>name</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 The name of the pipeline. Must be unique within any\n<a class=\"reference internal\" href=\"#dagster.RepositoryDefinition\" title=\"dagster.RepositoryDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RepositoryDefinition</span></code></a> containing the pipeline.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of the pipeline.</p></li>\n<li><p><strong>dependencies</strong> (<em>Optional</em><em>[</em><em>Dict</em><em>[</em><em>Union</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>, </em><a class=\"reference internal\" href=\"#dagster.SolidInvocation\" title=\"dagster.SolidInvocation\"><em>SolidInvocation</em></a><em>]</em><em>, </em><em>Dict</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>, </em><a class=\"reference internal\" href=\"#dagster.DependencyDefinition\" title=\"dagster.DependencyDefinition\"><em>DependencyDefinition</em></a><em>]</em><em>]</em><em>]</em>) \u2013 A structure that declares the dependencies of each solid\u2019s inputs on the outputs of\nother solids in the pipeline. Keys of the top level dict are either the string names of\nsolids in the pipeline or, in the case of aliased solids,\n<a class=\"reference internal\" href=\"#dagster.SolidInvocation\" title=\"dagster.SolidInvocation\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SolidInvocations</span></code></a>. Values of the top level dict are\nthemselves dicts, which map input names belonging to the solid or aliased solid to\n<a class=\"reference internal\" href=\"#dagster.DependencyDefinition\" title=\"dagster.DependencyDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DependencyDefinitions</span></code></a>.</p></li>\n<li><p><strong>mode_defs</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.ModeDefinition\" title=\"dagster.ModeDefinition\"><em>ModeDefinition</em></a><em>]</em><em>]</em>) \u2013 The set of modes in which this pipeline can\noperate. Modes are used to attach resources, custom loggers, custom system storage\noptions, and custom executors to a pipeline. Modes can be used, e.g., to vary available\nresource and logging implementations between local test and production runs.</p></li>\n<li><p><strong>preset_defs</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.PresetDefinition\" title=\"dagster.PresetDefinition\"><em>PresetDefinition</em></a><em>]</em><em>]</em>) \u2013 A set of preset collections of configuration\noptions that may be used to execute a pipeline. A preset consists of an environment\ndict, an optional subset of solids to execute, and a mode selection. Presets can be used\nto ship common combinations of options to pipeline end users in Python code, and can\nbe selected by tools like Dagit.</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@lambda_solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">return_one</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">)])</span>\n<span class=\"k\">def</span> <span class=\"nf\">apply_op</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">num</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">num</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@resource</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Int</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">adder_resource</span><span class=\"p\">(</span><span class=\"n\">init_context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">init_context</span><span class=\"o\">.</span><span class=\"n\">resource_config</span>\n\n\n<span class=\"n\">add_mode</span> <span class=\"o\">=</span> <span class=\"n\">ModeDefinition</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;add_mode&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">resource_defs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;op&#39;</span><span class=\"p\">:</span> <span class=\"n\">adder_resource</span><span class=\"p\">},</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;Mode that adds things&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">add_three_preset</span> <span class=\"o\">=</span> <span class=\"n\">PresetDefinition</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;add_three_preset&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;resources&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;op&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;config&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">}}},</span>\n    <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;add_mode&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"n\">pipeline_def</span> <span class=\"o\">=</span> <span class=\"n\">PipelineDefinition</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;basic&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">solid_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">return_one</span><span class=\"p\">,</span> <span class=\"n\">apply_op</span><span class=\"p\">],</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;apply_op&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;num&#39;</span><span class=\"p\">:</span> <span class=\"n\">DependencyDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;return_one&#39;</span><span class=\"p\">)}},</span>\n    <span class=\"n\">mode_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">add_mode</span><span class=\"p\">],</span>\n    <span class=\"n\">preset_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">add_three_preset</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"dependencies-and-aliases\">\n<h2>Dependencies and aliases<a class=\"headerlink\" href=\"#dependencies-and-aliases\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"dagster.DependencyDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">DependencyDefinition</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/dependency/#DependencyDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.DependencyDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Represents an edge in the DAG of solid instances forming a pipeline.</p>\n<p>This object is used at the leaves of a dictionary structure that represents the complete\ndependency structure of a pipeline whose keys represent the dependent solid and dependent\ninput, so this object only contains information about the dependee.</p>\n<p>Concretely, if the input named \u2018input\u2019 of solid_b depends on the output named \u2018result\u2019 of\nsolid_a, this structure will look as follows:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">dependency_structure</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;solid_b&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;input&#39;</span><span class=\"p\">:</span> <span class=\"n\">DependencyDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;solid_a&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;result&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>In general, users should prefer not to construct this class directly or use the\n<a class=\"reference internal\" href=\"#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PipelineDefinition</span></code></a> API that requires instances of this class. Instead, use the\n<a class=\"reference internal\" href=\"#dagster.pipeline\" title=\"dagster.pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;pipeline</span></code></a> API:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">solid_b</span><span class=\"p\">(</span><span class=\"n\">solid_a</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>solid</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of the solid that is depended on, that is, from which the value\npassed between the two solids originates.</p></li>\n<li><p><strong>output</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 The name of the output that is depended on. (default: \u201cresult\u201d)</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Human-readable description of this dependency.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.SolidInvocation\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">SolidInvocation</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/dependency/#SolidInvocation\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.SolidInvocation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Identifies an instance of a solid in a pipeline dependency structure.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Name of the solid of which this is an instance.</p></li>\n<li><p><strong>alias</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Name specific to this instance of the solid. Necessary when there are\nmultiple instances of the same solid.</p></li>\n<li><p><strong>resource_mapper_fn</strong> (<em>Optional</em><em>[</em><em>Callable</em><em>]</em>) \u2013 Provide this function to remap resources available\nin this pipeline to the resource keys required by the solid definition, e.g., when\nusing a library solid that expects a resource to have a different name than the name of\nthe compatible resource available in this pipeline. Should take a dictionary whose\nkeys are the resource keys provided by the pipeline and return a dictionary whose keys\nare the resource keys required by the solid definition, interchanging the values.</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">PipelineDefinition</span><span class=\"p\">(</span>\n    <span class=\"n\">solid_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">solid_1</span><span class=\"p\">,</span> <span class=\"n\">solid_2</span><span class=\"p\">]</span>\n    <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"n\">SolidInvocation</span><span class=\"p\">(</span><span class=\"s1\">&#39;solid_1&#39;</span><span class=\"p\">,</span> <span class=\"n\">alias</span><span class=\"o\">=</span><span class=\"s1\">&#39;other_name&#39;</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;input_name&#39;</span> <span class=\"p\">:</span> <span class=\"n\">DependencyDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;solid_1&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">},</span>\n        <span class=\"s1\">&#39;solid_2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;input_name&#39;</span><span class=\"p\">:</span> <span class=\"n\">DependencyDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;other_name&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In general, users should prefer not to construct this class directly or use the\n<a class=\"reference internal\" href=\"#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PipelineDefinition</span></code></a> API that requires instances of this class. Instead, use the\n<a class=\"reference internal\" href=\"#dagster.pipeline\" title=\"dagster.pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;pipeline</span></code></a> API:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">other_name</span> <span class=\"o\">=</span> <span class=\"n\">solid_1</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;other_name&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">solid_2</span><span class=\"p\">(</span><span class=\"n\">other_name</span><span class=\"p\">(</span><span class=\"n\">solid_1</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"modes\">\n<h2>Modes<a class=\"headerlink\" href=\"#modes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"dagster.ModeDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">ModeDefinition</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">resource_defs=None</em>, <em class=\"sig-param\">logger_defs=None</em>, <em class=\"sig-param\">system_storage_defs=None</em>, <em class=\"sig-param\">executor_defs=None</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/mode/#ModeDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.ModeDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Define a mode in which a pipeline can operate.</p>\n<p>A mode provides pipelines with a set of resource implementations, loggers, system storages,\nand executors.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 The name of the mode. Must be unique within the\n<a class=\"reference internal\" href=\"#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PipelineDefinition</span></code></a> to which the mode is attached. (default: \u201cdefault\u201d).</p></li>\n<li><p><strong>resource_defs</strong> (<em>Optional</em><em>[</em><em>Dict</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>, </em><a class=\"reference internal\" href=\"#dagster.ResourceDefinition\" title=\"dagster.ResourceDefinition\"><em>ResourceDefinition</em></a><em>]</em><em>]</em>) \u2013 A dictionary of string resource\nkeys to their implementations. Individual solids may require resources to be present by\nthese keys.</p></li>\n<li><p><strong>logger_defs</strong> (<em>Optional</em><em>[</em><em>Dict</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>, </em><a class=\"reference internal\" href=\"#dagster.LoggerDefinition\" title=\"dagster.LoggerDefinition\"><em>LoggerDefinition</em></a><em>]</em><em>]</em>) \u2013 A ditionary of string logger\nidentifiers to their implementations.</p></li>\n<li><p><strong>system_storage_defs</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"../internals/#dagster.SystemStorageDefinition\" title=\"dagster.SystemStorageDefinition\"><em>SystemStorageDefinition</em></a><em>]</em><em>]</em>) \u2013 The set of system storage\noptions available when executing in this mode. By default, this will be the \u2018in_memory\u2019\nand \u2018filesystem\u2019 system storages.</p></li>\n<li><p><strong>executor_defs</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"../internals/#dagster.ExecutorDefinition\" title=\"dagster.ExecutorDefinition\"><em>ExecutorDefinition</em></a><em>]</em><em>]</em>) \u2013 The set of executors available when\nexecuting in this mode. By default, this will be the \u2018in_process\u2019 and \u2018multiprocess\u2019\nexecutors.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of the mode.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"resources\">\n<h2>Resources<a class=\"headerlink\" href=\"#resources\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"function\">\n<dt id=\"dagster.resource\">\n<code class=\"sig-prename descclassname\">&#64;</code><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">resource</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">config=None</em>, <em class=\"sig-param\">config_field=None</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/resource/#resource\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.resource\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Define a resource.</p>\n<p>The decorated function should accept an <a class=\"reference internal\" href=\"#dagster.InitResourceContext\" title=\"dagster.InitResourceContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InitResourceContext</span></code></a> and return an instance of\nthe resource. This function will become the <code class=\"docutils literal notranslate\"><span class=\"pre\">resource_fn</span></code> of an underlying\n<a class=\"reference internal\" href=\"#dagster.ResourceDefinition\" title=\"dagster.ResourceDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResourceDefinition</span></code></a>.</p>\n<p>If the decorated function yields once rather than returning (in the manner of functions\ndecorable with <a class=\"reference external\" href=\"https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager\" title=\"(in Python v3.8)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;contextlib.contextmanager</span></code></a>) then\nthe body of the function after the yield will be run after execution resolves, allowing users\nto write their own teardown/cleanup logic.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>config</strong> (<em>Optional</em><em>[</em><em>Dict</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>, </em><em>Field</em><em>]</em><em>]</em>) \u2013 The schema for the configuration data made available\non the <code class=\"docutils literal notranslate\"><span class=\"pre\">init_context</span></code> passed to the decorated function (as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">init_context.resource_config</span></code>).</p></li>\n<li><p><strong>config_field</strong> (<em>Optional</em><em>[</em><em>Field</em><em>]</em>) \u2013 Used in the rare case of a top level config type other than\na dictionary. Only one of <code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">config_field</span></code> may be set.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of the resource.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.ResourceDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">ResourceDefinition</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">resource_fn</em>, <em class=\"sig-param\">config_field=None</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/resource/#ResourceDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.ResourceDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Core class for defining resources.</p>\n<p>Resources are scoped ways to make external resources (like database connections) available to\nsolids during pipeline execution and to clean up after execution resolves.</p>\n<p>If resource_fn yields once rather than returning (in the manner of functions decorable with\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager\" title=\"(in Python v3.8)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;contextlib.contextmanager</span></code></a>) then the body of the\nfunction after the yield will be run after execution resolves, allowing users to write their\nown teardown/cleanup logic.</p>\n<p>Depending on your executor, resources may be instantiated and cleaned up more than once in a\npipeline execution.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>resource_fn</strong> (<em>Callable</em><em>[</em><em>[</em><a class=\"reference internal\" href=\"#dagster.InitResourceContext\" title=\"dagster.InitResourceContext\"><em>InitResourceContext</em></a><em>]</em><em>, </em><em>Any</em><em>]</em>) \u2013 User-provided function to instantiate\nthe resource, which will be made available to solid executions keyed on the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">context.resources</span></code> object.</p></li>\n<li><p><strong>config_field</strong> (<em>Optional</em><em>[</em><em>Field</em><em>]</em>) \u2013 The type for the configuration data for this resource, which\nwill be available on the <code class=\"docutils literal notranslate\"><span class=\"pre\">init_context</span></code> passed to <cite>resource_fn`</cite> as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">init_context.resource_config</span></code>.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of the resource.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.InitResourceContext\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">InitResourceContext</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/execution/context/init/#InitResourceContext\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.InitResourceContext\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Resource-specific initialization context.</p>\n<dl class=\"attribute\">\n<dt id=\"dagster.InitResourceContext.resource_config\">\n<code class=\"sig-name descname\">resource_config</code><a class=\"headerlink\" href=\"#dagster.InitResourceContext.resource_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The configuration data provided by the environment config. The schema\nfor this data is defined by the <code class=\"docutils literal notranslate\"><span class=\"pre\">config_field</span></code> argument to\n<a class=\"reference internal\" href=\"#dagster.ResourceDefinition\" title=\"dagster.ResourceDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResourceDefinition</span></code></a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p>Any</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitResourceContext.pipeline_def\">\n<code class=\"sig-name descname\">pipeline_def</code><a class=\"headerlink\" href=\"#dagster.InitResourceContext.pipeline_def\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The definition of the pipeline currently being executed.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\">PipelineDefinition</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitResourceContext.resource_def\">\n<code class=\"sig-name descname\">resource_def</code><a class=\"headerlink\" href=\"#dagster.InitResourceContext.resource_def\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The definition of the resource currently being\nconstructed.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"#dagster.ResourceDefinition\" title=\"dagster.ResourceDefinition\">ResourceDefinition</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitResourceContext.run_id\">\n<code class=\"sig-name descname\">run_id</code><a class=\"headerlink\" href=\"#dagster.InitResourceContext.run_id\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The id for this run of the pipeline.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\">str</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitResourceContext.log_manager\">\n<code class=\"sig-name descname\">log_manager</code><a class=\"headerlink\" href=\"#dagster.InitResourceContext.log_manager\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The log manager for this run of the pipeline</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"../internals/#dagster.DagsterLogManager\" title=\"dagster.DagsterLogManager\">DagsterLogManager</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"logging\">\n<h2>Logging<a class=\"headerlink\" href=\"#logging\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"function\">\n<dt id=\"dagster.logger\">\n<code class=\"sig-prename descclassname\">&#64;</code><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">logger</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">config=None</em>, <em class=\"sig-param\">config_field=None</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/logger/#logger\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.logger\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Define a logger.</p>\n<p>The decorated function should accept an <a class=\"reference internal\" href=\"#dagster.InitLoggerContext\" title=\"dagster.InitLoggerContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InitLoggerContext</span></code></a> and return an instance of\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/logging.html#logging.Logger\" title=\"(in Python v3.8)\"><code class=\"docutils literal notranslate\"><span class=\"pre\">logging.Logger</span></code></a>. This function will become the <code class=\"docutils literal notranslate\"><span class=\"pre\">logger_fn</span></code> of an underlying\n<a class=\"reference internal\" href=\"#dagster.LoggerDefinition\" title=\"dagster.LoggerDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LoggerDefinition</span></code></a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>config</strong> (<em>Optional</em><em>[</em><em>Dict</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>, </em><em>Field</em><em>]</em><em>]</em>) \u2013 The schema for the configuration data made available on\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">init_context</span></code> passed to the decorated function (as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">init_context.logger_config</span></code>).</p></li>\n<li><p><strong>config_field</strong> (<em>Optional</em><em>[</em><em>Field</em><em>]</em>) \u2013 <p>Used in the rare case of a top level config type other than\na dictionary.</p>\n<p>Only one of config or config_field can be provided.</p>\n</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of the logger.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.LoggerDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">LoggerDefinition</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">logger_fn</em>, <em class=\"sig-param\">config_field=None</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/logger/#LoggerDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.LoggerDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Core class for defining loggers.</p>\n<p>Loggers are pipeline-scoped logging handlers, which will be automatically invoked whenever\nsolids in a pipeline log messages.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>logger_fn</strong> (<em>Callable</em><em>[</em><em>[</em><a class=\"reference internal\" href=\"#dagster.InitLoggerContext\" title=\"dagster.InitLoggerContext\"><em>InitLoggerContext</em></a><em>]</em><em>, </em><a class=\"reference external\" href=\"https://docs.python.org/3/library/logging.html#logging.Logger\" title=\"(in Python v3.8)\"><em>logging.Logger</em></a><em>]</em>) \u2013 User-provided function to\ninstantiate the logger. This logger will be automatically invoked whenever the methods\non <code class=\"docutils literal notranslate\"><span class=\"pre\">context.log</span></code> are called from within solid compute logic.</p></li>\n<li><p><strong>config_field</strong> (<em>Optional</em><em>[</em><em>Field</em><em>]</em>) \u2013 The type for the configuration data for this logger, if\nany. The config data will be available on the <code class=\"docutils literal notranslate\"><span class=\"pre\">init_context</span></code> passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">logger_fn</span></code>\nas <code class=\"docutils literal notranslate\"><span class=\"pre\">init_context.logger_config</span></code>.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A human-readable description of this logger.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.InitLoggerContext\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">InitLoggerContext</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/execution/context/logger/#InitLoggerContext\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.InitLoggerContext\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Logger-specific initialization context.</p>\n<p>An instance of this class is made available as the first argument to the <code class=\"docutils literal notranslate\"><span class=\"pre\">logger_fn</span></code> decorated\nby <a class=\"reference internal\" href=\"#dagster.logger\" title=\"dagster.logger\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;logger</span></code></a> or set on a <a class=\"reference internal\" href=\"#dagster.LoggerDefinition\" title=\"dagster.LoggerDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LoggerDefinition</span></code></a>.</p>\n<p>Users should not instantiate this class.</p>\n<dl class=\"attribute\">\n<dt id=\"dagster.InitLoggerContext.logger_config\">\n<code class=\"sig-name descname\">logger_config</code><a class=\"headerlink\" href=\"#dagster.InitLoggerContext.logger_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The configuration data provided by the environment config. The\nschema for this data is defined by <code class=\"docutils literal notranslate\"><span class=\"pre\">config_field</span></code> on the <a class=\"reference internal\" href=\"#dagster.LoggerDefinition\" title=\"dagster.LoggerDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LoggerDefinition</span></code></a></p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p>Any</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitLoggerContext.pipeline_def\">\n<code class=\"sig-name descname\">pipeline_def</code><a class=\"headerlink\" href=\"#dagster.InitLoggerContext.pipeline_def\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The pipeline definition currently being executed.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\">PipelineDefinition</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitLoggerContext.logger_def\">\n<code class=\"sig-name descname\">logger_def</code><a class=\"headerlink\" href=\"#dagster.InitLoggerContext.logger_def\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The logger definition for the logger being constructed.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"#dagster.LoggerDefinition\" title=\"dagster.LoggerDefinition\">LoggerDefinition</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitLoggerContext.run_id\">\n<code class=\"sig-name descname\">run_id</code><a class=\"headerlink\" href=\"#dagster.InitLoggerContext.run_id\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The ID for this run of the pipeline.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\">str</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"presets\">\n<h2>Presets<a class=\"headerlink\" href=\"#presets\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"dagster.PresetDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">PresetDefinition</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/preset/#PresetDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.PresetDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defines a preset configuration in which a pipeline can execute.</p>\n<p>Presets can be used in Dagit to load predefined configurations into the tool.</p>\n<p>Presets may also be used from the Python API (in a script, or in test) as follows:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">execute_pipeline_with_preset</span><span class=\"p\">(</span><span class=\"n\">pipeline_def</span><span class=\"p\">,</span> <span class=\"s1\">&#39;example_preset&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Presets may also be used with the command line tools:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ dagster pipeline execute example_pipeline --preset example_preset\n$ dagster pipeline execute example_pipeline -p example_preset\n</pre></div>\n</div>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of this preset. Must be unique in the presets defined on a given\npipeline.</p></li>\n<li><p><strong>environment_dict</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.8)\"><em>dict</em></a><em>]</em>) \u2013 A dict representing the config to set with the preset.\nThis is equivalent to the <code class=\"docutils literal notranslate\"><span class=\"pre\">environment_dict</span></code> argument to <a class=\"reference internal\" href=\"../execution/#dagster.execute_pipeline\" title=\"dagster.execute_pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">execute_pipeline()</span></code></a>.</p></li>\n<li><p><strong>solid_subset</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em><em>]</em>) \u2013 The list of names of solid invocations (i.e., of\nunaliased solids or of their aliases if aliased) to execute with this preset.</p></li>\n<li><p><strong>mode</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 The mode to apply when executing this preset. (default: \u2018default\u2019)</p></li>\n</ul>\n</dd>\n</dl>\n<dl class=\"method\">\n<dt id=\"dagster.PresetDefinition.from_files\">\n<em class=\"property\">static </em><code class=\"sig-name descname\">from_files</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">environment_files=None</em>, <em class=\"sig-param\">solid_subset=None</em>, <em class=\"sig-param\">mode=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/preset/#PresetDefinition.from_files\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.PresetDefinition.from_files\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Static constructor for presets from YAML files.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of this preset. Must be unique in the presets defined on a given\npipeline.</p></li>\n<li><p><strong>environment_files</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em><em>]</em>) \u2013 List of paths or glob patterns for yaml files\nto load and parse as the environment config for this preset.</p></li>\n<li><p><strong>solid_subset</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em><em>]</em>) \u2013 The list of names of solid invocations (i.e., of\nunaliased solids or of their aliases if aliased) to execute with this preset.</p></li>\n<li><p><strong>mode</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 The mode to apply when executing this preset. (default:\n\u2018default\u2019)</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.PresetDefinition.get_environment_yaml\">\n<code class=\"sig-name descname\">get_environment_yaml</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/preset/#PresetDefinition.get_environment_yaml\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.PresetDefinition.get_environment_yaml\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Get the environment dict set on a preset as YAML.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>The environment dict as YAML.</p>\n</dd>\n<dt class=\"field-even\">Return type</dt>\n<dd class=\"field-even\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\">str</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"repositories\">\n<h2>Repositories<a class=\"headerlink\" href=\"#repositories\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"dagster.RepositoryDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">RepositoryDefinition</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">pipeline_dict=None</em>, <em class=\"sig-param\">pipeline_defs=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/repository/#RepositoryDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.RepositoryDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Define a repository that contains a collection of pipelines.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The name of the pipeline.</p></li>\n<li><p><strong>pipeline_dict</strong> (<em>Optional</em><em>[</em><em>Dict</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>, </em><em>Callable</em><em>[</em><em>[</em><em>]</em><em>, </em><a class=\"reference internal\" href=\"#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\"><em>PipelineDefinition</em></a><em>]</em><em>]</em><em>]</em>) \u2013 <p>An dictionary of pipeline names to callables that take no parameters and return a\n<a class=\"reference internal\" href=\"#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PipelineDefinition</span></code></a>.</p>\n<p>This allows pipeline definitions to be created lazily when accessed by name, which can\nbe helpful for performance when there are many pipelines in a repository, or when\nconstructing the pipeline definitions is costly.</p>\n<p>The name of the constructed pipeline must match its key in this dictionary, or\na <a class=\"reference internal\" href=\"../errors/#dagster.DagsterInvariantViolationError\" title=\"dagster.DagsterInvariantViolationError\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DagsterInvariantViolationError</span></code></a> will be thrown at retrieval time.</p>\n</p></li>\n<li><p><strong>pipeline_defs</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><a class=\"reference internal\" href=\"#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\"><em>PipelineDefinition</em></a><em>]</em><em>]</em>) \u2013 A list of instantiated pipeline\ndefinitions. You may provided both a <code class=\"docutils literal notranslate\"><span class=\"pre\">pipeline_dict</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pipeline_defs</span></code>, but the\nnames of the instantiated definitions may not collide with the keys of the lazily\nevaluated dict.</p></li>\n</ul>\n</dd>\n</dl>\n<dl class=\"method\">\n<dt id=\"dagster.RepositoryDefinition.get_all_pipelines\">\n<code class=\"sig-name descname\">get_all_pipelines</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/repository/#RepositoryDefinition.get_all_pipelines\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.RepositoryDefinition.get_all_pipelines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return all pipelines in the repository as a list.</p>\n<p>Note that this will construct any pipeline in the lazily evaluated <code class=\"docutils literal notranslate\"><span class=\"pre\">pipeline_dict</span></code> that\nhas not yet been constructed.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Returns</dt>\n<dd class=\"field-odd\"><p>All pipelines in the repository.</p>\n</dd>\n<dt class=\"field-even\">Return type</dt>\n<dd class=\"field-even\"><p>List[<a class=\"reference internal\" href=\"#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\">PipelineDefinition</a>]</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.RepositoryDefinition.get_pipeline\">\n<code class=\"sig-name descname\">get_pipeline</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/repository/#RepositoryDefinition.get_pipeline\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.RepositoryDefinition.get_pipeline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Get a pipeline by name.</p>\n<p>If this pipeline is present in the lazily evaluated <code class=\"docutils literal notranslate\"><span class=\"pre\">pipeline_dict</span></code> passed to the\nconstructor, but has not yet been constructed, only this pipeline is constructed, and will\nbe cached for future calls.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Name of the pipeline to retrieve.</p>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>The pipeline definition corresponding to the given name.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\">PipelineDefinition</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    ["sections/api/apidocs/execution", "Execution", "N", "next"],
    ["sections/api/apidocs/solids", "Solids", "P", "previous"]
  ],
  "sourcename": "sections/api/apidocs/pipeline.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Pipelines</a><ul>\n<li><a class=\"reference internal\" href=\"#pipeline-definitions\">Pipeline definitions</a></li>\n<li><a class=\"reference internal\" href=\"#dependencies-and-aliases\">Dependencies and aliases</a></li>\n<li><a class=\"reference internal\" href=\"#modes\">Modes</a></li>\n<li><a class=\"reference internal\" href=\"#resources\">Resources</a></li>\n<li><a class=\"reference internal\" href=\"#logging\">Logging</a></li>\n<li><a class=\"reference internal\" href=\"#presets\">Presets</a></li>\n<li><a class=\"reference internal\" href=\"#repositories\">Repositories</a></li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/api/apidocs/pipeline",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
