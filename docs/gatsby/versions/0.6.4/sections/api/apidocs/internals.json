{
  "parents": [{ "link": "../../api/", "title": "API Docs" }],
  "prev": { "link": "../dagstermill/", "title": "Dagstermill" },
  "next": { "link": "../dagster_airflow/", "title": "dagster_airflow" },
  "title": "Internals",
  "meta": {},
  "body": "<div class=\"section\" id=\"internals\">\n<h1>Internals<a class=\"headerlink\" href=\"#internals\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"logging\">\n<h2>Logging<a class=\"headerlink\" href=\"#logging\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"dagster.DagsterLogManager\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">DagsterLogManager</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/log_manager/#DagsterLogManager\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.DagsterLogManager\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Centralized dispatch for logging from user code.</p>\n<p>Handles the construction of uniform structured log messages and passes them through to the\nunderlying loggers.</p>\n<p>An instance of the log manager is made available to solids as <code class=\"docutils literal notranslate\"><span class=\"pre\">context.log</span></code>. Users should not\ninitialize instances of DagsterLogManager directly.</p>\n<p>The log manager supports standard convenience methods like Python <a class=\"reference external\" href=\"https://docs.python.org/3/library/logging.html#module-logging\" title=\"(in Python v3.8)\"><code class=\"docutils literal notranslate\"><span class=\"pre\">logging</span></code></a>\n(i.e., <code class=\"docutils literal notranslate\"><span class=\"pre\">DagsterLogManager.{debug,</span> <span class=\"pre\">info,</span> <span class=\"pre\">warning,</span> <span class=\"pre\">error,</span> <span class=\"pre\">critical}</span></code>, expects\ncorresponding methods to be defined on the loggers passed to its constructor, and will delegate\nto those methods on each logger.</p>\n<p>The underlying integer API can also be called directly using, e.g.,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DagsterLogManager.log(5,</span> <span class=\"pre\">msg)</span></code>, and the log manager will delegate to the <code class=\"docutils literal notranslate\"><span class=\"pre\">log</span></code> method\ndefined on each of the loggers it manages.</p>\n<p>User-defined custom log levels are not supported, and calls to, e.g.,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DagsterLogManager.trace</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">DagsterLogManager.notice</span></code> will result in hard exceptions at\nruntime.</p>\n<dl class=\"method\">\n<dt id=\"dagster.DagsterLogManager.critical\">\n<code class=\"sig-name descname\">critical</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">msg</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/log_manager/#DagsterLogManager.critical\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.DagsterLogManager.critical\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Log at the CRITICAL level.</p>\n<p>See <a class=\"reference internal\" href=\"#dagster.DagsterLogManager.debug\" title=\"dagster.DagsterLogManager.debug\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">debug()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.DagsterLogManager.debug\">\n<code class=\"sig-name descname\">debug</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">msg</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/log_manager/#DagsterLogManager.debug\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.DagsterLogManager.debug\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Log at the DEBUG level.</p>\n<p>The message will be automatically adorned with contextual information about the name\nof the pipeline, the name of the solid, etc., so it is generally unnecessary to include\nthis type of information in the log message.</p>\n<p>You can optionally additional key-value pairs to an individual log message using the kwargs\nto this method.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>msg</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The message to log.</p></li>\n<li><p><strong>**kwargs</strong> (<em>Optional</em><em>[</em><em>Any</em><em>]</em>) \u2013 Any additional key-value pairs for only this log message.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.DagsterLogManager.error\">\n<code class=\"sig-name descname\">error</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">msg</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/log_manager/#DagsterLogManager.error\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.DagsterLogManager.error\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Log at the ERROR level.</p>\n<p>See <a class=\"reference internal\" href=\"#dagster.DagsterLogManager.debug\" title=\"dagster.DagsterLogManager.debug\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">debug()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.DagsterLogManager.fatal\">\n<code class=\"sig-name descname\">fatal</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">msg</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dagster.DagsterLogManager.fatal\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Log at the CRITICAL level.</p>\n<p>See <a class=\"reference internal\" href=\"#dagster.DagsterLogManager.debug\" title=\"dagster.DagsterLogManager.debug\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">debug()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.DagsterLogManager.info\">\n<code class=\"sig-name descname\">info</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">msg</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/log_manager/#DagsterLogManager.info\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.DagsterLogManager.info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Log at the INFO level.</p>\n<p>See <a class=\"reference internal\" href=\"#dagster.DagsterLogManager.debug\" title=\"dagster.DagsterLogManager.debug\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">debug()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.DagsterLogManager.warn\">\n<code class=\"sig-name descname\">warn</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">msg</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"headerlink\" href=\"#dagster.DagsterLogManager.warn\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Log at the WARNING level.</p>\n<p>See <a class=\"reference internal\" href=\"#dagster.DagsterLogManager.debug\" title=\"dagster.DagsterLogManager.debug\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">debug()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"method\">\n<dt id=\"dagster.DagsterLogManager.warning\">\n<code class=\"sig-name descname\">warning</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">msg</em>, <em class=\"sig-param\">**kwargs</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/log_manager/#DagsterLogManager.warning\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.DagsterLogManager.warning\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Log at the WARNING level.</p>\n<p>See <a class=\"reference internal\" href=\"#dagster.DagsterLogManager.debug\" title=\"dagster.DagsterLogManager.debug\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">debug()</span></code></a>.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"executors\">\n<h2>Executors<a class=\"headerlink\" href=\"#executors\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"function\">\n<dt id=\"dagster.executor\">\n<code class=\"sig-prename descclassname\">&#64;</code><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">executor</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">config=None</em>, <em class=\"sig-param\">required_resource_keys=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/executor/#executor\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.executor\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Define an executor.</p>\n<p>The decorated function should accept an <a class=\"reference internal\" href=\"#dagster.InitExecutorContext\" title=\"dagster.InitExecutorContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InitExecutorContext</span></code></a> and return an instance\nof <a class=\"reference internal\" href=\"#dagster.ExecutorConfig\" title=\"dagster.ExecutorConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ExecutorConfig</span></code></a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 The name of the executor.</p></li>\n<li><p><strong>config</strong> (<em>Optional</em><em>[</em><em>Any</em><em>]</em>) \u2013 <p>The schema for the config. Configuration data available in\n<cite>init_context.executor_config</cite>.\nThis value can be a:</p>\n<blockquote>\n<div><ul>\n<li><p><a class=\"reference internal\" href=\"../types/#dagster.Field\" title=\"dagster.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a></p></li>\n<li><dl class=\"simple\">\n<dt>Python primitive types that resolve to dagster config types</dt><dd><ul>\n<li><p>int, float, bool, str, list.</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>A dagster config type: Int, Float, Bool, List, Optional, <a class=\"reference internal\" href=\"../types/#dagster.Selector\" title=\"dagster.Selector\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Selector</span></code></a>, <a class=\"reference internal\" href=\"../types/#dagster.Dict\" title=\"dagster.Dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dict</span></code></a></p></li>\n<li><p>A bare python dictionary, which is wrapped in Field(Dict(\u2026)). Any values\nin the dictionary get resolved by the same rules, recursively.</p></li>\n</ul>\n</div></blockquote>\n</p></li>\n<li><p><strong>required_resource_keys</strong> (<em>Optional</em><em>[</em><em>Set</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em><em>]</em>) \u2013 Keys for the resources required by the\nexecutor.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.ExecutorDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">ExecutorDefinition</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">config=None</em>, <em class=\"sig-param\">executor_creation_fn=None</em>, <em class=\"sig-param\">required_resource_keys=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/executor/#ExecutorDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.ExecutorDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 The name of the executor.</p></li>\n<li><p><strong>config</strong> (<em>Optional</em><em>[</em><em>Any</em><em>]</em>) \u2013 <p>The schema for the config. Configuration data available in\n<cite>init_context.executor_config</cite>.\nThis value can be a:</p>\n<blockquote>\n<div><ul>\n<li><p><a class=\"reference internal\" href=\"../types/#dagster.Field\" title=\"dagster.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a></p></li>\n<li><dl class=\"simple\">\n<dt>Python primitive types that resolve to dagster config types</dt><dd><ul>\n<li><p>int, float, bool, str, list.</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>A dagster config type: Int, Float, Bool, List, Optional, <a class=\"reference internal\" href=\"../types/#dagster.Selector\" title=\"dagster.Selector\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Selector</span></code></a>, <a class=\"reference internal\" href=\"../types/#dagster.Dict\" title=\"dagster.Dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dict</span></code></a></p></li>\n<li><p>A bare python dictionary, which is wrapped in Field(Dict(\u2026)). Any values\nin the dictionary get resolved by the same rules, recursively.</p></li>\n</ul>\n</div></blockquote>\n</p></li>\n<li><p><strong>executor_creation_fn</strong> (<em>Optional</em><em>[</em><em>Callable</em><em>]</em>) \u2013 Should accept an <a class=\"reference internal\" href=\"#dagster.InitExecutorContext\" title=\"dagster.InitExecutorContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InitExecutorContext</span></code></a>\nand return an instance of <a class=\"reference internal\" href=\"#dagster.ExecutorConfig\" title=\"dagster.ExecutorConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ExecutorConfig</span></code></a>.</p></li>\n<li><p><strong>required_resource_keys</strong> (<em>Optional</em><em>[</em><em>Set</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em><em>]</em>) \u2013 Keys for the resources required by the\nexecutor.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.InitExecutorContext\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">InitExecutorContext</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/engine/init/#InitExecutorContext\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.InitExecutorContext\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Executor-specific initialization context.</p>\n<dl class=\"attribute\">\n<dt id=\"dagster.InitExecutorContext.pipeline_def\">\n<code class=\"sig-name descname\">pipeline_def</code><a class=\"headerlink\" href=\"#dagster.InitExecutorContext.pipeline_def\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The pipeline definition in scope for execution.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"../pipeline/#dagster.PipelineDefinition\" title=\"dagster.PipelineDefinition\">PipelineDefinition</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitExecutorContext.mode_def\">\n<code class=\"sig-name descname\">mode_def</code><a class=\"headerlink\" href=\"#dagster.InitExecutorContext.mode_def\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The mode in which the pipeline is to be executed.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"../pipeline/#dagster.ModeDefinition\" title=\"dagster.ModeDefinition\">ModeDefinition</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitExecutorContext.executor_def\">\n<code class=\"sig-name descname\">executor_def</code><a class=\"headerlink\" href=\"#dagster.InitExecutorContext.executor_def\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The definition of the executor currently being\nconstructed.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"#dagster.ExecutorDefinition\" title=\"dagster.ExecutorDefinition\">ExecutorDefinition</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitExecutorContext.run_config\">\n<code class=\"sig-name descname\">run_config</code><a class=\"headerlink\" href=\"#dagster.InitExecutorContext.run_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Configuration for this pipeline run.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"../execution/#dagster.RunConfig\" title=\"dagster.RunConfig\">RunConfig</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitExecutorContext.environment_config\">\n<code class=\"sig-name descname\">environment_config</code><a class=\"headerlink\" href=\"#dagster.InitExecutorContext.environment_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The parsed environment configuration for this\npipeline run.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p>EnvironmentConfig</p>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.InitExecutorContext.executor_config\">\n<code class=\"sig-name descname\">executor_config</code><a class=\"headerlink\" href=\"#dagster.InitExecutorContext.executor_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The parsed config passed to the executor.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.8)\">dict</a></p>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.ExecutorConfig\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">ExecutorConfig</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/execution/config/#ExecutorConfig\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.ExecutorConfig\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"method\">\n<dt id=\"dagster.ExecutorConfig.get_engine\">\n<em class=\"property\">abstract </em><code class=\"sig-name descname\">get_engine</code><span class=\"sig-paren\">(</span><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/execution/config/#ExecutorConfig.get_engine\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.ExecutorConfig.get_engine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>(Engine): Return the corresponding engine class.</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.Engine\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Engine</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/engine/engine_base/#Engine\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.Engine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"method\">\n<dt id=\"dagster.Engine.execute\">\n<em class=\"property\">abstract static </em><code class=\"sig-name descname\">execute</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">pipeline_context</em>, <em class=\"sig-param\">execution_plan</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/engine/engine_base/#Engine.execute\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.Engine.execute\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Core execution method.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>pipeline_context</strong> (<em>SystemPipelineExecutionContext</em>) \u2013 The pipeline execution context.</p></li>\n<li><p><strong>(</strong><strong>)</strong> (<em>execution_plan</em>) \u2013 </p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"system-storage\">\n<h2>System Storage<a class=\"headerlink\" href=\"#system-storage\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"function\">\n<dt id=\"dagster.system_storage\">\n<code class=\"sig-prename descclassname\">&#64;</code><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">system_storage</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">required_resource_keys</em>, <em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">is_persistent=True</em>, <em class=\"sig-param\">config=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/system_storage/#system_storage\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.system_storage\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A decorator for creating a SystemStorageDefinition. The decorated function will be used as the\nsystem_storage_creation_fn in a SystemStorageDefinition.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 </p></li>\n<li><p><strong>is_persistent</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#bool\" title=\"(in Python v3.8)\"><em>bool</em></a>) \u2013 Does storage def persist in way that can cross process/node\nboundaries. Execution with, for example, the multiprocess executor or within\nthe context of dagster-airflow require a persistent storage mode.</p></li>\n<li><p><strong>required_resource_keys</strong> (<em>Set</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 The resources that this storage needs at runtime to function.</p></li>\n<li><p><strong>config</strong> (<em>Optional</em><em>[</em><em>Any</em><em>]</em>) \u2013 <p>The schema for the config. Configuration data available in\n<cite>init_context.system_storage_config</cite>.\nThis value can be a:</p>\n<blockquote>\n<div><ul>\n<li><p><a class=\"reference internal\" href=\"../types/#dagster.Field\" title=\"dagster.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a></p></li>\n<li><dl class=\"simple\">\n<dt>Python primitive types that resolve to dagster config types</dt><dd><ul>\n<li><p>int, float, bool, str, list.</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>A dagster config type: Int, Float, Bool, List, Optional, <a class=\"reference internal\" href=\"../types/#dagster.Selector\" title=\"dagster.Selector\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Selector</span></code></a>, <a class=\"reference internal\" href=\"../types/#dagster.Dict\" title=\"dagster.Dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dict</span></code></a></p></li>\n<li><p>A bare python dictionary, which is wrapped in Field(Dict(\u2026)). Any values\nin the dictionary get resolved by the same rules, recursively.</p></li>\n</ul>\n</div></blockquote>\n</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.SystemStorageDefinition\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">SystemStorageDefinition</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/definitions/system_storage/#SystemStorageDefinition\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.SystemStorageDefinition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Dagster stores run metadata and intermediate data on the user\u2019s behalf.\nThe SystemStorageDefinition exists in order to configure and customize\nthose behaviors.</p>\n<p>Example storage definitions are the mem_system_storage in this module,\nwhich stores all intermediates and run data in memory. and the fs_system_storage,\nwhich stores all that data in the local filesystem.</p>\n<p>In dagster_aws there is the S3SystemStorageDefinition. We anticipate having\nsystem storage for every major cloud provider. And it is user customizable\nfor users with custom infrastructure needs.</p>\n<p>The storage definitions passed into the ModeDefinition determine the config\nschema of the \u201cstorage\u201d section of the environment configuration.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 Name of the storage mode.</p></li>\n<li><p><strong>is_persistent</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#bool\" title=\"(in Python v3.8)\"><em>bool</em></a>) \u2013 Does storage def persist in a way that can cross process/node\nboundaries. Execution with, for example, the multiprocess executor or within\nthe context of dagster-airflow requires a persistent storage mode.</p></li>\n<li><p><strong>config</strong> (<em>Optional</em><em>[</em><em>Any</em><em>]</em>) \u2013 <p>The schema for the config. Configuration data available in\n<cite>init_context.system_storage_config</cite>.\nThis value can be a:</p>\n<blockquote>\n<div><ul>\n<li><p><a class=\"reference internal\" href=\"../types/#dagster.Field\" title=\"dagster.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a></p></li>\n<li><dl class=\"simple\">\n<dt>Python primitive types that resolve to dagster config types</dt><dd><ul>\n<li><p>int, float, bool, str, list.</p></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><p>A dagster config type: Int, Float, Bool, List, Optional, <a class=\"reference internal\" href=\"../types/#dagster.Selector\" title=\"dagster.Selector\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Selector</span></code></a>, <a class=\"reference internal\" href=\"../types/#dagster.Dict\" title=\"dagster.Dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dict</span></code></a></p></li>\n<li><p>A bare python dictionary, which is wrapped in Field(Dict(\u2026)). Any values\nin the dictionary get resolved by the same rules, recursively.</p></li>\n</ul>\n</div></blockquote>\n</p></li>\n<li><p><strong>system_storage_creation_fn</strong> \u2013 (Callable[InitSystemStorageContext, SystemStorageData])\nCalled by the system. The author of the StorageSystemDefinition must provide this function,\nwhich consumes the init context and then emits the SystemStorageData.</p></li>\n<li><p><strong>required_resource_keys</strong> (<em>Set</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 The resources that this storage needs at runtime to function.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"data\">\n<dt id=\"dagster.core.storage.system_storage.default_system_storage_defs\">\n<code class=\"sig-prename descclassname\">dagster.core.storage.system_storage.</code><code class=\"sig-name descname\">default_system_storage_defs</code><em class=\"property\"> [mem_system_storage_def, fs_system_storage_def]</em><a class=\"headerlink\" href=\"#dagster.core.storage.system_storage.default_system_storage_defs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The default \u2018in_memory\u2019 and \u2018filesystem\u2019 system storage definitions.</p>\n<p>Framework authors seeking to add their own system storage definitions can extend this list as follows:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">custom_storage_mode</span> <span class=\"o\">=</span> <span class=\"n\">ModeDefinition</span><span class=\"p\">(</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"n\">system_storage_defs</span><span class=\"o\">=</span><span class=\"n\">default_system_storage_defs</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">custom_system_storage_def</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"instance\">\n<h2>Instance<a class=\"headerlink\" href=\"#instance\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"class\">\n<dt id=\"dagster.core.instance.DagsterInstance\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.core.instance.</code><code class=\"sig-name descname\">DagsterInstance</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">instance_type</em>, <em class=\"sig-param\">local_artifact_storage</em>, <em class=\"sig-param\">run_storage</em>, <em class=\"sig-param\">event_storage</em>, <em class=\"sig-param\">compute_log_manager</em>, <em class=\"sig-param\">run_launcher=None</em>, <em class=\"sig-param\">dagit_settings=None</em>, <em class=\"sig-param\">ref=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/instance/#DagsterInstance\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.core.instance.DagsterInstance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Core abstraction for managing Dagster\u2019s access to storage and other resources.</p>\n<p>Users should not directly instantiate this class. Configuration of this class should be done\nusing the <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster.yaml</span></code> file in <code class=\"docutils literal notranslate\"><span class=\"pre\">$DAGSTER_HOME</span></code>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>instance_type</strong> (<em>InstanceType</em>) \u2013 Indicates whether the instance is ephemeral or persistent.</p></li>\n<li><p><strong>local_artifact_storage</strong> (<a class=\"reference internal\" href=\"#dagster.core.storage.root.LocalArtifactStorage\" title=\"dagster.core.storage.root.LocalArtifactStorage\"><em>LocalArtifactStorage</em></a>) \u2013 Used to store local artifacts like\nthose managed by the file and intermediates manager, as well as schedules.</p></li>\n<li><p><strong>event_storage</strong> (<a class=\"reference internal\" href=\"#dagster.core.storage.event_log.EventLogStorage\" title=\"dagster.core.storage.event_log.EventLogStorage\"><em>EventLogStorage</em></a>) \u2013 Used to store the structured event logs generated by\npipeline runs.</p></li>\n<li><p><strong>run_storage</strong> (<em>RunStorage</em>) \u2013 Used to store metadata about ongoing and past pipeline runs.</p></li>\n<li><p><strong>compute_log_manager</strong> (<em>ComputeLogManager</em>) \u2013 Centralized dispatch for logging from user code.</p></li>\n<li><p><strong>ref</strong> (<em>Optional</em><em>[</em><em>InstanceRef</em><em>]</em>) \u2013 Used by internal machinery to pass instances across process\nboundaries.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.core.storage.root.LocalArtifactStorage\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.core.storage.root.</code><code class=\"sig-name descname\">LocalArtifactStorage</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">base_dir</em>, <em class=\"sig-param\">inst_data=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/storage/root/#LocalArtifactStorage\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.core.storage.root.LocalArtifactStorage\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"class\">\n<dt id=\"dagster.core.storage.event_log.EventLogStorage\">\n<em class=\"property\">class </em><code class=\"sig-prename descclassname\">dagster.core.storage.event_log.</code><code class=\"sig-name descname\">EventLogStorage</code><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/storage/event_log/base/#EventLogStorage\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.core.storage.event_log.EventLogStorage\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Abstract base class for storing structured event logs from pipeline runs.</p>\n</dd></dl>\n\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    ["sections/api/apidocs/dagster_airflow", "dagster_airflow", "N", "next"],
    ["sections/api/apidocs/dagstermill", "Dagstermill", "P", "previous"]
  ],
  "sourcename": "sections/api/apidocs/internals.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Internals</a><ul>\n<li><a class=\"reference internal\" href=\"#logging\">Logging</a></li>\n<li><a class=\"reference internal\" href=\"#executors\">Executors</a></li>\n<li><a class=\"reference internal\" href=\"#system-storage\">System Storage</a></li>\n<li><a class=\"reference internal\" href=\"#instance\">Instance</a></li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/api/apidocs/internals",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
