{
  "parents": [{ "link": "../deploying/", "title": "Deploying" }],
  "prev": { "link": "../deploying/", "title": "Deploying" },
  "next": { "link": "../dagit/", "title": "Standalone Dagit" },
  "title": "Instance Configuration",
  "meta": {},
  "body": "<div class=\"section\" id=\"instance-configuration\">\n<span id=\"instance\"></span><h1>Instance Configuration<a class=\"headerlink\" href=\"#instance-configuration\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>A Dagster instance is composed of:</p>\n<ul class=\"simple\">\n<li><p>Event Log Storage: Stores the record of structured events produced during runs. Ideally\nimplementations allow for monitoring the event log in some capacity to enable real time\nmonitoring via Dagit.</p></li>\n<li><p>Run Storage: Used to keep track of runs over time and query select subsets of them. Separate\nfrom the event log store to allow for efficient queries of run history.</p></li>\n<li><p>Compute Log Manager: Makes available copies of stdout and stderr on a per execution step basis\nfor debugging. This includes a real time subscription component as well as optional hooks for\nstorage.</p></li>\n<li><p>Local Artifact Storage: This ensures that a singular directory is used for all the file system\nartifacts produced by Dagster. This is useful for both sharing intermediates across multiple\nexecutions or simply to provide a single point of audit.</p></li>\n</ul>\n<p>Tools like the Dagster CLI or Dagit use the following behavior to select the current instance:</p>\n<ol class=\"arabic simple\">\n<li><p>Use the explicit settings in <cite>$DAGSTER_HOME/dagster.yaml</cite> if they exist</p></li>\n<li><p>Create a local instance rooted at <cite>$DAGSTER_HOME</cite> if it is set</p></li>\n<li><p>Create a local instance in the fallback directory if provided (used by dagit to maintain history\nbetween restarts)</p></li>\n<li><p>Use an ephemeral instance, which will hold information in memory and use a TemporaryDirectory\nfor local artifacts which is cleaned up on exit. This is useful for tests and is the default\nfor direct python api invocations such as <cite>execute_pipeline</cite>.</p></li>\n</ol>\n<div class=\"section\" id=\"writing-a-dagster-yaml\">\n<h2>Writing a dagster.yaml<a class=\"headerlink\" href=\"#writing-a-dagster-yaml\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You can use the explicit settings in <code class=\"docutils literal notranslate\"><span class=\"pre\">$DAGSTER_HOME/dagster.yaml</span></code> to tell Dagster which classes\nto use to manage the event log storage, run log storage, and so forth. This means that these\nstorage classes are pluggable.</p>\n<p>In general, you can tell Dagster which class to use for, e.g., run storage by writing yaml like:</p>\n<div class=\"highlight-YAML notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">run_storage</span><span class=\"p\">:</span>\n  <span class=\"nt\">module</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_very_awesome_module.run_storage</span>\n  <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">AwesomeRunStorage</span>\n  <span class=\"nt\">config</span><span class=\"p\">:</span>\n    <span class=\"nt\">secret_word</span><span class=\"p\">:</span> <span class=\"s\">&quot;quux&quot;</span>\n</pre></div>\n</div>\n<p>(If you\u2019re thinking of writing your own class for a case like this, please get in touch \u2013 we can\nhelp you implement the necessary interfaces.)</p>\n<div class=\"section\" id=\"using-a-local-or-remote-postgres-instance-for-storage\">\n<h3>Using a local or remote Postgres instance for storage<a class=\"headerlink\" href=\"#using-a-local-or-remote-postgres-instance-for-storage\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>We\u2019ve written a set of classes (in <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster-postgres</span></code>) which let you target a (local or remote)\nPostgres instance to store information about runs and event logs.</p>\n<p>Make sure that <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster-postgres</span></code> is installed in your Python environment, put the following lines\ninto your <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster.yaml</span></code> (replacing the values for <code class=\"docutils literal notranslate\"><span class=\"pre\">user</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">password</span></code>, the port, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">db_name</span></code> as needed to target your own local or remote Postgres instance), and then just start\ndagit as normal:</p>\n<div class=\"highlight-YAML notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">run_storage</span><span class=\"p\">:</span>\n  <span class=\"nt\">module</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dagster_postgres.run_storage</span>\n  <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">PostgresRunStorage</span>\n  <span class=\"nt\">config</span><span class=\"p\">:</span>\n    <span class=\"nt\">postgres_url</span><span class=\"p\">:</span> <span class=\"s\">&quot;postgresql://user:password@instance.us-west-1.rds.amazonaws.com:5432/db_name&quot;</span>\n\n<span class=\"nt\">event_log_storage</span><span class=\"p\">:</span>\n  <span class=\"nt\">module</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">dagster_postgres.event_log</span>\n  <span class=\"nt\">class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">PostgresEventLogStorage</span>\n  <span class=\"nt\">config</span><span class=\"p\">:</span>\n    <span class=\"nt\">postgres_url</span><span class=\"p\">:</span> <span class=\"s\">&quot;postgresql://user:password@instance.us-west-1.rds.amazonaws.com:5432/db_name&quot;</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    ["sections/deploying/dagit", "Standalone Dagit", "N", "next"],
    ["sections/deploying/deploying", "Deploying", "P", "previous"]
  ],
  "sourcename": "sections/deploying/instance.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Instance Configuration</a><ul>\n<li><a class=\"reference internal\" href=\"#writing-a-dagster-yaml\">Writing a dagster.yaml</a><ul>\n<li><a class=\"reference internal\" href=\"#using-a-local-or-remote-postgres-instance-for-storage\">Using a local or remote Postgres instance for storage</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/deploying/instance",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
