{
  "parents": [
    { "link": "../../../learn/", "title": "Learn" },
    { "link": "../../", "title": "Guides" }
  ],
  "prev": { "link": "../../solid/solid/", "title": "Solid Guide" },
  "next": { "link": "../expectations/", "title": "Data Quality Tests" },
  "title": "Testing Guide",
  "meta": {},
  "body": "<div class=\"section\" id=\"testing-guide\">\n<span id=\"testing-guide\"></span><h1>Testing Guide<a class=\"headerlink\" href=\"#testing-guide\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Testing computations and pipelines in data applications is notoriously challenging. Because of this, they often go relatively untested before hitting production. If there is testing in place, these tests are often slow, not run during common developer workflows, and have limited value because of the inability to simulate conditions in the production environment.</p>\n<p>Two underlying facts, more than any others, account for this challenge:</p>\n<ol class=\"simple\">\n<li><p><em>Data applications encode much of their business logic in heavy, external systems</em>. Examples include processing systems like Spark, and data warehouses such as Snowflake and Redshift. It is a) difficult to structure software to isolate these dependencies and b) difficult or impossible to run them in a lightweight manner.</p></li>\n<li><p><em>Data applications usually do not control their inputs.</em> They must take the data given and compute over it. This means that the computations encode innumerable implicit, unexpressed assumptions about the incoming data.</p></li>\n</ol>\n<p>Without accounting for these unique properties of data applications, blindly applying traditional software techniques can results in tests that are low-value, ineffective, or more trouble than they are worth.</p>\n<div class=\"section\" id=\"environments-and-business-logic\">\n<span id=\"environments-and-business-logic\"></span><h2>Environments and Business Logic<a class=\"headerlink\" href=\"#environments-and-business-logic\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>As noted above, data applications often rely on and encode their business logic in code that is executed by heavy, external dependencies. This means that it is easy and natural to couple your application to a single operating environment. However if you do this, <em>any</em> testing requires your production environment. This is a big problem.</p>\n<p>To even make local testing possible, one much structure your software to, as much as possible, cleanly separate this business logic from your operating environment. This is one the reasons why Dagster flows through a context object throughout its entire computation.</p>\n<p>Attached to the context is set of user-defined resources. Examples of resources include APIs to data warehouses, Spark clusters, s3 sessions, or some other external dependency or service. We can then configure pipelines to be in different \u201cmodes\u201d, which can alter what version of the resource is vended to the user.</p>\n</div>\n<div class=\"section\" id=\"unit-tests-in-data-application\">\n<span id=\"unit-tests-in-data-application\"></span><h2>Unit Tests in Data Application<a class=\"headerlink\" href=\"#unit-tests-in-data-application\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Principle: Errors that <em>can</em> be caught by unit tests <em>should</em> be caught by unit tests.</p>\n<p>Corollary: Do <em>not</em> attempt to unit test for errors than <em>cannot</em> be caught by unit tests.</p>\n<p>Using unit tests without keeping these principles in mind is on the reasons unit tests are frequently treated with skepticism in the data community. Unit testing is too often intepreted as simulating an external system such as Spark or data warehouse in a granular manner. Those are very complex systems which are impossible to faithfully emulate. Do not try to do so.</p>\n<p>Attempts to do this generally lead down a road where a programmer is spending huge amounts of time manually mocking, stubbing, or simulating the intricate behaviors of an externalized system. This is a massive waste of time and energy. Data applications will not be fully tested by unit tests, and one should not attempt to do so.</p>\n<p>Put another way, unit tests are not acceptance tests. They should not be the arbiter of whether a computation is correct. However unit testing \u2013 when properly scoped \u2013 is still valuable in data applications.</p>\n<p>There are massive classes of errors that can be addressed without interacting with external services: refactoring errors, syntax errors in interpreted languages, configuration errors, graph structure errors, and so on. Errors caught in a fast feedback loop of unit testing can be addressed orders of magnitude faster than those caught during an expensive batch computation in staging or production. With this dynamic in place engineers feel more empowered to do refactoring and other code quality improvements, because those errors can be caught earlier in the process.</p>\n<p>In this domain they should be viewed primarily as productivity and code quality tools, which in the end lead to more correct calculations.</p>\n<div class=\"section\" id=\"example\">\n<span id=\"example\"></span><h3>Example<a class=\"headerlink\" href=\"#example\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>We will be using these concepts to build up a reusable Solid that downloads a file from an external s3 bucket that we do not control and caching it in a location that we control. This local can be either a folder in the local file system or our s3 bucket. By default if the file is already there, the download does not occur, but this behavior can be changed via configuration.</p>\n<div class=\"section\" id=\"first-pass\">\n<span id=\"first-pass\"></span><h4>First Pass<a class=\"headerlink\" href=\"#first-pass\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Let\u2019s build a simple version of this Solid:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">file_cache_folder</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;file_cache&#39;</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">cache_file_from_s3</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">s3_coord</span><span class=\"p\">:</span> <span class=\"n\">S3Coordinate</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"c1\"># we default the target_key to the last component of the s3 key.</span>\n    <span class=\"n\">target_key</span> <span class=\"o\">=</span> <span class=\"n\">s3_coord</span><span class=\"p\">[</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># helpful wrapper around tempfile provided by dagster.utils</span>\n    <span class=\"k\">with</span> <span class=\"n\">get_temp_file_name</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tmp_file</span><span class=\"p\">:</span>\n        <span class=\"c1\"># boto3 hardcoded dependency, difficult to mock</span>\n        <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span><span class=\"s1\">&#39;s3&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">download_file</span><span class=\"p\">(</span>\n            <span class=\"n\">Bucket</span><span class=\"o\">=</span><span class=\"n\">s3_coord</span><span class=\"p\">[</span><span class=\"s1\">&#39;bucket&#39;</span><span class=\"p\">],</span>\n            <span class=\"n\">Key</span><span class=\"o\">=</span><span class=\"n\">s3_coord</span><span class=\"p\">[</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">],</span>\n            <span class=\"n\">Filename</span><span class=\"o\">=</span><span class=\"n\">tmp_file</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># file_cache_folder dependency, difficult to mock</span>\n        <span class=\"n\">target_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">file_cache_folder</span><span class=\"p\">(),</span> <span class=\"n\">target_key</span><span class=\"p\">)</span>\n\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">tmp_file</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tmp_file_object</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">target_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">target_file_object</span><span class=\"p\">:</span>\n                <span class=\"n\">shutil</span><span class=\"o\">.</span><span class=\"n\">copyfileobj</span><span class=\"p\">(</span><span class=\"n\">tmp_file_object</span><span class=\"p\">,</span> <span class=\"n\">target_file_object</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">target_path</span>\n</pre></div>\n</div>\n<p>Testing this is <em>possible</em> but it is awkward. This is how one would do a simple test for this code using the built-in python <code class=\"docutils literal notranslate\"><span class=\"pre\">mock</span></code> module.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span>\n<span class=\"k\">def</span> <span class=\"nf\">test_cache_file_from_s3_step_one_one</span><span class=\"p\">():</span>\n    <span class=\"n\">boto_s3</span> <span class=\"o\">=</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">MagicMock</span><span class=\"p\">()</span>\n    <span class=\"c1\"># mock.patch is difficult to get right and requires monkeypatching of global artifacts</span>\n    <span class=\"k\">with</span> <span class=\"n\">get_temp_dir</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span>\n        <span class=\"n\">file_cache_folder</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.file_cache_folder&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">temp_dir</span>\n    <span class=\"p\">),</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;boto3.client&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">_kwargs</span><span class=\"p\">:</span> <span class=\"n\">boto_s3</span>\n    <span class=\"p\">):</span>\n        <span class=\"nd\">@solid</span>\n        <span class=\"k\">def</span> <span class=\"nf\">emit_value</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">&#39;bucket&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-bucket&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-key&#39;</span><span class=\"p\">}</span>\n\n        <span class=\"nd\">@pipeline</span>\n        <span class=\"k\">def</span> <span class=\"nf\">pipe</span><span class=\"p\">():</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">cache_file_from_s3</span><span class=\"p\">(</span><span class=\"n\">emit_value</span><span class=\"p\">())</span>\n\n        <span class=\"n\">execute_pipeline</span><span class=\"p\">(</span><span class=\"n\">pipe</span><span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">boto_s3</span><span class=\"o\">.</span><span class=\"n\">download_file</span><span class=\"o\">.</span><span class=\"n\">call_count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;some-key&#39;</span><span class=\"p\">))</span>\n\n</pre></div>\n</div>\n<p>This is for a simple case. For more complex cases this would becoming increasingly difficult to the point where the cost of building and maintaining the test could very well be greater than the value of the test.</p>\n<p>We\u2019re going to start to introduce dagster concepts to make this testable and executable in more contexts.</p>\n</div>\n<div class=\"section\" id=\"testing-utility-execute-solid\">\n<span id=\"testing-utility-execute-solid\"></span><h4>Testing utility: <code class=\"docutils literal notranslate\"><span class=\"pre\">execute_solid</span></code><a class=\"headerlink\" href=\"#testing-utility-execute-solid\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>This first thing we are going to do is introduce <code class=\"docutils literal notranslate\"><span class=\"pre\">execute_solid</span></code>, which is very convenient for unit-testing. This makes it so that the author no longer has to construct emphemeral pipelines for the sole purpose or running a test or shimming in a value.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_cache_file_from_s3</span><span class=\"p\">():</span>\n    <span class=\"n\">boto_s3</span> <span class=\"o\">=</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">MagicMock</span><span class=\"p\">()</span>\n    <span class=\"c1\"># mock.patch is difficult to get right and requires</span>\n    <span class=\"c1\"># monkeypatching of global artifacts</span>\n    <span class=\"k\">with</span> <span class=\"n\">get_temp_dir</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span>\n        <span class=\"n\">file_cache_folder</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;.file_cache_folder&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">temp_dir</span>\n    <span class=\"p\">),</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;boto3.client&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">_kwargs</span><span class=\"p\">:</span> <span class=\"n\">boto_s3</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">execute_solid</span><span class=\"p\">(</span>\n            <span class=\"n\">cache_file_from_s3</span><span class=\"p\">,</span>\n            <span class=\"n\">input_values</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"s1\">&#39;s3_coord&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;bucket&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-bucket&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-key&#39;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">boto_s3</span><span class=\"o\">.</span><span class=\"n\">download_file</span><span class=\"o\">.</span><span class=\"n\">call_count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;some-key&#39;</span><span class=\"p\">))</span>\n\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"using-the-filecache-resource\">\n<span id=\"using-the-filecache-resource\"></span><h4>Using the FileCache resource<a class=\"headerlink\" href=\"#using-the-filecache-resource\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Dagster with the FileCache resource out-of-the-box, which is designed to fulfill this exact use case. Thie provides a layer of indirection for easily providing test implementations in a structure member as well as (as we\u2019ll see later) swapping out different implementations for different environments (such as a cloud environment.)</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_cache_file_from_s3</span><span class=\"p\">():</span>\n    <span class=\"n\">boto_s3</span> <span class=\"o\">=</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">MagicMock</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">get_temp_dir</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;boto3.client&#39;</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">_kwargs</span><span class=\"p\">:</span> <span class=\"n\">boto_s3</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">execute_solid</span><span class=\"p\">(</span>\n            <span class=\"n\">cache_file_from_s3</span><span class=\"p\">,</span>\n            <span class=\"c1\"># This helper method allows resource instances</span>\n            <span class=\"c1\"># to be passed in directly</span>\n            <span class=\"n\">ModeDefinition</span><span class=\"o\">.</span><span class=\"n\">from_resources</span><span class=\"p\">({</span>\n                <span class=\"s1\">&#39;file_cache&#39;</span><span class=\"p\">:</span> <span class=\"n\">FSFileCache</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">)</span>\n            <span class=\"p\">}),</span>\n            <span class=\"n\">input_values</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"s1\">&#39;s3_coord&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;bucket&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-bucket&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-key&#39;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">boto_s3</span><span class=\"o\">.</span><span class=\"n\">download_file</span><span class=\"o\">.</span><span class=\"n\">call_count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;some-key&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"configuration\">\n<span id=\"configuration\"></span><h4>Configuration<a class=\"headerlink\" href=\"#configuration\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>These concepts also plug into Dagster\u2019s configuration system. Here we accomplish run the same test but by specificying configuration.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span>\n<span class=\"k\">def</span> <span class=\"nf\">test_cache_file_from_s3</span><span class=\"p\">():</span>\n    <span class=\"n\">boto_s3</span> <span class=\"o\">=</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">MagicMock</span><span class=\"p\">()</span>\n    <span class=\"k\">with</span> <span class=\"n\">get_temp_dir</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;boto3.resource&#39;</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">_kwargs</span><span class=\"p\">:</span> <span class=\"n\">boto_s3</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">execute_solid</span><span class=\"p\">(</span>\n            <span class=\"n\">cache_file_from_s3</span><span class=\"p\">,</span>\n            <span class=\"n\">ModeDefinition</span><span class=\"p\">(</span><span class=\"n\">resource_defs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;file_cache&#39;</span><span class=\"p\">:</span> <span class=\"n\">fs_file_cache</span><span class=\"p\">}),</span>\n            <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"s1\">&#39;resources&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;file_cache&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;config&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;target_folder&#39;</span><span class=\"p\">:</span> <span class=\"n\">temp_dir</span><span class=\"p\">}}</span>\n                <span class=\"p\">},</span>\n                <span class=\"s1\">&#39;solids&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;cache_file_from_s3&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                        <span class=\"s1\">&#39;inputs&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                            <span class=\"s1\">&#39;s3_coord&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                                <span class=\"s1\">&#39;bucket&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-bucket&#39;</span><span class=\"p\">,</span>\n                                <span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-key&#39;</span>\n                            <span class=\"p\">},</span>\n                        <span class=\"p\">},</span>\n                    <span class=\"p\">},</span>\n                <span class=\"p\">},</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">boto_s3</span><span class=\"o\">.</span><span class=\"n\">download_file</span><span class=\"o\">.</span><span class=\"n\">call_count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;some-key&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"mocks-and-fakes\">\n<span id=\"mocks-and-fakes\"></span><h4>Mocks and Fakes<a class=\"headerlink\" href=\"#mocks-and-fakes\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Now we add also add an S3Resource to ease testability. You\u2019ll note that the monkeypatch of a global symbol via <code class=\"docutils literal notranslate\"><span class=\"pre\">mock.patch</span></code> has been eliminated.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">unittest_for_local_mode_def</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"n\">s3_session</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">ModeDefinition</span><span class=\"o\">.</span><span class=\"n\">from_resources</span><span class=\"p\">({</span>\n        <span class=\"s1\">&#39;file_cache&#39;</span><span class=\"p\">:</span> <span class=\"n\">FSFileCache</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;s3&#39;</span><span class=\"p\">:</span> <span class=\"n\">S3Resource</span><span class=\"p\">(</span><span class=\"n\">s3_session</span><span class=\"p\">),</span>\n    <span class=\"p\">})</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test_cache_file_from_s3</span><span class=\"p\">():</span>\n    <span class=\"n\">s3_session</span> <span class=\"o\">=</span> <span class=\"n\">mock</span><span class=\"o\">.</span><span class=\"n\">MagicMock</span><span class=\"p\">()</span>\n    <span class=\"c1\"># the mock.patch to the global boto3.resource is gone</span>\n    <span class=\"k\">with</span> <span class=\"n\">get_temp_dir</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">temp_dir</span><span class=\"p\">:</span>\n        <span class=\"n\">execute_solid</span><span class=\"p\">(</span>\n            <span class=\"n\">cache_file_from_s3</span><span class=\"p\">,</span>\n            <span class=\"n\">unittest_for_local_mode_def</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"n\">s3_session</span><span class=\"p\">),</span>\n            <span class=\"n\">input_values</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"s1\">&#39;s3_coord&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;bucket&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-bucket&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-key&#39;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">s3_session</span><span class=\"o\">.</span><span class=\"n\">download_file</span><span class=\"o\">.</span><span class=\"n\">call_count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;some-key&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>However we can go further. For commonly used resources with a well-defined APIs, we encourage the creation of <em>fakes</em> instead of <em>mocks</em>. Furthermore, we hope that an ecosystem of fake resources develops alongside the ecosystem. With a fake, we can write better test. We\u2019ll demonstrate using the <code class=\"docutils literal notranslate\"><span class=\"pre\">S3FakeSession</span></code> instead a mock.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_cache_file_from_s3</span><span class=\"p\">():</span>\n    <span class=\"n\">s3_session</span> <span class=\"o\">=</span> <span class=\"n\">S3FakeSession</span><span class=\"p\">({</span><span class=\"s1\">&#39;some-bucket&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;some-key&#39;</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">}})</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">get_temp_dir</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">temp_dir</span><span class=\"p\">:</span>\n        <span class=\"n\">execute_solid</span><span class=\"p\">(</span>\n            <span class=\"n\">cache_file_from_s3</span><span class=\"p\">,</span>\n            <span class=\"n\">unittest_for_local_mode_def</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"n\">s3_session</span><span class=\"p\">),</span>\n            <span class=\"n\">input_values</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"s1\">&#39;s3_coord&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;bucket&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-bucket&#39;</span><span class=\"p\">,</span>\n                    <span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;some-key&#39;</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># now check the local file system that the fake has written to</span>\n        <span class=\"n\">target_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">temp_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;some-key&#39;</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">target_file</span><span class=\"p\">)</span>\n\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">target_file</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">ff</span><span class=\"p\">:</span>\n            <span class=\"k\">assert</span> <span class=\"n\">ff</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;foo</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"multiple-environments\">\n<span id=\"multiple-environments\"></span><h4>Multiple Environments<a class=\"headerlink\" href=\"#multiple-environments\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>In our last stage, we will make this solid executable in multiple environments. Namely we will use an s3-based file cache instead of a fs-based file cache and verify that it places files in s3 as its contract promises.</p>\n<p>The first step is that we have to make a minor modification to have the solid return a <code class=\"docutils literal notranslate\"><span class=\"pre\">FileHandle</span></code> instead of a <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">cache_file_from_s3</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">s3_coord</span><span class=\"p\">:</span> <span class=\"n\">S3Coordinate</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">FileHandle</span><span class=\"p\">:</span>\n    <span class=\"c1\"># we default the target_key to the last component of the s3 key.</span>\n    <span class=\"n\">target_key</span> <span class=\"o\">=</span> <span class=\"n\">s3_coord</span><span class=\"p\">[</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;/&#39;</span><span class=\"p\">)[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">get_temp_file_name</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">tmp_file</span><span class=\"p\">:</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">s3</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">download_file</span><span class=\"p\">(</span>\n            <span class=\"n\">Bucket</span><span class=\"o\">=</span><span class=\"n\">s3_coord</span><span class=\"p\">[</span><span class=\"s1\">&#39;bucket&#39;</span><span class=\"p\">],</span>\n            <span class=\"n\">Key</span><span class=\"o\">=</span><span class=\"n\">s3_coord</span><span class=\"p\">[</span><span class=\"s1\">&#39;key&#39;</span><span class=\"p\">],</span>\n            <span class=\"n\">Filename</span><span class=\"o\">=</span><span class=\"n\">tmp_file</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">file_cache</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">resources</span><span class=\"o\">.</span><span class=\"n\">file_cache</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">tmp_file</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tmp_file_object</span><span class=\"p\">:</span>\n            <span class=\"c1\"># returns a handle rather than a path</span>\n            <span class=\"n\">file_handle</span> <span class=\"o\">=</span> <span class=\"n\">file_cache</span><span class=\"o\">.</span><span class=\"n\">write_file_object</span><span class=\"p\">(</span>\n                <span class=\"n\">target_key</span><span class=\"p\">,</span>\n                <span class=\"n\">tmp_file_object</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">file_handle</span>\n</pre></div>\n</div>\n<p>When the s3 file cache is used, <code class=\"docutils literal notranslate\"><span class=\"pre\">write_file_object</span></code> returns an <code class=\"docutils literal notranslate\"><span class=\"pre\">S3FileHandle</span></code>, and in the local file system case, it returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">LocalFileHandle</span></code>. From the standpoint of a user they can effectively ignore this as long as they are interacting with resources like the <code class=\"docutils literal notranslate\"><span class=\"pre\">FileCache</span></code> that deal with file handles.</p>\n<p>With this we can use an <code class=\"docutils literal notranslate\"><span class=\"pre\">S3FileCache</span></code> instead:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">unittest_for_aws_mode_def</span><span class=\"p\">(</span><span class=\"n\">s3_file_cache_session</span><span class=\"p\">,</span> <span class=\"n\">s3_session</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">ModeDefinition</span><span class=\"o\">.</span><span class=\"n\">from_resources</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;file_cache&#39;</span><span class=\"p\">:</span> <span class=\"n\">S3FileCache</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;file-cache-bucket&#39;</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;file-cache&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">s3_file_cache_session</span>\n             <span class=\"p\">),</span>\n            <span class=\"s1\">&#39;s3&#39;</span><span class=\"p\">:</span> <span class=\"n\">S3Resource</span><span class=\"p\">(</span><span class=\"n\">s3_session</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_cache_file_from_s3_step_four</span><span class=\"p\">(</span><span class=\"n\">snapshot</span><span class=\"p\">):</span>\n    <span class=\"n\">s3_session</span> <span class=\"o\">=</span> <span class=\"n\">S3FakeSession</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span><span class=\"s1\">&#39;source-bucket&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;source-file&#39;</span><span class=\"p\">:</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">}}</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">s3_file_cache_session</span> <span class=\"o\">=</span> <span class=\"n\">S3FakeSession</span><span class=\"p\">()</span>\n\n    <span class=\"n\">solid_result</span> <span class=\"o\">=</span> <span class=\"n\">execute_solid</span><span class=\"p\">(</span>\n        <span class=\"n\">cache_file_from_s3</span><span class=\"p\">,</span>\n        <span class=\"n\">unittest_for_aws_mode_def</span><span class=\"p\">(</span><span class=\"n\">s3_file_cache_session</span><span class=\"p\">,</span> <span class=\"n\">s3_session</span><span class=\"p\">),</span>\n        <span class=\"n\">input_values</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s1\">&#39;s3_coord&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;bucket&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;source-bucket&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;key&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;source-file&#39;</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">path_desc</span> <span class=\"o\">=</span> <span class=\"n\">solid_result</span><span class=\"o\">.</span><span class=\"n\">output_value</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">path_desc</span>\n\n    <span class=\"c1\"># returned correct s3 path</span>\n    <span class=\"k\">assert</span> <span class=\"n\">path_desc</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;s3://file-cache-bucket/file-cache/source-file&#39;</span>\n\n    <span class=\"c1\"># confirm that the correct data is in the right spot</span>\n    <span class=\"n\">file_cache_obj</span> <span class=\"o\">=</span> <span class=\"n\">s3_file_cache_session</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">(</span>\n        <span class=\"n\">Bucket</span><span class=\"o\">=</span><span class=\"s1\">&#39;file-cache-bucket&#39;</span><span class=\"p\">,</span> <span class=\"n\">Key</span><span class=\"o\">=</span><span class=\"s1\">&#39;file-cache/source-file&#39;</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">file_cache_obj</span><span class=\"p\">[</span><span class=\"s1\">&#39;Body&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s1\">&#39;foo&#39;</span>\n</pre></div>\n</div>\n<p>Note how the developer can keep the two fakes separate in these cases, so one only has to deal with one thing at a time.</p>\n<p>This resource system provides</p>\n<ol class=\"simple\">\n<li><p>An intuitive and logical seam where application designers can provide mock and fake implementations testing.</p></li>\n<li><p>This same seam can be used to execute the same business logic in different environments and clouds, giving users the opportunity to build reusable, sharable Solids.</p></li>\n<li><p>A point of configuration. Resources declare their configuration in a self-describing way, and can be configured in the typeahead in dagit and with high quality error message.</p></li>\n<li><p>The foundations of an entire ecosystem of resources and fakes.</p></li>\n</ol>\n</div>\n</div>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    [
      "sections/learn/guides/testing/expectations",
      "Data Quality Tests",
      "N",
      "next"
    ],
    ["sections/learn/guides/solid/solid", "Solid Guide", "P", "previous"]
  ],
  "sourcename": "sections/learn/guides/testing/testing.md.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Testing Guide</a><ul>\n<li><a class=\"reference internal\" href=\"#environments-and-business-logic\">Environments and Business Logic</a></li>\n<li><a class=\"reference internal\" href=\"#unit-tests-in-data-application\">Unit Tests in Data Application</a><ul>\n<li><a class=\"reference internal\" href=\"#example\">Example</a><ul>\n<li><a class=\"reference internal\" href=\"#first-pass\">First Pass</a></li>\n<li><a class=\"reference internal\" href=\"#testing-utility-execute-solid\">Testing utility: <code class=\"docutils literal notranslate\"><span class=\"pre\">execute_solid</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#using-the-filecache-resource\">Using the FileCache resource</a></li>\n<li><a class=\"reference internal\" href=\"#configuration\">Configuration</a></li>\n<li><a class=\"reference internal\" href=\"#mocks-and-fakes\">Mocks and Fakes</a></li>\n<li><a class=\"reference internal\" href=\"#multiple-environments\">Multiple Environments</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".md",
  "current_page_name": "sections/learn/guides/testing/testing",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
