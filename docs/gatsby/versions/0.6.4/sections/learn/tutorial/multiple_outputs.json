{
  "parents": [
    { "link": "../../learn/", "title": "Learn" },
    { "link": "../", "title": "Tutorial" }
  ],
  "prev": { "link": "../types/", "title": "User-defined types" },
  "next": { "link": "../composite_solids/", "title": "Composing solids" },
  "title": "Multiple and conditional outputs",
  "meta": {},
  "body": "<div class=\"section\" id=\"multiple-and-conditional-outputs\">\n<h1>Multiple and conditional outputs<a class=\"headerlink\" href=\"#multiple-and-conditional-outputs\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Solids can have arbitrarily many outputs, and downstream solids can depends on any number of these.</p>\n<p>What\u2019s more, outputs don\u2019t necessarily have to be yielded by solids, which lets us write pipelines\nwhere some solids conditionally execute based on the presence of an upstream output.</p>\n<p>Suppose we\u2019re interested in splitting hot and cold cereals into separate datasets and processing\nthem separately, based on config.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">multiple_outputs.py</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">&#39;process_hot&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Bool</span><span class=\"p\">,</span> <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;process_cold&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Bool</span><span class=\"p\">,</span> <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"p\">},</span>\n<span class=\"hll\">    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span>\n</span><span class=\"hll\">        <span class=\"n\">OutputDefinition</span><span class=\"p\">(</span>\n</span><span class=\"hll\">            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;hot_cereals&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n</span><span class=\"hll\">        <span class=\"p\">),</span>\n</span><span class=\"hll\">        <span class=\"n\">OutputDefinition</span><span class=\"p\">(</span>\n</span><span class=\"hll\">            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;cold_cereals&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n</span><span class=\"hll\">        <span class=\"p\">),</span>\n</span><span class=\"hll\">    <span class=\"p\">],</span>\n</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">split_cereals</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;process_hot&#39;</span><span class=\"p\">]:</span>\n        <span class=\"n\">hot_cereals</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">cereal</span> <span class=\"k\">for</span> <span class=\"n\">cereal</span> <span class=\"ow\">in</span> <span class=\"n\">cereals</span> <span class=\"k\">if</span> <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;type&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;H&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n<span class=\"hll\">        <span class=\"k\">yield</span> <span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">hot_cereals</span><span class=\"p\">,</span> <span class=\"s1\">&#39;hot_cereals&#39;</span><span class=\"p\">)</span>\n</span>    <span class=\"k\">if</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;process_cold&#39;</span><span class=\"p\">]:</span>\n        <span class=\"n\">cold_cereals</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">cereal</span> <span class=\"k\">for</span> <span class=\"n\">cereal</span> <span class=\"ow\">in</span> <span class=\"n\">cereals</span> <span class=\"k\">if</span> <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;type&#39;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n<span class=\"hll\">        <span class=\"k\">yield</span> <span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">cold_cereals</span><span class=\"p\">,</span> <span class=\"s1\">&#39;cold_cereals&#39;</span><span class=\"p\">)</span>\n</span></pre></div>\n</td></tr></table></div>\n</div>\n<p>Solids that yield multiple outputs must declare, and name, their outputs (passing <code class=\"docutils literal notranslate\"><span class=\"pre\">output_defs</span></code>\nto the <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.solid\" title=\"dagster.solid\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;solid</span></code></a> decorator). Output names must be unique and each\n<a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.Output\" title=\"dagster.Output\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Output</span></code></a> yielded by a solid\u2019s compute function must have a name that\ncorresponds to one of these declared outputs.</p>\n<p>We\u2019ll define two downstream solids and hook them up to the multiple outputs from <code class=\"docutils literal notranslate\"><span class=\"pre\">split_cereals</span></code>.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">multiple_outputs.py</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">sort_hot_cereals_by_calories</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_cereals</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cereal</span><span class=\"p\">:</span> <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Least caloric hot cereal: </span><span class=\"si\">{least_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">least_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">sort_cold_cereals_by_calories</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_cereals</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cereal</span><span class=\"p\">:</span> <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Least caloric cold cereal: </span><span class=\"si\">{least_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">least_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">multiple_outputs_pipeline</span><span class=\"p\">():</span>\n<span class=\"hll\">    <span class=\"n\">hot_cereals</span><span class=\"p\">,</span> <span class=\"n\">cold_cereals</span> <span class=\"o\">=</span> <span class=\"n\">split_cereals</span><span class=\"p\">(</span><span class=\"n\">read_csv</span><span class=\"p\">())</span>\n</span><span class=\"hll\">    <span class=\"n\">sort_hot_cereals_by_calories</span><span class=\"p\">(</span><span class=\"n\">hot_cereals</span><span class=\"p\">)</span>\n</span><span class=\"hll\">    <span class=\"n\">sort_cold_cereals_by_calories</span><span class=\"p\">(</span><span class=\"n\">cold_cereals</span><span class=\"p\">)</span>\n</span></pre></div>\n</td></tr></table></div>\n</div>\n<p>As usual, we can visualize this in Dagit:</p>\n<a class=\"\"\n               data-lightbox=\"group-d6fa704e-b7b3-4904-9ec9-97f1ee80879a\"\n               href=\"../../../../_images/multiple_outputs1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/multiple_outputs1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Notice that the logical DAG corresponding to the pipeline definition includes both dependencies \u2013\nwe won\u2019t know about the conditionality in the pipeline until runtime, when one of the outputs\nis not yielded by <code class=\"docutils literal notranslate\"><span class=\"pre\">split_cereal</span></code>.</p>\n<a class=\"\"\n               data-lightbox=\"group-dbc797fe-355a-4137-ad4d-b07899dcfc13\"\n               href=\"../../../../_images/multiple_outputs_zoom1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/multiple_outputs_zoom1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Zooming in, Dagit shows us the details of the multiple outputs from <code class=\"docutils literal notranslate\"><span class=\"pre\">split_cereals</span></code> and their\ndownstream dependencies.</p>\n<p>When we execute this pipeline with the following config, we\u2019ll see that the cold cereals output is\nomitted and that the execution step corresponding to the downstream solid is marked skipped in the\nright hand pane.</p>\n<a class=\"\"\n               data-lightbox=\"group-35f669dc-31aa-42dc-a7b1-ed99c5c51deb\"\n               href=\"../../../../_images/conditional_outputs1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/conditional_outputs1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a></div>\n<div class=\"section\" id=\"reusable-solids\">\n<h1>Reusable solids<a class=\"headerlink\" href=\"#reusable-solids\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Solids are intended to abstract chunks of business logic, but abstractions aren\u2019t very meaningful\nunless they can be reused.</p>\n<p>Our conditional outputs pipeline included a lot of repeated code \u2013 <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_hot_cereals_by_calories</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_cold_cereals_by_calories</span></code>, for instance. In general, it\u2019s preferable to build pipelines\nout of a relatively restricted set of well-tested library solids, using config liberally to\nparametrize them. (You\u2019ll certainly have your own version of <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code>, for instance, and\nDagster includes libraries like <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_aws</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_spark</span></code> to wrap and abstract\ninterfaces with common third party tools.)</p>\n<p>Let\u2019s replace <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_hot_cereals_by_calories</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_cold_cereals_by_calories</span></code> by two aliases\nof the same library solid:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">reusable_solids.py</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">sort_cereals_by_calories</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_cereals</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cereal</span><span class=\"p\">:</span> <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Least caloric </span><span class=\"si\">{cereal_type}</span><span class=\"s1\"> cereal: </span><span class=\"si\">{least_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">cereal_type</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">,</span>\n            <span class=\"n\">least_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">reusable_solids_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">hot_cereals</span><span class=\"p\">,</span> <span class=\"n\">cold_cereals</span> <span class=\"o\">=</span> <span class=\"n\">split_cereals</span><span class=\"p\">(</span><span class=\"n\">read_csv</span><span class=\"p\">())</span>\n<span class=\"hll\">    <span class=\"n\">sort_hot_cereals</span> <span class=\"o\">=</span> <span class=\"n\">sort_cereals_by_calories</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;sort_hot_cereals&#39;</span><span class=\"p\">)</span>\n</span><span class=\"hll\">    <span class=\"n\">sort_cold_cereals</span> <span class=\"o\">=</span> <span class=\"n\">sort_cereals_by_calories</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"s1\">&#39;sort_cold_cereals&#39;</span><span class=\"p\">)</span>\n</span>    <span class=\"n\">sort_hot_cereals</span><span class=\"p\">(</span><span class=\"n\">hot_cereals</span><span class=\"p\">)</span>\n    <span class=\"n\">sort_cold_cereals</span><span class=\"p\">(</span><span class=\"n\">cold_cereals</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>You\u2019ll see that Dagit distinguishes between the two invocations of the single library solid and the\nsolid\u2019s definition. The invocation is named and bound via a dependency graph to other invocations\nof other solids. The definition is the generic, resuable piece of logic that is invoked many times\nwithin this pipeline.</p>\n<a class=\"\"\n               data-lightbox=\"group-1aaf1fe2-94e3-4655-a2cc-35f66989dc55\"\n               href=\"../../../../_images/reusable_solids1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/reusable_solids1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Configuring solids also uses the aliases, as in the following YAML:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">reusable_solids.yaml</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"n\">solids</span><span class=\"p\">:</span>\n  <span class=\"n\">read_csv</span><span class=\"p\">:</span>\n    <span class=\"n\">inputs</span><span class=\"p\">:</span>\n      <span class=\"n\">csv_path</span><span class=\"p\">:</span>\n        <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"s2\">&quot;cereal.csv&quot;</span>\n<span class=\"hll\">  <span class=\"n\">sort_cold_cereals</span><span class=\"p\">:</span>\n</span>    <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"s2\">&quot;cold&quot;</span>\n<span class=\"hll\">  <span class=\"n\">sort_hot_cereals</span><span class=\"p\">:</span>\n</span>    <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"s2\">&quot;hot&quot;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    [
      "sections/learn/tutorial/composite_solids",
      "Composing solids",
      "N",
      "next"
    ],
    ["sections/learn/tutorial/types", "User-defined types", "P", "previous"]
  ],
  "sourcename": "sections/learn/tutorial/multiple_outputs.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Multiple and conditional outputs</a></li>\n<li><a class=\"reference internal\" href=\"#reusable-solids\">Reusable solids</a></li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/tutorial/multiple_outputs",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
