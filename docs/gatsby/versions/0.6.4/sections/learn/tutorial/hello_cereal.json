{
  "parents": [
    { "link": "../../learn/", "title": "Learn" },
    { "link": "../", "title": "Tutorial" }
  ],
  "prev": { "link": "../", "title": "Tutorial" },
  "next": { "link": "../hello_dag/", "title": "Connecting solids together" },
  "title": "Hello, cereal!",
  "meta": {},
  "body": "<div class=\"section\" id=\"hello-cereal\">\n<h1>Hello, cereal!<a class=\"headerlink\" href=\"#hello-cereal\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>In this tutorial, we\u2019ll explore the feature set of Dagster with small examples that are intended to\nbe illustrative of real data problems.</p>\n<p>We\u2019ll build these examples around a simple but scary .csv dataset, <code class=\"docutils literal notranslate\"><span class=\"pre\">cereal.csv</span></code>, which contains\nnutritional facts about 80 breakfast cereals. You can find this dataset on\n<a class=\"reference external\" href=\"https://raw.githubusercontent.com/dagster-io/dagster/master/examples/dagster_examples/intro_tutorial/cereal.csv\">Github</a>.\nOr, if you\u2019ve cloned the dagster git repository, you\u2019ll find this dataset at\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dagster/examples/dagster_examples/intro_tutorial/cereal.csv</span></code>.</p>\n<p>To get the flavor of this dataset, let\u2019s look at the header and the first five rows:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">cereals.csv</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-text notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5\n6</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span>name,mfr,type,calories,protein,fat,sodium,fiber,carbo,sugars,potass,vitamins,shelf,weight,cups,rating\n100% Bran,N,C,70,4,1,130,10,5,6,280,25,3,1,0.33,68.402973\n100% Natural Bran,Q,C,120,3,5,15,2,8,8,135,0,3,1,1,33.983679\nAll-Bran,K,C,70,4,1,260,9,7,5,320,25,3,1,0.33,59.425505\nAll-Bran with Extra Fiber,K,C,50,4,0,140,14,8,0,330,25,3,1,0.5,93.704912\nAlmond Delight,R,C,110,2,2,200,1,14,8,-1,25,3,1,0.75,34.384843\n</pre></div>\n</td></tr></table></div>\n</div>\n<div class=\"section\" id=\"hello-solid\">\n<h2>Hello, solid!<a class=\"headerlink\" href=\"#hello-solid\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Let\u2019s write our first Dagster solid and save it as <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_cereal.py</span></code>.</p>\n<p>(You can also find this file, and all of the tutorial code, on\n<a class=\"reference external\" href=\"https://github.com/dagster-io/dagster/tree/master/examples/dagster_examples/intro_tutorial\">Github</a>\nor, if you\u2019ve cloned the git repo, at <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster/examples/dagster_examples/intro_tutorial/</span></code>.)</p>\n<p>A solid is a unit of computation in a data pipeline. Typically, you\u2019ll define solids by\nannotating ordinary Python functions with the <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.solid\" title=\"dagster.solid\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;solid</span></code></a> decorator.</p>\n<p>The logic in our first solid is very straightforward: it just reads in the csv from a hardcoded path\nand logs the number of rows it finds.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">hello_cereal.py</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">csv</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">execute_pipeline</span><span class=\"p\">,</span> <span class=\"n\">execute_solid</span><span class=\"p\">,</span> <span class=\"n\">pipeline</span><span class=\"p\">,</span> <span class=\"n\">solid</span>\n\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_cereal</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Assuming the dataset is in the same directory as this file</span>\n    <span class=\"n\">dataset_path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;cereal.csv&#39;</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">dataset_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Read the rows in using the standard csv library</span>\n        <span class=\"n\">cereals</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Found </span><span class=\"si\">{n_cereals}</span><span class=\"s1\"> cereals&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_cereals</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">cereals</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>In this simplest case, our solid takes no inputs except for the\n<a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.SystemComputeExecutionContext\" title=\"dagster.SystemComputeExecutionContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">context</span></code></a> in which it executes\n(provided by the Dagster framework as the first argument to every solid), and also returns no\noutputs. Don\u2019t worry, we\u2019ll soon encounter solids that are much more dynamic.</p>\n</div>\n<div class=\"section\" id=\"hello-pipeline\">\n<h2>Hello, pipeline!<a class=\"headerlink\" href=\"#hello-pipeline\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To execute our solid, we\u2019ll embed it in an equally simple pipeline.</p>\n<p>A pipeline is a set of solids arranged into a DAG (or\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Directed_acyclic_graph\">directed acyclic graph</a>) of computation.\nYou\u2019ll typically define pipelines by annotating ordinary Python functions with the\n<a class=\"reference internal\" href=\"../../../api/apidocs/pipeline/#dagster.pipeline\" title=\"dagster.pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;pipeline</span></code></a> decorator.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">hello_cereal.py</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>21\n22\n23</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_cereal_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">hello_cereal</span><span class=\"p\">()</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Here you\u2019ll see that we call <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_cereal()</span></code>. This call doesn\u2019t actually execute the solid\n\u2013 within the body of functions decorated with <a class=\"reference internal\" href=\"../../../api/apidocs/pipeline/#dagster.pipeline\" title=\"dagster.pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;pipeline</span></code></a>, we use\nfunction calls to indicate the dependency structure of the solids making up the pipeline. Here,\nwe indicate that the execution of <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_cereal</span></code> doesn\u2019t depend on any other solids by calling\nit with no arguments.</p>\n</div>\n</div>\n<div class=\"section\" id=\"executing-our-first-pipeline\">\n<span id=\"id1\"></span><h1>Executing our first pipeline<a class=\"headerlink\" href=\"#executing-our-first-pipeline\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Assuming you\u2019ve saved this pipeline as <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_cereal.py</span></code>, we can execute it via any of three\ndifferent mechanisms:</p>\n<ol class=\"arabic simple\">\n<li><p>From the command line, using the <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster</span></code> CLI.</p></li>\n<li><p>From a rich graphical interface, using the <code class=\"docutils literal notranslate\"><span class=\"pre\">dagit</span></code> GUI tool.</p></li>\n<li><p>From arbitrary Python scripts, using dagster\u2019s Python API.</p></li>\n</ol>\n<div class=\"section\" id=\"using-the-dagster-cli-to-execute-a-pipeline\">\n<h2>Using the dagster CLI to execute a pipeline<a class=\"headerlink\" href=\"#using-the-dagster-cli-to-execute-a-pipeline\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>From the directory in which you\u2019ve saved the pipeline file, just run:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> dagster pipeline execute -f hello_cereal.py -n hello_cereal_pipeline\n</pre></div>\n</div>\n<p>You\u2019ll see the full stream of events emitted by dagster appear in the console, including our\ncall to the logging machinery, which will look like:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"hll\"><span class=\"go\">  2019-10-10 11:46:50 - dagster - INFO - system - a91a4cc4-d218-4c2b-800c-aac50fced1a5 - Found 77 cereals</span>\n</span><span class=\"go\">                solid = &quot;hello_cereal&quot;</span>\n<span class=\"go\">      solid_definition = &quot;hello_cereal&quot;</span>\n<span class=\"go\">              step_key = &quot;hello_cereal.compute&quot;</span>\n</pre></div>\n</div>\n<p>Success!</p>\n</div>\n<div class=\"section\" id=\"using-dagit-to-execute-a-pipeline\">\n<h2>Using dagit to execute a pipeline<a class=\"headerlink\" href=\"#using-dagit-to-execute-a-pipeline\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To visualize your pipeline (which only has one node) in dagit, from the directory in which you\u2019ve\nsaved the pipeline file, just run run:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> dagit -f hello_cereal.py -n hello_cereal_pipeline\n</pre></div>\n</div>\n<p>You\u2019ll see output like</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">Loading repository...</span>\n<span class=\"go\">Serving on http://127.0.0.1:3000</span>\n</pre></div>\n</div>\n<p>You should be able to navigate to <a class=\"reference external\" href=\"http://127.0.0.1:3000/p/hello_cereal_pipeline/explore\">http://127.0.0.1:3000/p/hello_cereal_pipeline/explore</a> in\nyour web browser and view your pipeline. It isn\u2019t very interesting yet, because it only has one\nnode.</p>\n<a class=\"\"\n               data-lightbox=\"group-b155f83f-8607-4845-9c30-be306f6e901d\"\n               href=\"../../../../_images/hello_cereal_figure_one1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/hello_cereal_figure_one1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Clicking on the \u201cExecute\u201d tab (<a class=\"reference external\" href=\"http://127.0.0.1:3000/p/hello_world_pipeline/execute\">http://127.0.0.1:3000/p/hello_world_pipeline/execute</a>) and you\u2019ll\nsee the two-paned view below.</p>\n<a class=\"\"\n               data-lightbox=\"group-4689cd12-9666-4b1c-b3ca-46ea71b41ad2\"\n               href=\"../../../../_images/hello_cereal_figure_two1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/hello_cereal_figure_two1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>The left hand pane is empty here, but in more complicated pipelines, this is where you\u2019ll be able\nto edit pipeline configuration on the fly.</p>\n<p>The right hand pane shows the concrete execution plan corresponding to the logical structure of\nthe pipeline \u2013 which also only has one node, <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_cereal.compute</span></code>.</p>\n<p>Click the \u201cStart Execution\u201d button to execute this plan directly from dagit. A new window should\nopen, and you\u2019ll see a much more structured view of the stream of Dagster events start to appear in\nthe left-hand pane.</p>\n<p>(If you have pop-up blocking enabled, you may need to tell your browser to allow pop-ups from\n127.0.0.1 \u2013 or, just navigate to the \u201cRuns\u201d tab to see this, and every run of your pipeline.)</p>\n<a class=\"\"\n               data-lightbox=\"group-0b8fd743-91cd-45cd-8967-eacd76fad588\"\n               href=\"../../../../_images/hello_cereal_figure_three1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/hello_cereal_figure_three1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>In this view, you can filter and search through the logs corresponding to your pipeline run.</p>\n</div>\n<div class=\"section\" id=\"using-the-python-api-to-execute-a-pipeline\">\n<h2>Using the Python API to execute a pipeline<a class=\"headerlink\" href=\"#using-the-python-api-to-execute-a-pipeline\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you\u2019d rather execute your pipelines as a script, you can do that without using the dagster CLI\nat all. Just add a few lines to <code class=\"docutils literal notranslate\"><span class=\"pre\">hello_cereal.py</span></code>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">hello_cereal.py</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>26\n27\n28</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;__main__&#39;</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">execute_pipeline</span><span class=\"p\">(</span><span class=\"n\">hello_cereal_pipeline</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">success</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Now you can just run:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> python hello_cereal.py\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.execute_pipeline\" title=\"dagster.execute_pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">execute_pipeline()</span></code></a> function called here is the core Python API for executing Dagster\npipelines from code.</p>\n</div>\n</div>\n<div class=\"section\" id=\"testing-solids-and-pipelines\">\n<h1>Testing solids and pipelines<a class=\"headerlink\" href=\"#testing-solids-and-pipelines\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Our first solid and pipeline wouldn\u2019t be complete without some tests to ensure they\u2019re working as\nexpected. We\u2019ll use <a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.execute_pipeline\" title=\"dagster.execute_pipeline\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">execute_pipeline()</span></code></a> to test our pipeline, as well as\n<a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.execute_solid\" title=\"dagster.execute_solid\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">execute_solid()</span></code></a> to test our solid in isolation.</p>\n<p>These functions synchronously execute a pipeline or solid and return results objects (the\n<a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.SolidExecutionResult\" title=\"dagster.SolidExecutionResult\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SolidExecutionResult</span></code></a> and <a class=\"reference internal\" href=\"../../../api/apidocs/execution/#dagster.PipelineExecutionResult\" title=\"dagster.PipelineExecutionResult\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PipelineExecutionResult</span></code></a>) whose methods let us\ninvestigate, in detail, the success or failure of execution, the outputs produced by solids, and\n(as we\u2019ll see later) other events associated with execution.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">hello_cereal.py</span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>31\n32\n33\n34\n35\n36\n37\n38\n39\n40</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_hello_cereal_solid</span><span class=\"p\">():</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">execute_solid</span><span class=\"p\">(</span><span class=\"n\">hello_cereal</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">success</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">output_value</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">77</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_hello_cereal_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">execute_pipeline</span><span class=\"p\">(</span><span class=\"n\">hello_cereal_pipeline</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">success</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">result_for_solid</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello_cereal&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">output_value</span><span class=\"p\">())</span> <span class=\"o\">==</span> <span class=\"mi\">77</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Now you can use pytest, or your test runner of choice, to run unit tests as you develop your\ndata applications.</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> pytest hello_cereal.py\n</pre></div>\n</div>\n<p>Note: pytest tests are typically in files prefixed with <cite>test_</cite>. However in order to simplify\nthe tutorial we have them in the same file.</p>\n<p>Obviously, in production we\u2019ll often execute pipelines in a parallel, streaming way that doesn\u2019t\nadmit this kind of API, which is intended to enable local tests like this.</p>\n<p>Dagster is written to make testing easy in a domain where it has historically been very difficult.\nThroughout the rest of this tutorial, we\u2019ll explore the writing of unit tests for each piece of\nthe framework as we learn about it.</p>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    [
      "sections/learn/tutorial/hello_dag",
      "Connecting solids together",
      "N",
      "next"
    ],
    ["sections/learn/tutorial/index", "Tutorial", "P", "previous"]
  ],
  "sourcename": "sections/learn/tutorial/hello_cereal.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Hello, cereal!</a><ul>\n<li><a class=\"reference internal\" href=\"#hello-solid\">Hello, solid!</a></li>\n<li><a class=\"reference internal\" href=\"#hello-pipeline\">Hello, pipeline!</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#executing-our-first-pipeline\">Executing our first pipeline</a><ul>\n<li><a class=\"reference internal\" href=\"#using-the-dagster-cli-to-execute-a-pipeline\">Using the dagster CLI to execute a pipeline</a></li>\n<li><a class=\"reference internal\" href=\"#using-dagit-to-execute-a-pipeline\">Using dagit to execute a pipeline</a></li>\n<li><a class=\"reference internal\" href=\"#using-the-python-api-to-execute-a-pipeline\">Using the Python API to execute a pipeline</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#testing-solids-and-pipelines\">Testing solids and pipelines</a></li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/tutorial/hello_cereal",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
