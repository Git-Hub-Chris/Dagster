{
  "parents": [{ "link": "../../", "title": "Module code" }],
  "title": "dagster_airflow.factory",
  "body": "<h1>Source code for dagster_airflow.factory</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">airflow</span> <span class=\"kn\">import</span> <span class=\"n\">DAG</span>\n<span class=\"kn\">from</span> <span class=\"nn\">airflow.operators</span> <span class=\"kn\">import</span> <span class=\"n\">BaseOperator</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">ExecutionTargetHandle</span><span class=\"p\">,</span> <span class=\"n\">RunConfig</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"p\">,</span> <span class=\"n\">seven</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.execution.api</span> <span class=\"kn\">import</span> <span class=\"n\">create_execution_plan</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.instance</span> <span class=\"kn\">import</span> <span class=\"n\">DagsterInstance</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.compile</span> <span class=\"kn\">import</span> <span class=\"n\">coalesce_execution_steps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.operators.docker_operator</span> <span class=\"kn\">import</span> <span class=\"n\">DagsterDockerOperator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.operators.python_operator</span> <span class=\"kn\">import</span> <span class=\"n\">DagsterPythonOperator</span>\n\n<span class=\"n\">DEFAULT_ARGS</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;depends_on_past&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;email&#39;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;airflow@example.com&#39;</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;email_on_failure&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;email_on_retry&#39;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;owner&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;airflow&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;retries&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;retry_delay&#39;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">),</span>\n    <span class=\"s1\">&#39;start_date&#39;</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">1900</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Airflow DAG names are not allowed to be longer than 250 chars</span>\n<span class=\"n\">AIRFLOW_MAX_DAG_NAME_LEN</span> <span class=\"o\">=</span> <span class=\"mi\">250</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_make_dag_description</span><span class=\"p\">(</span><span class=\"n\">pipeline_name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;&#39;Editable scaffolding autogenerated by dagster-airflow from pipeline </span><span class=\"si\">{pipeline_name}</span><span class=\"s1\"></span>\n<span class=\"s1\">    &#39;&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"n\">pipeline_name</span><span class=\"o\">=</span><span class=\"n\">pipeline_name</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_rename_for_airflow</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Modify pipeline name for Airflow to meet constraints on DAG names:</span>\n<span class=\"sd\">    https://github.com/apache/airflow/blob/1.10.3/airflow/utils/helpers.py#L52-L63</span>\n\n<span class=\"sd\">    Here, we just substitute underscores for illegal characters to avoid imposing Airflow&#39;s</span>\n<span class=\"sd\">    constraints on our naming schemes.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"k\">return</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">&#39;[^\\w\\-\\.]&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;_&#39;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)[:</span><span class=\"n\">AIRFLOW_MAX_DAG_NAME_LEN</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_make_airflow_dag</span><span class=\"p\">(</span>\n    <span class=\"n\">handle</span><span class=\"p\">,</span>\n    <span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n    <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_description</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">op_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">operator</span><span class=\"o\">=</span><span class=\"n\">DagsterPythonOperator</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">inst_param</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">,</span> <span class=\"s1\">&#39;handle&#39;</span><span class=\"p\">,</span> <span class=\"n\">ExecutionTargetHandle</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">str_param</span><span class=\"p\">(</span><span class=\"n\">pipeline_name</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pipeline_name&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">environment_dict</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_dict_param</span><span class=\"p\">(</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span> <span class=\"s1\">&#39;environment_dict&#39;</span><span class=\"p\">,</span> <span class=\"n\">key_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_str_param</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mode&#39;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Default to use the (persistent) system temp directory rather than a seven.TemporaryDirectory,</span>\n    <span class=\"c1\"># which would not be consistent between Airflow task invocations.</span>\n    <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">inst_param</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"s1\">&#39;instance&#39;</span><span class=\"p\">,</span> <span class=\"n\">DagsterInstance</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">instance</span>\n        <span class=\"k\">else</span> <span class=\"n\">DagsterInstance</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">fallback_storage</span><span class=\"o\">=</span><span class=\"n\">seven</span><span class=\"o\">.</span><span class=\"n\">get_system_temp_directory</span><span class=\"p\">())</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Only used for Airflow; internally we continue to use pipeline.name</span>\n    <span class=\"n\">dag_id</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_str_param</span><span class=\"p\">(</span><span class=\"n\">dag_id</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dag_id&#39;</span><span class=\"p\">,</span> <span class=\"n\">_rename_for_airflow</span><span class=\"p\">(</span><span class=\"n\">pipeline_name</span><span class=\"p\">))</span>\n\n    <span class=\"n\">dag_description</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_str_param</span><span class=\"p\">(</span>\n        <span class=\"n\">dag_description</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dag_description&#39;</span><span class=\"p\">,</span> <span class=\"n\">_make_dag_description</span><span class=\"p\">(</span><span class=\"n\">pipeline_name</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">subclass_param</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"p\">,</span> <span class=\"s1\">&#39;operator&#39;</span><span class=\"p\">,</span> <span class=\"n\">BaseOperator</span><span class=\"p\">)</span>\n\n    <span class=\"n\">dag_kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span><span class=\"s1\">&#39;default_args&#39;</span><span class=\"p\">:</span> <span class=\"n\">DEFAULT_ARGS</span><span class=\"p\">},</span>\n        <span class=\"o\">**</span><span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_dict_param</span><span class=\"p\">(</span><span class=\"n\">dag_kwargs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dag_kwargs&#39;</span><span class=\"p\">,</span> <span class=\"n\">key_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">op_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_dict_param</span><span class=\"p\">(</span><span class=\"n\">op_kwargs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;op_kwargs&#39;</span><span class=\"p\">,</span> <span class=\"n\">key_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n    <span class=\"n\">dag</span> <span class=\"o\">=</span> <span class=\"n\">DAG</span><span class=\"p\">(</span><span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"n\">dag_id</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"n\">dag_description</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">dag_kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">pipeline</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">build_pipeline_definition</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">mode</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"n\">get_default_mode_name</span><span class=\"p\">()</span>\n\n    <span class=\"n\">execution_plan</span> <span class=\"o\">=</span> <span class=\"n\">create_execution_plan</span><span class=\"p\">(</span>\n        <span class=\"n\">pipeline</span><span class=\"p\">,</span> <span class=\"n\">environment_dict</span><span class=\"p\">,</span> <span class=\"n\">run_config</span><span class=\"o\">=</span><span class=\"n\">RunConfig</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"n\">coalesced_plan</span> <span class=\"o\">=</span> <span class=\"n\">coalesce_execution_steps</span><span class=\"p\">(</span><span class=\"n\">execution_plan</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">solid_handle</span><span class=\"p\">,</span> <span class=\"n\">solid_steps</span> <span class=\"ow\">in</span> <span class=\"n\">coalesced_plan</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n\n        <span class=\"n\">step_keys</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">step</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"k\">for</span> <span class=\"n\">step</span> <span class=\"ow\">in</span> <span class=\"n\">solid_steps</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">operator</span> <span class=\"o\">==</span> <span class=\"n\">DagsterPythonOperator</span><span class=\"p\">:</span>\n            <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">operator</span><span class=\"p\">(</span>\n                <span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n                <span class=\"n\">pipeline_name</span><span class=\"o\">=</span><span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n                <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n                <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span>\n                <span class=\"n\">task_id</span><span class=\"o\">=</span><span class=\"n\">solid_handle</span><span class=\"p\">,</span>\n                <span class=\"n\">step_keys</span><span class=\"o\">=</span><span class=\"n\">step_keys</span><span class=\"p\">,</span>\n                <span class=\"n\">dag</span><span class=\"o\">=</span><span class=\"n\">dag</span><span class=\"p\">,</span>\n                <span class=\"n\">instance_ref</span><span class=\"o\">=</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">get_ref</span><span class=\"p\">(),</span>\n                <span class=\"o\">**</span><span class=\"n\">op_kwargs</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">operator</span><span class=\"p\">(</span>\n                <span class=\"n\">pipeline_name</span><span class=\"o\">=</span><span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n                <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n                <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span>\n                <span class=\"n\">task_id</span><span class=\"o\">=</span><span class=\"n\">solid_handle</span><span class=\"p\">,</span>\n                <span class=\"n\">step_keys</span><span class=\"o\">=</span><span class=\"n\">step_keys</span><span class=\"p\">,</span>\n                <span class=\"n\">dag</span><span class=\"o\">=</span><span class=\"n\">dag</span><span class=\"p\">,</span>\n                <span class=\"n\">instance_ref</span><span class=\"o\">=</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">get_ref</span><span class=\"p\">(),</span>\n                <span class=\"o\">**</span><span class=\"n\">op_kwargs</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">solid_handle</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">task</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">solid_step</span> <span class=\"ow\">in</span> <span class=\"n\">solid_steps</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">step_input</span> <span class=\"ow\">in</span> <span class=\"n\">solid_step</span><span class=\"o\">.</span><span class=\"n\">step_inputs</span><span class=\"p\">:</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">step_input</span><span class=\"o\">.</span><span class=\"n\">dependency_keys</span><span class=\"p\">:</span>\n                    <span class=\"n\">prev_solid_handle</span> <span class=\"o\">=</span> <span class=\"n\">execution_plan</span><span class=\"o\">.</span><span class=\"n\">get_step_by_key</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">solid_handle</span><span class=\"o\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n                    <span class=\"k\">if</span> <span class=\"n\">solid_handle</span> <span class=\"o\">!=</span> <span class=\"n\">prev_solid_handle</span><span class=\"p\">:</span>\n                        <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">prev_solid_handle</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">set_downstream</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">dag</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"n\">solid_handle</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">solid_handle</span> <span class=\"ow\">in</span> <span class=\"n\">coalesced_plan</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()])</span>\n\n\n<div class=\"viewcode-block\" id=\"make_airflow_dag\"><a class=\"viewcode-back\" href=\"../../../sections/api/apidocs/dagster_airflow/#dagster_airflow.make_airflow_dag\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">make_airflow_dag</span><span class=\"p\">(</span>\n    <span class=\"n\">module_name</span><span class=\"p\">,</span>\n    <span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n    <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_description</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">op_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Construct an Airflow DAG corresponding to a given Dagster pipeline.</span>\n\n<span class=\"sd\">    Tasks in the resulting DAG will execute the Dagster logic they encapsulate as a Python</span>\n<span class=\"sd\">    callable, run by an underlying :py:class:`PythonOperator &lt;airflow:PythonOperator&gt;`. As a</span>\n<span class=\"sd\">    consequence, both dagster, any Python dependencies required by your solid logic, and the module</span>\n<span class=\"sd\">    containing your pipeline definition must be available in the Python environment within which</span>\n<span class=\"sd\">    your Airflow tasks execute. If you cannot install requirements into this environment, or you</span>\n<span class=\"sd\">    are looking for a containerized solution to provide better isolation, see instead</span>\n<span class=\"sd\">    :py:func:`make_airflow_dag_containerized`.</span>\n\n<span class=\"sd\">    This function should be invoked in an Airflow DAG definition file, such as that created by an</span>\n<span class=\"sd\">    invocation of the dagster-airflow scaffold CLI tool.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        module_name (str): The name of the importable module in which the pipeline definition can be</span>\n<span class=\"sd\">            found.</span>\n<span class=\"sd\">        pipeline_name (str): The name of the pipeline definition.</span>\n<span class=\"sd\">        environment_dict (Optional[dict]): The environment config, if any, with which to compile</span>\n<span class=\"sd\">            the pipeline to an execution plan, as a Python dict.</span>\n<span class=\"sd\">        mode (Optional[str]): The mode in which to execute the pipeline.</span>\n<span class=\"sd\">        instance (Optional[DagsterInstance]): The Dagster instance to use to execute the pipeline.</span>\n<span class=\"sd\">        dag_id (Optional[str]): The id to use for the compiled Airflow DAG (passed through to</span>\n<span class=\"sd\">            :py:class:`DAG &lt;airflow:airflow.models.DAG&gt;`).</span>\n<span class=\"sd\">        dag_description (Optional[str]): The description to use for the compiled Airflow DAG</span>\n<span class=\"sd\">            (passed through to :py:class:`DAG &lt;airflow:airflow.models.DAG&gt;`)</span>\n<span class=\"sd\">        dag_kwargs (Optional[dict]): Any additional kwargs to pass to the Airflow</span>\n<span class=\"sd\">            :py:class:`DAG &lt;airflow:airflow.models.DAG&gt;` constructor, including ``default_args``.</span>\n<span class=\"sd\">        op_kwargs (Optional[dict]): Any additional kwargs to pass to the underlying Airflow</span>\n<span class=\"sd\">            operator (a subclass of</span>\n<span class=\"sd\">            :py:class:`PythonOperator &lt;airflow:airflow.operators.python_operator.PythonOperator&gt;`).</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        (airflow.models.DAG, List[airflow.models.BaseOperator]): The generated Airflow DAG, and a</span>\n<span class=\"sd\">        list of its constituent tasks.</span>\n\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">str_param</span><span class=\"p\">(</span><span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"s1\">&#39;module_name&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"n\">ExecutionTargetHandle</span><span class=\"o\">.</span><span class=\"n\">for_pipeline_module</span><span class=\"p\">(</span><span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">pipeline_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">_make_airflow_dag</span><span class=\"p\">(</span>\n        <span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n        <span class=\"n\">pipeline_name</span><span class=\"o\">=</span><span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n        <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span>\n        <span class=\"n\">instance</span><span class=\"o\">=</span><span class=\"n\">instance</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"n\">dag_id</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_description</span><span class=\"o\">=</span><span class=\"n\">dag_description</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_kwargs</span><span class=\"o\">=</span><span class=\"n\">dag_kwargs</span><span class=\"p\">,</span>\n        <span class=\"n\">op_kwargs</span><span class=\"o\">=</span><span class=\"n\">op_kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">make_airflow_dag_for_handle</span><span class=\"p\">(</span>\n    <span class=\"n\">handle</span><span class=\"p\">,</span>\n    <span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n    <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_description</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">op_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">_make_airflow_dag</span><span class=\"p\">(</span>\n        <span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n        <span class=\"n\">pipeline_name</span><span class=\"o\">=</span><span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n        <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"n\">dag_id</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_description</span><span class=\"o\">=</span><span class=\"n\">dag_description</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_kwargs</span><span class=\"o\">=</span><span class=\"n\">dag_kwargs</span><span class=\"p\">,</span>\n        <span class=\"n\">op_kwargs</span><span class=\"o\">=</span><span class=\"n\">op_kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"make_airflow_dag_containerized\"><a class=\"viewcode-back\" href=\"../../../sections/api/apidocs/dagster_airflow/#dagster_airflow.make_airflow_dag_containerized\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">make_airflow_dag_containerized</span><span class=\"p\">(</span>\n    <span class=\"n\">module_name</span><span class=\"p\">,</span>\n    <span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n    <span class=\"n\">image</span><span class=\"p\">,</span>\n    <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_description</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">op_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Construct a containerized Airflow DAG corresponding to a given Dagster pipeline.</span>\n\n<span class=\"sd\">    Tasks in the resulting DAG will execute the Dagster logic they encapsulate by calling the</span>\n<span class=\"sd\">    dagster-graphql API exposed by a container run using a subclass of</span>\n<span class=\"sd\">    :py:class:`DockerOperator &lt;airflow:airflow.operators.docker_operator.DockerOperator&gt;`. As a</span>\n<span class=\"sd\">    consequence, both dagster, any Python dependencies required by your solid logic, and the module</span>\n<span class=\"sd\">    containing your pipeline definition must be available in the container spun up by this operator.</span>\n<span class=\"sd\">    Typically you&#39;ll want to install these requirements onto the image you&#39;re using.</span>\n\n<span class=\"sd\">    This function should be invoked in an Airflow DAG definition file, such as that created by an</span>\n<span class=\"sd\">    invocation of the dagster-airflow scaffold CLI tool.</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        module_name (str): The name of the importable module in which the pipeline definition can be</span>\n<span class=\"sd\">            found.</span>\n<span class=\"sd\">        pipeline_name (str): The name of the pipeline definition.</span>\n<span class=\"sd\">        image (str): The name of the Docker image to use for execution (passed through to</span>\n<span class=\"sd\">            :py:class:`DockerOperator &lt;airflow:airflow.operators.docker_operator.DockerOperator&gt;`).</span>\n<span class=\"sd\">        environment_dict (Optional[dict]): The environment config, if any, with which to compile</span>\n<span class=\"sd\">            the pipeline to an execution plan, as a Python dict.</span>\n<span class=\"sd\">        mode (Optional[str]): The mode in which to execute the pipeline.</span>\n<span class=\"sd\">        instance (Optional[DagsterInstance]): The Dagster instance to use to execute the pipeline.</span>\n<span class=\"sd\">        dag_id (Optional[str]): The id to use for the compiled Airflow DAG (passed through to</span>\n<span class=\"sd\">            :py:class:`DAG &lt;airflow:airflow.models.DAG&gt;`).</span>\n<span class=\"sd\">        dag_description (Optional[str]): The description to use for the compiled Airflow DAG</span>\n<span class=\"sd\">            (passed through to :py:class:`DAG &lt;airflow:airflow.models.DAG&gt;`)</span>\n<span class=\"sd\">        dag_kwargs (Optional[dict]): Any additional kwargs to pass to the Airflow</span>\n<span class=\"sd\">            :py:class:`DAG &lt;airflow:airflow.models.DAG&gt;` constructor, including ``default_args``.</span>\n<span class=\"sd\">        op_kwargs (Optional[dict]): Any additional kwargs to pass to the underlying Airflow</span>\n<span class=\"sd\">            operator (a subclass of</span>\n<span class=\"sd\">            :py:class:`DockerOperator &lt;airflow:airflow.operators.docker_operator.DockerOperator&gt;`).</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        (airflow.models.DAG, List[airflow.models.BaseOperator]): The generated Airflow DAG, and a</span>\n<span class=\"sd\">        list of its constituent tasks.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">str_param</span><span class=\"p\">(</span><span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"s1\">&#39;module_name&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"n\">ExecutionTargetHandle</span><span class=\"o\">.</span><span class=\"n\">for_pipeline_module</span><span class=\"p\">(</span><span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">pipeline_name</span><span class=\"p\">)</span>\n\n    <span class=\"n\">op_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_dict_param</span><span class=\"p\">(</span><span class=\"n\">op_kwargs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;op_kwargs&#39;</span><span class=\"p\">,</span> <span class=\"n\">key_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">op_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;image&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">image</span>\n    <span class=\"k\">return</span> <span class=\"n\">_make_airflow_dag</span><span class=\"p\">(</span>\n        <span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n        <span class=\"n\">pipeline_name</span><span class=\"o\">=</span><span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n        <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"n\">dag_id</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_description</span><span class=\"o\">=</span><span class=\"n\">dag_description</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_kwargs</span><span class=\"o\">=</span><span class=\"n\">dag_kwargs</span><span class=\"p\">,</span>\n        <span class=\"n\">op_kwargs</span><span class=\"o\">=</span><span class=\"n\">op_kwargs</span><span class=\"p\">,</span>\n        <span class=\"n\">operator</span><span class=\"o\">=</span><span class=\"n\">DagsterDockerOperator</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">make_airflow_dag_containerized_for_handle</span><span class=\"p\">(</span>\n    <span class=\"n\">handle</span><span class=\"p\">,</span>\n    <span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n    <span class=\"n\">image</span><span class=\"p\">,</span>\n    <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_description</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">op_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">op_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_dict_param</span><span class=\"p\">(</span><span class=\"n\">op_kwargs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;op_kwargs&#39;</span><span class=\"p\">,</span> <span class=\"n\">key_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">op_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;image&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">image</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">_make_airflow_dag</span><span class=\"p\">(</span>\n        <span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n        <span class=\"n\">pipeline_name</span><span class=\"o\">=</span><span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n        <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"n\">dag_id</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_description</span><span class=\"o\">=</span><span class=\"n\">dag_description</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_kwargs</span><span class=\"o\">=</span><span class=\"n\">dag_kwargs</span><span class=\"p\">,</span>\n        <span class=\"n\">op_kwargs</span><span class=\"o\">=</span><span class=\"n\">op_kwargs</span><span class=\"p\">,</span>\n        <span class=\"n\">operator</span><span class=\"o\">=</span><span class=\"n\">DagsterDockerOperator</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">make_airflow_dag_kubernetized_for_handle</span><span class=\"p\">(</span>\n    <span class=\"n\">handle</span><span class=\"p\">,</span>\n    <span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n    <span class=\"n\">image</span><span class=\"p\">,</span>\n    <span class=\"n\">namespace</span><span class=\"p\">,</span>\n    <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_description</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">dag_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">op_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">.operators.kubernetes_operator</span> <span class=\"kn\">import</span> <span class=\"n\">DagsterKubernetesPodOperator</span>\n\n    <span class=\"c1\"># See: https://github.com/dagster-io/dagster/issues/1663</span>\n    <span class=\"n\">op_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_dict_param</span><span class=\"p\">(</span><span class=\"n\">op_kwargs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;op_kwargs&#39;</span><span class=\"p\">,</span> <span class=\"n\">key_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">op_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;image&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">image</span>\n    <span class=\"n\">op_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;namespace&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">namespace</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">_make_airflow_dag</span><span class=\"p\">(</span>\n        <span class=\"n\">handle</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"p\">,</span>\n        <span class=\"n\">pipeline_name</span><span class=\"o\">=</span><span class=\"n\">pipeline_name</span><span class=\"p\">,</span>\n        <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n        <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_id</span><span class=\"o\">=</span><span class=\"n\">dag_id</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_description</span><span class=\"o\">=</span><span class=\"n\">dag_description</span><span class=\"p\">,</span>\n        <span class=\"n\">dag_kwargs</span><span class=\"o\">=</span><span class=\"n\">dag_kwargs</span><span class=\"p\">,</span>\n        <span class=\"n\">op_kwargs</span><span class=\"o\">=</span><span class=\"n\">op_kwargs</span><span class=\"p\">,</span>\n        <span class=\"n\">operator</span><span class=\"o\">=</span><span class=\"n\">DagsterKubernetesPodOperator</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre></div>",
  "current_page_name": "_modules/dagster_airflow/factory",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
