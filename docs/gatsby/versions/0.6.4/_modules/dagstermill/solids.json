{
  "parents": [{ "link": "../../", "title": "Module code" }],
  "title": "dagstermill.solids",
  "body": "<h1>Source code for dagstermill.solids</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">nbformat</span>\n<span class=\"kn\">import</span> <span class=\"nn\">papermill</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">from</span> <span class=\"nn\">papermill.engines</span> <span class=\"kn\">import</span> <span class=\"n\">papermill_engines</span>\n<span class=\"kn\">from</span> <span class=\"nn\">papermill.iorw</span> <span class=\"kn\">import</span> <span class=\"n\">load_notebook_node</span><span class=\"p\">,</span> <span class=\"n\">write_ipynb</span>\n<span class=\"kn\">from</span> <span class=\"nn\">papermill.parameterize</span> <span class=\"kn\">import</span> <span class=\"n\">_find_first_tagged_cell_index</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">EventMetadataEntry</span><span class=\"p\">,</span>\n    <span class=\"n\">ExecutionTargetHandle</span><span class=\"p\">,</span>\n    <span class=\"n\">InputDefinition</span><span class=\"p\">,</span>\n    <span class=\"n\">Materialization</span><span class=\"p\">,</span>\n    <span class=\"n\">Output</span><span class=\"p\">,</span>\n    <span class=\"n\">OutputDefinition</span><span class=\"p\">,</span>\n    <span class=\"n\">SolidDefinition</span><span class=\"p\">,</span>\n    <span class=\"n\">check</span><span class=\"p\">,</span>\n    <span class=\"n\">seven</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.config.field_utils</span> <span class=\"kn\">import</span> <span class=\"n\">check_user_facing_opt_config_param</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.errors</span> <span class=\"kn\">import</span> <span class=\"n\">user_code_error_boundary</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.execution.context.compute</span> <span class=\"kn\">import</span> <span class=\"n\">ComputeExecutionContext</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.execution.context.system</span> <span class=\"kn\">import</span> <span class=\"n\">SystemComputeExecutionContext</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.serdes</span> <span class=\"kn\">import</span> <span class=\"n\">pack_value</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.utils</span> <span class=\"kn\">import</span> <span class=\"n\">mkdir_p</span><span class=\"p\">,</span> <span class=\"n\">safe_tempfile_path</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.engine</span> <span class=\"kn\">import</span> <span class=\"n\">DagstermillNBConvertEngine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.errors</span> <span class=\"kn\">import</span> <span class=\"n\">DagstermillError</span><span class=\"p\">,</span> <span class=\"n\">DagstermillExecutionError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.serialize</span> <span class=\"kn\">import</span> <span class=\"n\">read_value</span><span class=\"p\">,</span> <span class=\"n\">write_value</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.translator</span> <span class=\"kn\">import</span> <span class=\"n\">RESERVED_INPUT_NAMES</span><span class=\"p\">,</span> <span class=\"n\">DagsterTranslator</span>\n\n\n<span class=\"c1\"># This is based on papermill.parameterize.parameterize_notebook</span>\n<span class=\"c1\"># Typically, papermill injects the injected-parameters cell *below* the parameters cell</span>\n<span class=\"c1\"># but we want to *replace* the parameters cell, which is what this function does.</span>\n<span class=\"k\">def</span> <span class=\"nf\">replace_parameters</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">nb</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Assigned parameters into the appropiate place in the input notebook</span>\n\n<span class=\"sd\">    Args:</span>\n<span class=\"sd\">        nb (NotebookNode): Executable notebook object</span>\n<span class=\"sd\">        parameters (dict): Arbitrary keyword arguments to pass to the notebook parameters.</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">dict_param</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">,</span> <span class=\"s1\">&#39;parameters&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Copy the nb object to avoid polluting the input</span>\n    <span class=\"n\">nb</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">nb</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># papermill method chooses translator based on kernel_name and language, but we just call the</span>\n    <span class=\"c1\"># DagsterTranslator to generate parameter content based on the kernel_name</span>\n    <span class=\"n\">param_content</span> <span class=\"o\">=</span> <span class=\"n\">DagsterTranslator</span><span class=\"o\">.</span><span class=\"n\">codify</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n\n    <span class=\"n\">newcell</span> <span class=\"o\">=</span> <span class=\"n\">nbformat</span><span class=\"o\">.</span><span class=\"n\">v4</span><span class=\"o\">.</span><span class=\"n\">new_code_cell</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">param_content</span><span class=\"p\">)</span>\n    <span class=\"n\">newcell</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"p\">[</span><span class=\"s1\">&#39;tags&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;injected-parameters&#39;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">param_cell_index</span> <span class=\"o\">=</span> <span class=\"n\">_find_first_tagged_cell_index</span><span class=\"p\">(</span><span class=\"n\">nb</span><span class=\"p\">,</span> <span class=\"s1\">&#39;parameters&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">injected_cell_index</span> <span class=\"o\">=</span> <span class=\"n\">_find_first_tagged_cell_index</span><span class=\"p\">(</span><span class=\"n\">nb</span><span class=\"p\">,</span> <span class=\"s1\">&#39;injected-parameters&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">injected_cell_index</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Replace the injected cell with a new version</span>\n        <span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">[:</span><span class=\"n\">injected_cell_index</span><span class=\"p\">]</span>\n        <span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">[</span><span class=\"n\">injected_cell_index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">:]</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">int_value_param</span><span class=\"p\">(</span><span class=\"n\">param_cell_index</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">&#39;param_cell_index&#39;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># We should have blown away the parameters cell if there is an injected-parameters cell</span>\n    <span class=\"k\">elif</span> <span class=\"n\">param_cell_index</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Replace the parameter cell with the injected-parameters cell</span>\n        <span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">[:</span><span class=\"n\">param_cell_index</span><span class=\"p\">]</span>\n        <span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">[</span><span class=\"n\">param_cell_index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">:]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Inject to the top of the notebook, presumably first cell includes dagstermill import</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span>\n            <span class=\"p\">(</span>\n                <span class=\"s1\">&#39;Executing notebook with no tagged parameters cell: injecting boilerplate in first &#39;</span>\n                <span class=\"s1\">&#39;cell.&#39;</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">[:</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n\n    <span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"n\">before</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">newcell</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">after</span>\n    <span class=\"n\">nb</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">papermill</span><span class=\"p\">[</span><span class=\"s1\">&#39;parameters&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">seven</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">nb</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_papermill_parameters</span><span class=\"p\">(</span><span class=\"n\">compute_context</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"n\">output_log_path</span><span class=\"p\">):</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">inst_param</span><span class=\"p\">(</span><span class=\"n\">compute_context</span><span class=\"p\">,</span> <span class=\"s1\">&#39;compute_context&#39;</span><span class=\"p\">,</span> <span class=\"n\">SystemComputeExecutionContext</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">param_invariant</span><span class=\"p\">(</span>\n        <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">),</span>\n        <span class=\"s1\">&#39;compute_context&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;SystemComputeExecutionContext must have valid environment_dict&#39;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">dict_param</span><span class=\"p\">(</span><span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;inputs&#39;</span><span class=\"p\">,</span> <span class=\"n\">key_type</span><span class=\"o\">=</span><span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">string_types</span><span class=\"p\">)</span>\n\n    <span class=\"n\">run_id</span> <span class=\"o\">=</span> <span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">run_id</span>\n\n    <span class=\"n\">marshal_dir</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/tmp/dagstermill/</span><span class=\"si\">{run_id}</span><span class=\"s1\">/marshal&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"n\">run_id</span><span class=\"p\">)</span>\n    <span class=\"n\">mkdir_p</span><span class=\"p\">(</span><span class=\"n\">marshal_dir</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">,</span> <span class=\"n\">solid_subset</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">ExecutionTargetHandle</span><span class=\"o\">.</span><span class=\"n\">get_handle</span><span class=\"p\">(</span><span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">pipeline_def</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">handle</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">DagstermillError</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;Can</span><span class=\"se\">\\&#39;</span><span class=\"s1\">t execute a dagstermill solid from a pipeline that wasn</span><span class=\"se\">\\&#39;</span><span class=\"s1\">t instantiated using &#39;</span>\n            <span class=\"s1\">&#39;an ExecutionTargetHandle&#39;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"n\">dm_handle_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">_asdict</span><span class=\"p\">()</span>\n\n    <span class=\"n\">dm_handle_kwargs</span><span class=\"p\">[</span><span class=\"s1\">&#39;pipeline_name&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">pipeline_def</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n    <span class=\"n\">dm_context_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">&#39;output_log_path&#39;</span><span class=\"p\">:</span> <span class=\"n\">output_log_path</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;marshal_dir&#39;</span><span class=\"p\">:</span> <span class=\"n\">marshal_dir</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;environment_dict&#39;</span><span class=\"p\">:</span> <span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">dm_solid_handle_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">solid_handle</span><span class=\"o\">.</span><span class=\"n\">_asdict</span><span class=\"p\">()</span>\n\n    <span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"n\">input_def_dict</span> <span class=\"o\">=</span> <span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">solid_def</span><span class=\"o\">.</span><span class=\"n\">input_dict</span>\n    <span class=\"k\">for</span> <span class=\"n\">input_name</span><span class=\"p\">,</span> <span class=\"n\">input_value</span> <span class=\"ow\">in</span> <span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"k\">assert</span> <span class=\"p\">(</span>\n            <span class=\"n\">input_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">RESERVED_INPUT_NAMES</span>\n        <span class=\"p\">),</span> <span class=\"s1\">&#39;Dagstermill solids cannot have inputs named </span><span class=\"si\">{input_name}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">input_name</span><span class=\"o\">=</span><span class=\"n\">input_name</span><span class=\"p\">)</span>\n        <span class=\"n\">runtime_type</span> <span class=\"o\">=</span> <span class=\"n\">input_def_dict</span><span class=\"p\">[</span><span class=\"n\">input_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">runtime_type</span>\n        <span class=\"n\">parameter_value</span> <span class=\"o\">=</span> <span class=\"n\">write_value</span><span class=\"p\">(</span>\n            <span class=\"n\">runtime_type</span><span class=\"p\">,</span> <span class=\"n\">input_value</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">marshal_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;input-</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">input_name</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"n\">input_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">parameter_value</span>\n\n    <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s1\">&#39;__dm_context&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dm_context_dict</span>\n    <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s1\">&#39;__dm_handle_kwargs&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dm_handle_kwargs</span>\n    <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s1\">&#39;__dm_pipeline_run_dict&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pack_value</span><span class=\"p\">(</span><span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">pipeline_run</span><span class=\"p\">)</span>\n    <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s1\">&#39;__dm_solid_handle_kwargs&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dm_solid_handle_kwargs</span>\n    <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s1\">&#39;__dm_solid_subset&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">solid_subset</span>\n    <span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"s1\">&#39;__dm_instance_ref_dict&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">pack_value</span><span class=\"p\">(</span><span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">get_ref</span><span class=\"p\">())</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">parameters</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_dm_solid_compute</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">notebook_path</span><span class=\"p\">):</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">str_param</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">str_param</span><span class=\"p\">(</span><span class=\"n\">notebook_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;notebook_path&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_t_fn</span><span class=\"p\">(</span><span class=\"n\">compute_context</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">):</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">inst_param</span><span class=\"p\">(</span><span class=\"n\">compute_context</span><span class=\"p\">,</span> <span class=\"s1\">&#39;compute_context&#39;</span><span class=\"p\">,</span> <span class=\"n\">ComputeExecutionContext</span><span class=\"p\">)</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">param_invariant</span><span class=\"p\">(</span>\n            <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">),</span>\n            <span class=\"s1\">&#39;context&#39;</span><span class=\"p\">,</span>\n            <span class=\"s1\">&#39;SystemComputeExecutionContext must have valid environment_dict&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">system_compute_context</span> <span class=\"o\">=</span> <span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">get_system_context</span><span class=\"p\">()</span>\n\n        <span class=\"n\">base_dir</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/tmp/dagstermill/</span><span class=\"si\">{run_id}</span><span class=\"s1\">/&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"n\">compute_context</span><span class=\"o\">.</span><span class=\"n\">run_id</span><span class=\"p\">)</span>\n        <span class=\"n\">output_notebook_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">base_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;output_notebooks/&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">mkdir_p</span><span class=\"p\">(</span><span class=\"n\">output_notebook_dir</span><span class=\"p\">)</span>\n\n        <span class=\"n\">temp_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n            <span class=\"n\">output_notebook_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"si\">{prefix}</span><span class=\"s1\">-out.ipynb&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">()))</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">with</span> <span class=\"n\">safe_tempfile_path</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">output_log_path</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Scaffold the registration here</span>\n            <span class=\"n\">nb</span> <span class=\"o\">=</span> <span class=\"n\">load_notebook_node</span><span class=\"p\">(</span><span class=\"n\">notebook_path</span><span class=\"p\">)</span>\n            <span class=\"n\">nb_no_parameters</span> <span class=\"o\">=</span> <span class=\"n\">replace_parameters</span><span class=\"p\">(</span>\n                <span class=\"n\">system_compute_context</span><span class=\"p\">,</span>\n                <span class=\"n\">nb</span><span class=\"p\">,</span>\n                <span class=\"n\">get_papermill_parameters</span><span class=\"p\">(</span><span class=\"n\">system_compute_context</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"n\">output_log_path</span><span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">intermediate_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n                <span class=\"n\">output_notebook_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;</span><span class=\"si\">{prefix}</span><span class=\"s1\">-inter.ipynb&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">()))</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">write_ipynb</span><span class=\"p\">(</span><span class=\"n\">nb_no_parameters</span><span class=\"p\">,</span> <span class=\"n\">intermediate_path</span><span class=\"p\">)</span>\n\n            <span class=\"k\">with</span> <span class=\"n\">user_code_error_boundary</span><span class=\"p\">(</span>\n                <span class=\"n\">DagstermillExecutionError</span><span class=\"p\">,</span>\n                <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;Error occurred during the execution of Dagstermill solid &#39;</span>\n                    <span class=\"s1\">&#39;</span><span class=\"si\">{solid_name}</span><span class=\"s1\">: </span><span class=\"si\">{notebook_path}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                        <span class=\"n\">solid_name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">notebook_path</span><span class=\"o\">=</span><span class=\"n\">notebook_path</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">):</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">papermill_engines</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"s1\">&#39;dagstermill&#39;</span><span class=\"p\">,</span> <span class=\"n\">DagstermillNBConvertEngine</span><span class=\"p\">)</span>\n                    <span class=\"n\">papermill</span><span class=\"o\">.</span><span class=\"n\">execute_notebook</span><span class=\"p\">(</span>\n                        <span class=\"n\">intermediate_path</span><span class=\"p\">,</span> <span class=\"n\">temp_path</span><span class=\"p\">,</span> <span class=\"n\">engine_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;dagstermill&#39;</span><span class=\"p\">,</span> <span class=\"n\">log_output</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n                    <span class=\"k\">yield</span> <span class=\"n\">Materialization</span><span class=\"p\">(</span>\n                        <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;output_notebook&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;Location of output notebook on the filesystem&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">metadata_entries</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">EventMetadataEntry</span><span class=\"o\">.</span><span class=\"n\">fspath</span><span class=\"p\">(</span><span class=\"n\">temp_path</span><span class=\"p\">)],</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">exc</span>\n\n            <span class=\"c1\"># deferred import for perf</span>\n            <span class=\"kn\">import</span> <span class=\"nn\">scrapbook</span>\n\n            <span class=\"n\">output_nb</span> <span class=\"o\">=</span> <span class=\"n\">scrapbook</span><span class=\"o\">.</span><span class=\"n\">read_notebook</span><span class=\"p\">(</span><span class=\"n\">temp_path</span><span class=\"p\">)</span>\n\n            <span class=\"n\">system_compute_context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;Notebook execution complete for </span><span class=\"si\">{name}</span><span class=\"s1\">. Data is </span><span class=\"si\">{data}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">output_nb</span><span class=\"o\">.</span><span class=\"n\">scraps</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">yield</span> <span class=\"n\">Materialization</span><span class=\"p\">(</span>\n                <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;output_notebook&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;Location of output notebook on the filesystem&#39;</span><span class=\"p\">,</span>\n                <span class=\"n\">metadata_entries</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">EventMetadataEntry</span><span class=\"o\">.</span><span class=\"n\">fspath</span><span class=\"p\">(</span><span class=\"n\">temp_path</span><span class=\"p\">)],</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">output_name</span><span class=\"p\">,</span> <span class=\"n\">output_def</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">system_compute_context</span><span class=\"o\">.</span><span class=\"n\">solid_def</span><span class=\"o\">.</span><span class=\"n\">output_dict</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">data_dict</span> <span class=\"o\">=</span> <span class=\"n\">output_nb</span><span class=\"o\">.</span><span class=\"n\">scraps</span><span class=\"o\">.</span><span class=\"n\">data_dict</span>\n                <span class=\"k\">if</span> <span class=\"n\">output_name</span> <span class=\"ow\">in</span> <span class=\"n\">data_dict</span><span class=\"p\">:</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">read_value</span><span class=\"p\">(</span><span class=\"n\">output_def</span><span class=\"o\">.</span><span class=\"n\">runtime_type</span><span class=\"p\">,</span> <span class=\"n\">data_dict</span><span class=\"p\">[</span><span class=\"n\">output_name</span><span class=\"p\">])</span>\n\n                    <span class=\"k\">yield</span> <span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">output_name</span><span class=\"p\">)</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">output_nb</span><span class=\"o\">.</span><span class=\"n\">scraps</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;event-&#39;</span><span class=\"p\">):</span>\n                    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n                        <span class=\"k\">yield</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">_t_fn</span>\n\n\n<div class=\"viewcode-block\" id=\"define_dagstermill_solid\"><a class=\"viewcode-back\" href=\"../../../sections/api/apidocs/dagstermill/#dagstermill.define_dagstermill_solid\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">define_dagstermill_solid</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"n\">notebook_path</span><span class=\"p\">,</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">required_resource_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">&#39;&#39;&#39;Wrap a Jupyter notebook in a solid.</span>\n\n<span class=\"sd\">    Arguments:</span>\n<span class=\"sd\">        name (str): The name of the solid.</span>\n<span class=\"sd\">        notebook_path (str): Path to the backing notebook.</span>\n<span class=\"sd\">        input_defs (Optional[list[:class:`dagster.InputDefinition`]]): The solid&#39;s inputs.</span>\n<span class=\"sd\">        output_defs (Optional[list[:class:`dagster.OutputDefinition`]]): The solid&#39;s outputs.</span>\n<span class=\"sd\">        required_resource_keys (Optional[set[str]]): The string names of any required resources.</span>\n\n<span class=\"sd\">    Returns:</span>\n<span class=\"sd\">        :class:`dagster.SolidDefinition`</span>\n<span class=\"sd\">    &#39;&#39;&#39;</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">str_param</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s1\">&#39;name&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">str_param</span><span class=\"p\">(</span><span class=\"n\">notebook_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;notebook_path&#39;</span><span class=\"p\">)</span>\n    <span class=\"n\">input_defs</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_list_param</span><span class=\"p\">(</span><span class=\"n\">input_defs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;input_defs&#39;</span><span class=\"p\">,</span> <span class=\"n\">of_type</span><span class=\"o\">=</span><span class=\"n\">InputDefinition</span><span class=\"p\">)</span>\n    <span class=\"n\">output_defs</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_list_param</span><span class=\"p\">(</span><span class=\"n\">output_defs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;output_defs&#39;</span><span class=\"p\">,</span> <span class=\"n\">of_type</span><span class=\"o\">=</span><span class=\"n\">OutputDefinition</span><span class=\"p\">)</span>\n    <span class=\"n\">required_resource_keys</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_set_param</span><span class=\"p\">(</span>\n        <span class=\"n\">required_resource_keys</span><span class=\"p\">,</span> <span class=\"s1\">&#39;required_resource_keys&#39;</span><span class=\"p\">,</span> <span class=\"n\">of_type</span><span class=\"o\">=</span><span class=\"nb\">str</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">SolidDefinition</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"n\">input_defs</span><span class=\"p\">,</span>\n        <span class=\"n\">compute_fn</span><span class=\"o\">=</span><span class=\"n\">_dm_solid_compute</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">notebook_path</span><span class=\"p\">),</span>\n        <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"n\">output_defs</span><span class=\"p\">,</span>\n        <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">check_user_facing_opt_config_param</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"s1\">&#39;config&#39;</span><span class=\"p\">),</span>\n        <span class=\"n\">required_resource_keys</span><span class=\"o\">=</span><span class=\"n\">required_resource_keys</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;This solid is backed by the notebook at </span><span class=\"si\">{path}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">notebook_path</span><span class=\"p\">),</span>\n        <span class=\"n\">metadata</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;notebook_path&#39;</span><span class=\"p\">:</span> <span class=\"n\">notebook_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;kind&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;ipynb&#39;</span><span class=\"p\">},</span>\n    <span class=\"p\">)</span></div>\n</pre></div>",
  "current_page_name": "_modules/dagstermill/solids",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
