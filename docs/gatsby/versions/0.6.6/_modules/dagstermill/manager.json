{
  "parents": [{ "link": "../../", "title": "Module code" }],
  "title": "dagstermill.manager",
  "body": "<h1>Source code for dagstermill.manager</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n<span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n<span class=\"kn\">from</span> <span class=\"nn\">contextlib</span> <span class=\"kn\">import</span> <span class=\"n\">contextmanager</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">ExpectationResult</span><span class=\"p\">,</span>\n    <span class=\"n\">Failure</span><span class=\"p\">,</span>\n    <span class=\"n\">Materialization</span><span class=\"p\">,</span>\n    <span class=\"n\">ModeDefinition</span><span class=\"p\">,</span>\n    <span class=\"n\">PipelineDefinition</span><span class=\"p\">,</span>\n    <span class=\"n\">SolidDefinition</span><span class=\"p\">,</span>\n    <span class=\"n\">TypeCheck</span><span class=\"p\">,</span>\n    <span class=\"n\">check</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.cli</span> <span class=\"kn\">import</span> <span class=\"n\">load_handle</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.definitions.dependency</span> <span class=\"kn\">import</span> <span class=\"n\">SolidHandle</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.execution.api</span> <span class=\"kn\">import</span> <span class=\"n\">create_execution_plan</span><span class=\"p\">,</span> <span class=\"n\">scoped_pipeline_context</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.execution.context_creation_pipeline</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">ResourcesStack</span><span class=\"p\">,</span>\n    <span class=\"n\">get_required_resource_keys_to_init</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.instance</span> <span class=\"kn\">import</span> <span class=\"n\">DagsterInstance</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.serdes</span> <span class=\"kn\">import</span> <span class=\"n\">unpack_value</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.core.storage.pipeline_run</span> <span class=\"kn\">import</span> <span class=\"n\">PipelineRun</span><span class=\"p\">,</span> <span class=\"n\">PipelineRunStatus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.loggers</span> <span class=\"kn\">import</span> <span class=\"n\">colored_console_logger</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.context</span> <span class=\"kn\">import</span> <span class=\"n\">DagstermillExecutionContext</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.errors</span> <span class=\"kn\">import</span> <span class=\"n\">DagstermillError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.serialize</span> <span class=\"kn\">import</span> <span class=\"n\">PICKLE_PROTOCOL</span><span class=\"p\">,</span> <span class=\"n\">read_value</span><span class=\"p\">,</span> <span class=\"n\">write_value</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Manager</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pipeline_def</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_def</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">in_pipeline</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">marshal_dir</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resources_stack</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"nd\">@contextmanager</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_setup_resources</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pipeline_def</span><span class=\"p\">,</span> <span class=\"n\">environment_config</span><span class=\"p\">,</span> <span class=\"n\">pipeline_run</span><span class=\"p\">,</span> <span class=\"n\">log_manager</span><span class=\"p\">,</span> <span class=\"n\">resource_keys_to_init</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;This context manager is a drop-in replacement for</span>\n<span class=\"sd\">        dagster.core.execution.context_creation_pipeline.create_resources. It uses the Manager&#39;s</span>\n<span class=\"sd\">        instance of ResourceStack to create resources, but does not tear them down when the</span>\n<span class=\"sd\">        context manager returns -- teardown must be managed manually using Manager.teardown().</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n\n        <span class=\"c1\"># pylint: disable=protected-access</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resources_stack</span> <span class=\"o\">=</span> <span class=\"n\">ResourcesStack</span><span class=\"p\">(</span>\n            <span class=\"n\">pipeline_def</span><span class=\"p\">,</span> <span class=\"n\">environment_config</span><span class=\"p\">,</span> <span class=\"n\">pipeline_run</span><span class=\"p\">,</span> <span class=\"n\">log_manager</span><span class=\"p\">,</span> <span class=\"n\">resource_keys_to_init</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resources_stack</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">reconstitute_pipeline_context</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">output_log_path</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">marshal_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">handle_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">pipeline_run_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">solid_subset</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">solid_handle_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">instance_ref_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Reconstitutes a context for dagstermill-managed execution.</span>\n\n<span class=\"sd\">        You&#39;ll see this function called to reconstruct a pipeline context within the ``injected</span>\n<span class=\"sd\">        parameters`` cell of a dagstermill output notebook. Users should not call this function</span>\n<span class=\"sd\">        interactively except when debugging output notebooks.</span>\n\n<span class=\"sd\">        Use :func:`dagstermill.get_context` in the ``parameters`` cell of your notebook to define a</span>\n<span class=\"sd\">        context for interactive exploration and development. This call will be replaced by one to</span>\n<span class=\"sd\">        :func:`dagstermill.reconstitute_pipeline_context` when the notebook is executed by</span>\n<span class=\"sd\">        dagstermill.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_str_param</span><span class=\"p\">(</span><span class=\"n\">output_log_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;output_log_path&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_str_param</span><span class=\"p\">(</span><span class=\"n\">marshal_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;marshal_dir&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">environment_dict</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_dict_param</span><span class=\"p\">(</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span> <span class=\"s1\">&#39;environment_dict&#39;</span><span class=\"p\">,</span> <span class=\"n\">key_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">dict_param</span><span class=\"p\">(</span><span class=\"n\">pipeline_run_dict</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pipeline_run_dict&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">dict_param</span><span class=\"p\">(</span><span class=\"n\">handle_kwargs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;handle_kwargs&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_list_param</span><span class=\"p\">(</span><span class=\"n\">solid_subset</span><span class=\"p\">,</span> <span class=\"s1\">&#39;solid_subset&#39;</span><span class=\"p\">,</span> <span class=\"n\">of_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">dict_param</span><span class=\"p\">(</span><span class=\"n\">solid_handle_kwargs</span><span class=\"p\">,</span> <span class=\"s1\">&#39;solid_handle_kwargs&#39;</span><span class=\"p\">)</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">dict_param</span><span class=\"p\">(</span><span class=\"n\">instance_ref_dict</span><span class=\"p\">,</span> <span class=\"s1\">&#39;instance_ref_dict&#39;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">handle</span> <span class=\"o\">=</span> <span class=\"n\">load_handle</span><span class=\"o\">.</span><span class=\"n\">handle_for_pipeline_cli_args</span><span class=\"p\">(</span>\n                <span class=\"n\">handle_kwargs</span><span class=\"p\">,</span> <span class=\"n\">use_default_repository_yaml</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">CheckError</span><span class=\"p\">,</span> <span class=\"n\">load_handle</span><span class=\"o\">.</span><span class=\"n\">UsageError</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n            <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">raise_from</span><span class=\"p\">(</span>\n                <span class=\"n\">DagstermillError</span><span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;Cannot invoke a dagstermill solid from an in-memory pipeline that was not loaded &#39;</span>\n                    <span class=\"s1\">&#39;from an ExecutionTargetHandle. Run this pipeline using dagit, the dagster CLI, &#39;</span>\n                    <span class=\"s1\">&#39;through dagster-graphql, or in-memory after loading it through an &#39;</span>\n                    <span class=\"s1\">&#39;ExecutionTargetHandle.&#39;</span>\n                <span class=\"p\">),</span>\n                <span class=\"n\">err</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">instance_ref</span> <span class=\"o\">=</span> <span class=\"n\">unpack_value</span><span class=\"p\">(</span><span class=\"n\">instance_ref_dict</span><span class=\"p\">)</span>\n            <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">DagsterInstance</span><span class=\"o\">.</span><span class=\"n\">from_ref</span><span class=\"p\">(</span><span class=\"n\">instance_ref</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>  <span class=\"c1\"># pylint: disable=broad-except</span>\n            <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">raise_from</span><span class=\"p\">(</span>\n                <span class=\"n\">DagstermillError</span><span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;Error when attempting to resolve DagsterInstance from serialized InstanceRef&#39;</span>\n                <span class=\"p\">),</span>\n                <span class=\"n\">err</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">pipeline_def</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">inst_param</span><span class=\"p\">(</span>\n            <span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">build_pipeline_definition</span><span class=\"p\">(),</span>\n            <span class=\"s1\">&#39;pipeline_def (from handle </span><span class=\"si\">{handle_dict}</span><span class=\"s1\">)&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">handle_dict</span><span class=\"o\">=</span><span class=\"n\">handle</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">_asdict</span><span class=\"p\">()),</span>\n            <span class=\"n\">PipelineDefinition</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">build_sub_pipeline</span><span class=\"p\">(</span><span class=\"n\">solid_subset</span><span class=\"p\">)</span>\n\n        <span class=\"n\">solid_handle</span> <span class=\"o\">=</span> <span class=\"n\">SolidHandle</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">(</span><span class=\"n\">solid_handle_kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">solid_def</span> <span class=\"o\">=</span> <span class=\"n\">pipeline_def</span><span class=\"o\">.</span><span class=\"n\">get_solid</span><span class=\"p\">(</span><span class=\"n\">solid_handle</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">definition</span>\n\n        <span class=\"n\">pipeline_run</span> <span class=\"o\">=</span> <span class=\"n\">unpack_value</span><span class=\"p\">(</span><span class=\"n\">pipeline_run_dict</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">marshal_dir</span> <span class=\"o\">=</span> <span class=\"n\">marshal_dir</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">in_pipeline</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_def</span> <span class=\"o\">=</span> <span class=\"n\">solid_def</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pipeline_def</span> <span class=\"o\">=</span> <span class=\"n\">pipeline_def</span>\n\n        <span class=\"n\">execution_plan</span> <span class=\"o\">=</span> <span class=\"n\">create_execution_plan</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pipeline_def</span><span class=\"p\">,</span> <span class=\"n\">environment_dict</span><span class=\"p\">,</span> <span class=\"n\">pipeline_run</span><span class=\"p\">)</span>\n\n        <span class=\"k\">with</span> <span class=\"n\">scoped_pipeline_context</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pipeline_def</span><span class=\"p\">,</span>\n            <span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n            <span class=\"n\">pipeline_run</span><span class=\"p\">,</span>\n            <span class=\"n\">instance</span><span class=\"p\">,</span>\n            <span class=\"n\">execution_plan</span><span class=\"p\">,</span>\n            <span class=\"n\">scoped_resources_builder_cm</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup_resources</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">pipeline_context</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">DagstermillExecutionContext</span><span class=\"p\">(</span>\n                <span class=\"n\">pipeline_context</span><span class=\"o\">=</span><span class=\"n\">pipeline_context</span><span class=\"p\">,</span>\n                <span class=\"n\">solid_config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n                <span class=\"n\">resource_keys_to_init</span><span class=\"o\">=</span><span class=\"n\">get_required_resource_keys_to_init</span><span class=\"p\">(</span>\n                    <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_def</span><span class=\"p\">],</span> <span class=\"n\">pipeline_context</span><span class=\"o\">.</span><span class=\"n\">system_storage_def</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">solid_config</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mode_def</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Get a dagstermill execution context for interactive exploration and development.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            solid_config (Optional[Any]): If specified, this value will be made available on the</span>\n<span class=\"sd\">                context as its ``solid_config`` property.</span>\n<span class=\"sd\">            mode_def (Optional[:class:`dagster.ModeDefinition`]): If specified, defines the mode to</span>\n<span class=\"sd\">                use to construct the context. Specify this if you would like a context constructed</span>\n<span class=\"sd\">                with specific ``resource_defs`` or ``logger_defs``. By default, an ephemeral mode</span>\n<span class=\"sd\">                with a console logger will be constructed.</span>\n<span class=\"sd\">            environment_dict(Optional[dict]): The environment config dict with which to construct</span>\n<span class=\"sd\">                the context.</span>\n\n<span class=\"sd\">        Returns:</span>\n<span class=\"sd\">            :class:`dagstermill.DagstermillExecutionContext`</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_inst_param</span><span class=\"p\">(</span><span class=\"n\">mode_def</span><span class=\"p\">,</span> <span class=\"s1\">&#39;mode_def&#39;</span><span class=\"p\">,</span> <span class=\"n\">ModeDefinition</span><span class=\"p\">)</span>\n        <span class=\"n\">environment_dict</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">opt_dict_param</span><span class=\"p\">(</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span> <span class=\"s1\">&#39;environment_dict&#39;</span><span class=\"p\">,</span> <span class=\"n\">key_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">mode_def</span><span class=\"p\">:</span>\n            <span class=\"n\">mode_def</span> <span class=\"o\">=</span> <span class=\"n\">ModeDefinition</span><span class=\"p\">(</span><span class=\"n\">logger_defs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;dagstermill&#39;</span><span class=\"p\">:</span> <span class=\"n\">colored_console_logger</span><span class=\"p\">})</span>\n            <span class=\"n\">environment_dict</span><span class=\"p\">[</span><span class=\"s1\">&#39;loggers&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">&#39;dagstermill&#39;</span><span class=\"p\">:</span> <span class=\"p\">{}}</span>\n\n        <span class=\"n\">solid_def</span> <span class=\"o\">=</span> <span class=\"n\">SolidDefinition</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;this_solid&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n            <span class=\"n\">compute_fn</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[],</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;Ephemeral solid constructed by dagstermill.get_context()&#39;</span><span class=\"p\">,</span>\n            <span class=\"n\">required_resource_keys</span><span class=\"o\">=</span><span class=\"n\">mode_def</span><span class=\"o\">.</span><span class=\"n\">resource_key_set</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">pipeline_def</span> <span class=\"o\">=</span> <span class=\"n\">PipelineDefinition</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"n\">solid_def</span><span class=\"p\">],</span> <span class=\"n\">mode_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">mode_def</span><span class=\"p\">],</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;ephemeral_dagstermill_pipeline&#39;</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">run_id</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">())</span>\n\n        <span class=\"c1\"># construct stubbed PipelineRun for notebook exploration...</span>\n        <span class=\"c1\"># The actual pipeline run during pipeline execution will be serialized and reconstituted</span>\n        <span class=\"c1\"># in the `reconstitute_pipeline_context` call</span>\n        <span class=\"n\">pipeline_run</span> <span class=\"o\">=</span> <span class=\"n\">PipelineRun</span><span class=\"p\">(</span>\n            <span class=\"n\">pipeline_name</span><span class=\"o\">=</span><span class=\"n\">pipeline_def</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"n\">run_id</span><span class=\"p\">,</span>\n            <span class=\"n\">environment_dict</span><span class=\"o\">=</span><span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n            <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode_def</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"n\">selector</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">step_keys_to_execute</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">PipelineRunStatus</span><span class=\"o\">.</span><span class=\"n\">NOT_STARTED</span><span class=\"p\">,</span>\n            <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">in_pipeline</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_def</span> <span class=\"o\">=</span> <span class=\"n\">solid_def</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pipeline_def</span> <span class=\"o\">=</span> <span class=\"n\">pipeline_def</span>\n\n        <span class=\"n\">execution_plan</span> <span class=\"o\">=</span> <span class=\"n\">create_execution_plan</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pipeline_def</span><span class=\"p\">,</span> <span class=\"n\">environment_dict</span><span class=\"p\">,</span> <span class=\"n\">pipeline_run</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"n\">scoped_pipeline_context</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pipeline_def</span><span class=\"p\">,</span>\n            <span class=\"n\">environment_dict</span><span class=\"p\">,</span>\n            <span class=\"n\">pipeline_run</span><span class=\"p\">,</span>\n            <span class=\"n\">DagsterInstance</span><span class=\"o\">.</span><span class=\"n\">ephemeral</span><span class=\"p\">(),</span>\n            <span class=\"n\">execution_plan</span><span class=\"p\">,</span>\n            <span class=\"n\">scoped_resources_builder_cm</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_setup_resources</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">pipeline_context</span><span class=\"p\">:</span>\n\n            <span class=\"n\">resource_keys_to_init</span> <span class=\"o\">=</span> <span class=\"n\">get_required_resource_keys_to_init</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_def</span><span class=\"p\">],</span> <span class=\"n\">pipeline_context</span><span class=\"o\">.</span><span class=\"n\">system_storage_def</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">DagstermillExecutionContext</span><span class=\"p\">(</span>\n                <span class=\"n\">pipeline_context</span><span class=\"o\">=</span><span class=\"n\">pipeline_context</span><span class=\"p\">,</span>\n                <span class=\"n\">solid_config</span><span class=\"o\">=</span><span class=\"n\">solid_config</span><span class=\"p\">,</span>\n                <span class=\"n\">resource_keys_to_init</span><span class=\"o\">=</span><span class=\"n\">resource_keys_to_init</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">yield_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">output_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;result&#39;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Yield a result directly from notebook code.</span>\n\n<span class=\"sd\">        When called interactively or in development, returns its input.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            value (Any): The value to yield.</span>\n<span class=\"sd\">            output_name (Optional[str]): The name of the result to yield (default: ``&#39;result&#39;``).</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">in_pipeline</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n        <span class=\"c1\"># deferred import for perf</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">scrapbook</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_def</span><span class=\"o\">.</span><span class=\"n\">has_output</span><span class=\"p\">(</span><span class=\"n\">output_name</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">DagstermillError</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;Solid </span><span class=\"si\">{solid_name}</span><span class=\"s1\"> does not have output named </span><span class=\"si\">{output_name}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"n\">solid_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_def</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">output_name</span><span class=\"o\">=</span><span class=\"n\">output_name</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"n\">runtime_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_def</span><span class=\"o\">.</span><span class=\"n\">output_def_named</span><span class=\"p\">(</span><span class=\"n\">output_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">runtime_type</span>\n\n        <span class=\"n\">out_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">marshal_dir</span><span class=\"p\">,</span> <span class=\"s1\">&#39;output-</span><span class=\"si\">{}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">output_name</span><span class=\"p\">))</span>\n        <span class=\"n\">scrapbook</span><span class=\"o\">.</span><span class=\"n\">glue</span><span class=\"p\">(</span><span class=\"n\">output_name</span><span class=\"p\">,</span> <span class=\"n\">write_value</span><span class=\"p\">(</span><span class=\"n\">runtime_type</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">out_file</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">yield_event</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">dagster_event</span><span class=\"p\">):</span>\n        <span class=\"sd\">&#39;&#39;&#39;Yield a dagster event directly from notebook code.</span>\n\n<span class=\"sd\">        When called interactively or in development, returns its input.</span>\n\n<span class=\"sd\">        Args:</span>\n<span class=\"sd\">            dagster_event (Union[:class:`dagster.Materialization`, :class:`dagster.ExpectationResult`, :class:`dagster.TypeCheck`, :class:`dagster.Failure`]):</span>\n<span class=\"sd\">                An event to yield back to Dagster.</span>\n<span class=\"sd\">        &#39;&#39;&#39;</span>\n        <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">inst_param</span><span class=\"p\">(</span>\n            <span class=\"n\">dagster_event</span><span class=\"p\">,</span> <span class=\"s1\">&#39;dagster_event&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">Materialization</span><span class=\"p\">,</span> <span class=\"n\">ExpectationResult</span><span class=\"p\">,</span> <span class=\"n\">TypeCheck</span><span class=\"p\">,</span> <span class=\"n\">Failure</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">in_pipeline</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">dagster_event</span>\n\n        <span class=\"c1\"># deferred import for perf</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">scrapbook</span>\n\n        <span class=\"n\">event_id</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;event-</span><span class=\"si\">{event_uuid}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">event_uuid</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">()))</span>\n        <span class=\"n\">out_file_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">marshal_dir</span><span class=\"p\">,</span> <span class=\"n\">event_id</span><span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">out_file_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;wb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n            <span class=\"n\">fd</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">dagster_event</span><span class=\"p\">,</span> <span class=\"n\">PICKLE_PROTOCOL</span><span class=\"p\">))</span>\n\n        <span class=\"n\">scrapbook</span><span class=\"o\">.</span><span class=\"n\">glue</span><span class=\"p\">(</span><span class=\"n\">event_id</span><span class=\"p\">,</span> <span class=\"n\">out_file_path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">teardown_resources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resources_stack</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resources_stack</span><span class=\"o\">.</span><span class=\"n\">teardown</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">load_parameter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_name</span><span class=\"p\">,</span> <span class=\"n\">input_value</span><span class=\"p\">):</span>\n        <span class=\"n\">input_def</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">solid_def</span><span class=\"o\">.</span><span class=\"n\">input_def_named</span><span class=\"p\">(</span><span class=\"n\">input_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">read_value</span><span class=\"p\">(</span><span class=\"n\">input_def</span><span class=\"o\">.</span><span class=\"n\">runtime_type</span><span class=\"p\">,</span> <span class=\"n\">input_value</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">MANAGER_FOR_NOTEBOOK_INSTANCE</span> <span class=\"o\">=</span> <span class=\"n\">Manager</span><span class=\"p\">()</span>\n</pre></div>",
  "current_page_name": "_modules/dagstermill/manager",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
