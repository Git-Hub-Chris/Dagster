{
  "parents": [{ "link": "../", "title": "Deploying Dagster" }],
  "prev": { "link": "../instance/", "title": "Configuring an instance" },
  "next": { "link": "../airflow/", "title": "Deploying to Airflow" },
  "title": "Standalone Dagit",
  "meta": {},
  "body": "<div class=\"section\" id=\"standalone-dagit\">\n<span id=\"id1\"></span><h1>Standalone Dagit<a class=\"headerlink\" href=\"#standalone-dagit\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>The simplest way to deploy Dagster / Dagit is in standalone mode. You can deploy Dagit as a service\nin your environment; several options for configuring this are described below.</p>\n<div class=\"section\" id=\"aws-quick-start\">\n<h2>AWS Quick Start<a class=\"headerlink\" href=\"#aws-quick-start\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><strong>NOTE: This is not intended to be a secure configuration, and the instance launched here will be\npublicly accessible. For production settings, you should consider the manual configuration described\nbelow.</strong></p>\n<p>If you are on AWS, there is a quick start CLI utility in <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster-aws</span></code> to automate the setup\nprocess. Ensure you have AWS credentials on your local machine, and run:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ pip install dagster dagit dagster-aws\n$ dagster-aws init\n</pre></div>\n</div>\n<p>This script will walk you through setting up an EC2 VM instance to host Dagit, as well as creating a\nsecurity group and key pair along the way. Once completed, the configuration for this is stored on\nyour local machine in <code class=\"docutils literal notranslate\"><span class=\"pre\">$DAGSTER_HOME/.dagit-aws-config</span></code>; subsequent usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster-aws</span></code> will use\nthis configuration to connect to your running EC2 instance.</p>\n<p>This script will optionally launch an RDS instance for you; if you choose to launch an RDS\nPostgreSQL instance, the remote EC2 instance will automatically be configured to talk to RDS via a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dagster.yaml</span></code> file in the remote <code class=\"docutils literal notranslate\"><span class=\"pre\">$DAGSTER_HOME</span></code>. See the docs on the\n<a class=\"reference internal\" href=\"../instance/#instance\"><span class=\"std std-ref\">Dagster Instance</span></a> for more information about this configuration.</p>\n<p>Once the EC2 instance is launched and ready, you can synchronize your Dagster code to it using:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ <span class=\"nb\">cd</span> /path/to/your/dagster/code\n$ dagster-aws up\n</pre></div>\n</div>\n<p>This will copy over your Dagster client code to the EC2 instance and launch Dagit as <cite>systemd</cite>\nservice, and finally open a browser to Dagit. You can look at\n<a class=\"reference external\" href=\"https://github.com/dagster-io/dagster/blob/master/python_modules/libraries/dagster-aws/dagster_aws/cli/shell/init.sh\">init.sh</a>\nfor details on how we initialize the VM for running Dagit and the specification of the <code class=\"docutils literal notranslate\"><span class=\"pre\">systemd</span></code>\nservice.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster-aws</span></code> CLI saves its state to <code class=\"docutils literal notranslate\"><span class=\"pre\">$DAGSTER_HOME/dagster-aws-config.yaml</span></code>, so you can inspect\nthat file to understand what\u2019s going on and/or debug any issues.</p>\n</div>\n<div class=\"section\" id=\"manually-configuring-dagit\">\n<h2>Manually Configuring Dagit<a class=\"headerlink\" href=\"#manually-configuring-dagit\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster-aws</span></code> CLI above is an easy way to get started, but makes a variety of simplifying\nassumptions about your environment. In reality you may need to host Dagit in a particular VPC,\nbehind a reverse proxy, etc.</p>\n<p>There are a couple of ways you can run Dagit internally, which we cover below.</p>\n<div class=\"section\" id=\"run-on-a-vm\">\n<h3>Run on a VM<a class=\"headerlink\" href=\"#run-on-a-vm\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To launch Dagit on a bare VM, ensure that you\u2019ve got a recent Python version (preferably 3.7, but\n2.7, 3.5, 3.6, and 3.7 are supported), and preferably a virtualenv configured. Then, you can install\nDagster and any libraries you need:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ virtualenv --python<span class=\"o\">=</span>/usr/bin/python3 /some/path/to/venv\n$ <span class=\"nb\">source</span> /some/path/to/venv/bin/activate\n$ pip install dagster dagit dagster-aws <span class=\"c1\"># ... any other dagster libraries you need, e.g. dagster-bash</span>\n</pre></div>\n</div>\n<p>To run Dagit, you can run something like the following:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ <span class=\"nb\">export</span> <span class=\"nv\">DAGSTER_HOME</span><span class=\"o\">=</span>/some/path/to/dagster_home\n$ dagit -h <span class=\"m\">0</span>.0.0.0 -p <span class=\"m\">3000</span>\n</pre></div>\n</div>\n<p>In this configuration, Dagit will write execution logs to <code class=\"docutils literal notranslate\"><span class=\"pre\">$DAGSTER_HOME/logs</span></code> and listen on port\n3000. To run Dagit as a long-lived service on this host, you can install a systemd service similar\nto the AWS quick start, with something like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span><span class=\"n\">Unit</span><span class=\"p\">]</span>\n<span class=\"n\">Description</span><span class=\"o\">=</span><span class=\"n\">Run</span> <span class=\"n\">Dagit</span>\n<span class=\"n\">After</span><span class=\"o\">=</span><span class=\"n\">network</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"p\">[</span><span class=\"n\">Service</span><span class=\"p\">]</span>\n<span class=\"n\">Type</span><span class=\"o\">=</span><span class=\"n\">simple</span>\n<span class=\"n\">User</span><span class=\"o\">=</span><span class=\"n\">ubuntu</span>\n<span class=\"n\">ExecStart</span><span class=\"o\">=/</span><span class=\"nb\">bin</span><span class=\"o\">/</span><span class=\"n\">bash</span> <span class=\"o\">-</span><span class=\"n\">c</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\</span>\n<span class=\"s1\">    export DAGSTER_HOME=/opt/dagster/dagster_home &amp;&amp; </span><span class=\"se\">\\</span>\n<span class=\"s1\">    export PYTHONPATH=$PYTHONPATH:/opt/dagster/app &amp;&amp; </span><span class=\"se\">\\</span>\n<span class=\"s1\">    export LC_ALL=C.UTF-8 &amp;&amp; </span><span class=\"se\">\\</span>\n<span class=\"s1\">    export LANG=C.UTF-8 &amp;&amp; </span><span class=\"se\">\\</span>\n<span class=\"s1\">    source /opt/dagster/venv/bin/activate &amp;&amp; </span><span class=\"se\">\\</span>\n<span class=\"s1\">    /opt/dagster/venv/bin/dagit </span><span class=\"se\">\\</span>\n<span class=\"s1\">        -h 0.0.0.0 </span><span class=\"se\">\\</span>\n<span class=\"s1\">        -p 3000 </span><span class=\"se\">\\</span>\n<span class=\"s1\">        -y /opt/dagster/app/repository.yaml</span>\n<span class=\"n\">Restart</span><span class=\"o\">=</span><span class=\"n\">always</span>\n<span class=\"n\">WorkingDirectory</span><span class=\"o\">=/</span><span class=\"n\">opt</span><span class=\"o\">/</span><span class=\"n\">dagster</span><span class=\"o\">/</span><span class=\"n\">app</span><span class=\"o\">/</span>\n\n<span class=\"p\">[</span><span class=\"n\">Install</span><span class=\"p\">]</span>\n<span class=\"n\">WantedBy</span><span class=\"o\">=</span><span class=\"n\">multi</span><span class=\"o\">-</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">target</span>\n</pre></div>\n</div>\n<p>Note that this assumes you\u2019ve got a virtualenv for Dagster at <code class=\"docutils literal notranslate\"><span class=\"pre\">/opt/dagster/venv</span></code> and your client\ncode and <code class=\"docutils literal notranslate\"><span class=\"pre\">repository.yaml</span></code> are located at <code class=\"docutils literal notranslate\"><span class=\"pre\">/opt/dagster/app</span></code>.</p>\n</div>\n<div class=\"section\" id=\"containerized-execution-in-docker\">\n<h3>Containerized Execution in Docker<a class=\"headerlink\" href=\"#containerized-execution-in-docker\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you are running on AWS ECS, Kubernetes, or some other container-based orchestration, you\u2019ll\nlikely want to containerize Dagit using Docker.</p>\n<p>A minimal skeleton Dockerfile that will run Dagit is shown below:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">FROM</span> <span class=\"n\">dagster</span><span class=\"p\">:</span><span class=\"n\">dagster</span><span class=\"o\">/</span><span class=\"n\">py3</span><span class=\"o\">.</span><span class=\"mf\">7.4</span>\n\n<span class=\"n\">RUN</span> <span class=\"nb\">set</span> <span class=\"o\">-</span><span class=\"n\">ex</span> \\\n    <span class=\"o\">&amp;&amp;</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">U</span> <span class=\"n\">pip</span> <span class=\"n\">setuptools</span> <span class=\"n\">wheel</span> \\\n    <span class=\"o\">&amp;&amp;</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">dagster</span> <span class=\"n\">dagit</span>\n\n<span class=\"n\">WORKDIR</span> <span class=\"o\">/</span>\n\n<span class=\"c1\"># Here, we assume your Dagster client code is in the current directory</span>\n<span class=\"c1\"># including a repository.yaml file.</span>\n<span class=\"n\">ADD</span> <span class=\"o\">.</span> <span class=\"o\">/</span>\n\n<span class=\"n\">EXPOSE</span> <span class=\"mi\">3000</span>\n\n<span class=\"n\">ENTRYPOINT</span> <span class=\"p\">[</span> <span class=\"s2\">&quot;dagit&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-h&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0.0.0.0&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-p&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;3000&quot;</span> <span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>This is based on the <a class=\"reference external\" href=\"https://cloud.docker.com/u/dagster/repository/docker/dagster/dagster\">public Docker\nimages</a>. We publish versions\nfor Python 2.7, 3.5, 3.6, and 3.7.</p>\n</div>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    ["sections/deploying/airflow", "Deploying to Airflow", "N", "next"],
    ["sections/deploying/instance", "Configuring an instance", "P", "previous"]
  ],
  "sourcename": "sections/deploying/dagit.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Standalone Dagit</a><ul>\n<li><a class=\"reference internal\" href=\"#aws-quick-start\">AWS Quick Start</a></li>\n<li><a class=\"reference internal\" href=\"#manually-configuring-dagit\">Manually Configuring Dagit</a><ul>\n<li><a class=\"reference internal\" href=\"#run-on-a-vm\">Run on a VM</a></li>\n<li><a class=\"reference internal\" href=\"#containerized-execution-in-docker\">Containerized Execution in Docker</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/deploying/dagit",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
