{
  "parents": [
    { "link": "../../learn/", "title": "Learn" },
    { "link": "../", "title": "Tutorial" }
  ],
  "prev": { "link": "../composite_solids/", "title": "Composing solids" },
  "next": { "link": "../intermediates/", "title": "Intermediates" },
  "title": "Materializations",
  "meta": {},
  "body": "<div class=\"section\" id=\"materializations\">\n<h1>Materializations<a class=\"headerlink\" href=\"#materializations\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Steps in a data pipeline often produce persistent artifacts, for instance, graphs or tables\ndescribing the result of some computation. Typically these artifacts are saved to disk (or to\ncloud storage) with a <a class=\"reference external\" href=\"https://xkcd.com/1459/\">name</a> that has something to do with their origin.\nBut it can be hard to organize and cross-reference artifacts produced by many different runs of a\npipeline, or to identify all of the files that might have been created by some pipeline\u2019s logic.</p>\n<p>Dagster solids can describe their persistent artifacts to the system by yielding\n<a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.Materialization\" title=\"dagster.Materialization\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Materialization</span></code></a> events. Like\n<a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.TypeCheck\" title=\"dagster.TypeCheck\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TypeCheck</span></code></a> and <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.ExpectationResult\" title=\"dagster.ExpectationResult\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ExpectationResult</span></code></a>,\nmaterializations are side-channels for metadata \u2013 they don\u2019t get passed to downstream solids and\nthey aren\u2019t used to define the data dependencies that structure a pipeline\u2019s DAG.</p>\n<p>Suppose that we rewrite our <code class=\"docutils literal notranslate\"><span class=\"pre\">sort_calories</span></code> solid so that it saves the newly sorted data frame to\ndisk.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">materializations.py</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">sort_by_calories</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_cereals</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cereal</span><span class=\"p\">:</span> <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Least caloric cereal: </span><span class=\"si\">{least_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">least_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Most caloric cereal: </span><span class=\"si\">{most_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">most_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">fieldnames</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"n\">sorted_cereals_csv_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;calories_sorted_</span><span class=\"si\">{run_id}</span><span class=\"s1\">.csv&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">run_id</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">sorted_cereals_csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictWriter</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">fieldnames</span><span class=\"p\">)</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writeheader</span><span class=\"p\">()</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerows</span><span class=\"p\">(</span><span class=\"n\">sorted_cereals</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>We\u2019ve taken the basic precaution of ensuring that the saved csv file has a different filename for\neach run of the pipeline. But there\u2019s no way for Dagit to know about this persistent artifact.\nSo we\u2019ll add the following lines:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">materializations.py</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">sort_by_calories</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">):</span>\n    <span class=\"n\">sorted_cereals</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cereal</span><span class=\"p\">:</span> <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Least caloric cereal: </span><span class=\"si\">{least_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">least_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Most caloric cereal: </span><span class=\"si\">{most_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">most_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">fieldnames</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n    <span class=\"n\">sorted_cereals_csv_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;calories_sorted_</span><span class=\"si\">{run_id}</span><span class=\"s1\">.csv&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">run_id</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">run_id</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">sorted_cereals_csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictWriter</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">fieldnames</span><span class=\"p\">)</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writeheader</span><span class=\"p\">()</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerows</span><span class=\"p\">(</span><span class=\"n\">sorted_cereals</span><span class=\"p\">)</span>\n<span class=\"hll\">    <span class=\"k\">yield</span> <span class=\"n\">Materialization</span><span class=\"p\">(</span>\n</span><span class=\"hll\">        <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;sorted_cereals_csv&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;Cereals data frame sorted by caloric content&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">        <span class=\"n\">metadata_entries</span><span class=\"o\">=</span><span class=\"p\">[</span>\n</span><span class=\"hll\">            <span class=\"n\">EventMetadataEntry</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">(</span>\n</span><span class=\"hll\">                <span class=\"n\">sorted_cereals_csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;sorted_cereals_csv_path&#39;</span>\n</span><span class=\"hll\">            <span class=\"p\">)</span>\n</span><span class=\"hll\">        <span class=\"p\">],</span>\n</span><span class=\"hll\">    <span class=\"p\">)</span>\n</span><span class=\"hll\">    <span class=\"k\">yield</span> <span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</span></pre></div>\n</td></tr></table></div>\n</div>\n<p>Note that we\u2019ve had to add the last line, yielding an <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.Output\" title=\"dagster.Output\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Output</span></code></a>. Until\nnow, all of our solids have relied on Dagster\u2019s implicit conversion of the return value of a solid\u2019s\ncompute function into its output. When we explicitly yield other types of events from solid logic,\nwe need to also explicitly yield the output so that the framework can recognize them.</p>\n<p>Now, if we run this pipeline in Dagit:</p>\n<a class=\"\"\n               data-lightbox=\"group-e8fe83de-5919-4c73-beda-6b167ca17c47\"\n               href=\"../../../../_images/materializations1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/materializations1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><div class=\"section\" id=\"configurably-materializing-custom-data-types\">\n<h2>Configurably materializing custom data types<a class=\"headerlink\" href=\"#configurably-materializing-custom-data-types\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Data types can also be configured so that outputs materialize themselves, obviating the need to\nexplicitly yield a <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.Materialization\" title=\"dagster.Materialization\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Materialization</span></code></a> from solid logic. Dagster\ncalls this facility the\n<a class=\"reference internal\" href=\"../../../api/apidocs/types/#dagster.output_materialization_config\" title=\"dagster.output_materialization_config\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;output_materialization_config</span></code></a>.</p>\n<p>Suppose we would like to be able to configure outputs of our toy custom type, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleDataFrame</span></code>, to be automatically materialized to disk as both as a pickle and as a .csv.\n(This is a reasonable idea, since .csv files are human-readable and manipulable by a wide variety\nof third party tools, while pickle is a binary format.)</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">output_materialization.py</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@output_materialization_config</span><span class=\"p\">(</span>\n    <span class=\"n\">Selector</span><span class=\"p\">(</span>\n        <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;csv&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n                <span class=\"n\">Dict</span><span class=\"p\">(</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"s1\">&#39;path&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">),</span>\n                        <span class=\"s1\">&#39;sep&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span>\n                            <span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;,&#39;</span>\n                        <span class=\"p\">),</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">),</span>\n                <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">less_simple_data_frame_output_materialization_config</span><span class=\"p\">(</span>\n    <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">value</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">csv_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;csv&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">])</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">fieldnames</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictWriter</span><span class=\"p\">(</span>\n            <span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">fieldnames</span><span class=\"p\">,</span> <span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">&#39;csv&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;sep&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writeheader</span><span class=\"p\">()</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerows</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Wrote dataframe as .csv to </span><span class=\"si\">{path}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">csv_path</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">Materialization</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;data_frame_csv&#39;</span><span class=\"p\">,</span>\n        <span class=\"s1\">&#39;LessSimpleDataFrame materialized as csv&#39;</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"n\">EventMetadataEntry</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;data_frame_csv_path&#39;</span><span class=\"p\">)],</span>\n    <span class=\"p\">)</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>We set the output materialization config on the type:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">output_materialization.py</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>67\n68\n69\n70\n71\n72\n73\n74</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@dagster_type</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;LessSimpleDataFrame&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;A more sophisticated data frame that type checks its structure.&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">input_hydration_config</span><span class=\"o\">=</span><span class=\"n\">less_simple_data_frame_input_hydration_config</span><span class=\"p\">,</span>\n<span class=\"hll\">    <span class=\"n\">output_materialization_config</span><span class=\"o\">=</span><span class=\"n\">less_simple_data_frame_output_materialization_config</span><span class=\"p\">,</span>\n</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">LessSimpleDataFrame</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Now we can tell Dagster to materialize intermediate outputs of this type by providing config:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">output_materialization.yaml</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 6\n 7\n 8\n 9\n10</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span>    <span class=\"n\">outputs</span><span class=\"p\">:</span>\n      <span class=\"o\">-</span> <span class=\"n\">result</span><span class=\"p\">:</span>\n          <span class=\"n\">csv</span><span class=\"p\">:</span>\n            <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"s2\">&quot;sorted_cereals.csv&quot;</span>\n            <span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"s2\">&quot;;&quot;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>When we run this pipeline, we\u2019ll see that materializations are yielded (and visible in the\nstructured logs in Dagit), and that files are created on disk (with the semicolon separator we\nspecified).</p>\n<a class=\"\"\n               data-lightbox=\"group-d5e93c3a-7c29-4daa-8905-ecb5dac07887\"\n               href=\"../../../../_images/output_materializations1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/output_materializations1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a></div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    ["sections/learn/tutorial/intermediates", "Intermediates", "N", "next"],
    [
      "sections/learn/tutorial/composite_solids",
      "Composing solids",
      "P",
      "previous"
    ]
  ],
  "sourcename": "sections/learn/tutorial/materializations.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Materializations</a><ul>\n<li><a class=\"reference internal\" href=\"#configurably-materializing-custom-data-types\">Configurably materializing custom data types</a></li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/tutorial/materializations",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
