{
  "parents": [
    { "link": "../../learn/", "title": "Learn" },
    { "link": "../", "title": "Tutorial" }
  ],
  "prev": { "link": "../config/", "title": "Parametrizing solids with config" },
  "next": {
    "link": "../multiple_outputs/",
    "title": "Multiple and conditional outputs"
  },
  "title": "User-defined types",
  "meta": {},
  "body": "<div class=\"section\" id=\"user-defined-types\">\n<h1>User-defined types<a class=\"headerlink\" href=\"#user-defined-types\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Note that this section requires Python 3.</p>\n<p>We\u2019ve seen how we can type the inputs and outputs of solids using Python 3\u2019s typing system, and\nhow to use Dagster\u2019s built-in config types, such as <a class=\"reference internal\" href=\"../../../api/apidocs/types/#dagster.String\" title=\"dagster.String\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dagster.String</span></code></a>, to define config\nschemas for our solids.</p>\n<p>But what about when you want to define your own types?</p>\n<p>Let\u2019s look back at our simple <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code> solid.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">inputs_typed.py</span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">csv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Read </span><span class=\"si\">{n_lines}</span><span class=\"s1\"> lines&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_lines</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">lines</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">lines</span></code> object returned by Python\u2019s built-in <code class=\"docutils literal notranslate\"><span class=\"pre\">csv.DictReader</span></code> is a list of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">collections.OrderedDict</span></code>, each of which represents one row of the dataset:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span>\n    <span class=\"n\">OrderedDict</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;100% Bran&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;mfr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;N&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;type&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;70&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;protein&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;4&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;fat&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;sodium&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;130&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;carbo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;5&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;sugars&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;6&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;potass&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;280&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;vitamins&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;25&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;shelf&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;cups&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;0.33&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;68.402973&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">]),</span>\n    <span class=\"n\">OrderedDict</span><span class=\"p\">([</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;100% Natural Bran&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;mfr&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Q&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;type&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;C&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;120&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;protein&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;fat&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;5&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;sodium&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;15&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;fiber&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;carbo&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;8&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;sugars&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;8&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;potass&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;135&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;vitamins&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;0&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;shelf&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;3&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;weight&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s1\">&#39;cups&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;1&#39;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">&#39;rating&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;33.983679&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">]),</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>This is a simple representation of a \u201cdata frame\u201d, or a table of data. We\u2019d like to be able to\nuse Dagster\u2019s type system to type the output of <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code>, so that we can do type checking when\nwe construct the pipeline, ensuring that any solid consuming the output of <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code> expects to\nreceive a data frame.</p>\n<p>To do this, we\u2019ll use the <a class=\"reference internal\" href=\"../../../api/apidocs/types/#dagster.dagster_type\" title=\"dagster.dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;dagster_type</span></code></a> decorator:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">custom_types.py</span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">dagster_type</span><span class=\"p\">,</span> <span class=\"n\">execute_pipeline</span><span class=\"p\">,</span> <span class=\"n\">pipeline</span><span class=\"p\">,</span> <span class=\"n\">solid</span>\n\n\n<span class=\"nd\">@dagster_type</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;SimpleDataFrame&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;A naive representation of a data frame, e.g., as returned by &#39;</span>\n        <span class=\"s1\">&#39;csv.DictReader.&#39;</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">SimpleDataFrame</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Now we can annotate the rest of our pipeline with our new type:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">custom_types.py</span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"hll\"><span class=\"k\">def</span> <span class=\"nf\">read_csv</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">csv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">SimpleDataFrame</span><span class=\"p\">:</span>\n</span>    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Read </span><span class=\"si\">{n_lines}</span><span class=\"s1\"> lines&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_lines</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span>\n<span class=\"hll\">    <span class=\"k\">return</span> <span class=\"n\">SimpleDataFrame</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span>\n</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"hll\"><span class=\"k\">def</span> <span class=\"nf\">sort_by_calories</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">:</span> <span class=\"n\">SimpleDataFrame</span><span class=\"p\">):</span>\n</span>    <span class=\"n\">sorted_cereals</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cereal</span><span class=\"p\">:</span> <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Least caloric cereal: </span><span class=\"si\">{least_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">least_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Most caloric cereal: </span><span class=\"si\">{most_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">most_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">custom_type_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">sort_by_calories</span><span class=\"p\">(</span><span class=\"n\">read_csv</span><span class=\"p\">())</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>The type metadata now appears in dagit and the system will ensure the input and output to this\nsolid are indeed instances of SimpleDataFrame. As usual, run:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$</span> dagit -f custom_types.py -n custom_type_pipeline\n</pre></div>\n</div>\n<a class=\"\"\n               data-lightbox=\"group-169f6912-f3ca-4590-a3f0-a418eafd00e9\"\n               href=\"../../../../_images/custom_types_figure_one1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/custom_types_figure_one1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>You can see that the output of <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code> (which by default has the name <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span></code>) is marked\nto be of type <code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleDataFrame</span></code>.</p>\n<div class=\"section\" id=\"custom-type-checks\">\n<h2>Custom type checks<a class=\"headerlink\" href=\"#custom-type-checks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The Dagster framework will fail type checks when a value isn\u2019t an instance of the type we\u2019re\nexpecting, e.g., if <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code> were to return a <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> rather than a <code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleDataFrame</span></code>.</p>\n<p>Sometimes we know more about the types of our values, and we\u2019d like to do deeper type checks. For\nexample, in the case of the <code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleDataFrame</span></code>, we expect to see a list of OrderedDicts, and for\neach of these OrderedDicts to have the same fields, in the same order.</p>\n<p>The <a class=\"reference internal\" href=\"../../../api/apidocs/types/#dagster.dagster_type\" title=\"dagster.dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;dagster_type</span></code></a> decorator lets us specify custom type checks\nlike this.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">custom_types_2.py</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"hll\"><span class=\"k\">def</span> <span class=\"nf\">less_simple_data_frame_type_check</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n</span>    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">field</span> <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)):</span>\n        <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"n\">row_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">field</span> <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()]</span>\n        <span class=\"k\">if</span> <span class=\"n\">fields</span> <span class=\"o\">!=</span> <span class=\"n\">row_fields</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"nd\">@dagster_type</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;LessSimpleDataFrame&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;A more sophisticated data frame that type checks its structure.&#39;</span><span class=\"p\">,</span>\n<span class=\"hll\">    <span class=\"n\">type_check</span><span class=\"o\">=</span><span class=\"n\">less_simple_data_frame_type_check</span><span class=\"p\">,</span>\n</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">LessSimpleDataFrame</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Now, if our solid logic fails to return the right type, we\u2019ll see a type check failure. Let\u2019s\nreplace our <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code> solid with the following bad logic:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">custom_types_2.py</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>32\n33\n34\n35\n36\n37\n38</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">bad_read_csv</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">csv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">LessSimpleDataFrame</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">csv_path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Read </span><span class=\"si\">{n_lines}</span><span class=\"s1\"> lines&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_lines</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">LessSimpleDataFrame</span><span class=\"p\">([</span><span class=\"s2\">&quot;not_a_dict&quot;</span><span class=\"p\">])</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>When we run the pipeline with this solid, we\u2019ll see an error like:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">2019-10-12 13:19:19 - dagster - ERROR - custom_type_pipeline - 266c6a93-75e2-46dc-8bd7-d684ce91d0d1 - STEP_FAILURE - Execution of step &quot;bad_read_csv.compute&quot; failed.</span>\n<span class=\"go\">            cls_name = &quot;Failure&quot;</span>\n<span class=\"go\">            solid = &quot;bad_read_csv&quot;</span>\n<span class=\"go\">    solid_definition = &quot;bad_read_csv&quot;</span>\n<span class=\"go\">            step_key = &quot;bad_read_csv.compute&quot;</span>\n<span class=\"go\">user_failure_data = {&quot;description&quot;: &quot;LessSimpleDataFrame should be a list of OrderedDicts, got &lt;class &#39;str&#39;&gt; for row 1&quot;, &quot;label&quot;: &quot;intentional-failure&quot;, &quot;metadata_entries&quot;: []}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"providing-input-values-for-custom-types-in-config\">\n<h2>Providing input values for custom types in config<a class=\"headerlink\" href=\"#providing-input-values-for-custom-types-in-config\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>We saw earlier how, when a solid doesn\u2019t receive all of its inputs from other solids further\nupstream in the pipeline, we can specify its input values in config:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">inputs_env.yaml</span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-YAML notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">solids</span><span class=\"p\">:</span>\n  <span class=\"nt\">read_csv</span><span class=\"p\">:</span>\n    <span class=\"nt\">inputs</span><span class=\"p\">:</span>\n      <span class=\"nt\">csv_path</span><span class=\"p\">:</span>\n        <span class=\"nt\">value</span><span class=\"p\">:</span> <span class=\"s\">&quot;cereal.csv&quot;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>The Dagster framework knows how to intepret values provided via config as scalar inputs. In this\ncase, <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code> just takes the string representation of the filepath from which it\u2019ll read a csv.\nBut for more complex, custom types, we need to tell Dagster how to interpret config values.</p>\n<p>Consider our LessSimpleDataFrame. It might be convenient if Dagster knew automatically how to read a\ndata frame in from a csv file, without us needing to separate that logic into the <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code>\nsolid \u2013 especially if we knew the provenance and format of that csv file (e.g., if we were using\nstandard csvs as an internal interchange format) and didn\u2019t need the full configuration surface of\na general purpose <code class=\"docutils literal notranslate\"><span class=\"pre\">read_csv</span></code> solid.</p>\n<p>What we want to be able to do is write:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id7\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">custom_type_input.yaml</span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-YAML notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>1\n2\n3\n4\n5</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">solids</span><span class=\"p\">:</span>\n  <span class=\"nt\">sort_by_calories</span><span class=\"p\">:</span>\n    <span class=\"nt\">inputs</span><span class=\"p\">:</span>\n      <span class=\"nt\">cereals</span><span class=\"p\">:</span>\n        <span class=\"nt\">csv</span><span class=\"p\">:</span> <span class=\"s\">&quot;cereal.csv&quot;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>In order for the Dagster machinery to be able to decode the config value <code class=\"docutils literal notranslate\"><span class=\"pre\">{'csv':</span> <span class=\"pre\">'cereal.csv'}</span></code>\ninto an input of the correct <code class=\"docutils literal notranslate\"><span class=\"pre\">LessSimpleDataFrame</span></code> value, we need to write what we call an\ninput hydration config.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id8\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">custom_types_3.py</span><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>31\n32\n33\n34\n35\n36\n37</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"hll\"><span class=\"nd\">@input_hydration_config</span><span class=\"p\">(</span><span class=\"n\">Selector</span><span class=\"p\">({</span><span class=\"s1\">&#39;csv&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)}))</span>\n</span><span class=\"k\">def</span> <span class=\"nf\">less_simple_data_frame_input_hydration_config</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">selector</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">selector</span><span class=\"p\">[</span><span class=\"s1\">&#39;csv&#39;</span><span class=\"p\">],</span> <span class=\"s1\">&#39;r&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">&#39;Read </span><span class=\"si\">{n_lines}</span><span class=\"s1\"> lines&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">n_lines</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)))</span>\n    <span class=\"k\">return</span> <span class=\"n\">LessSimpleDataFrame</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>A function decorated with <a class=\"reference internal\" href=\"../../../api/apidocs/types/#dagster.input_hydration_config\" title=\"dagster.input_hydration_config\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;input_hydration_config</span></code></a> should\ntake the context object, as usual, and a parameter representing the parsed config field. The schema\nfor this field is defined by the argument to the\n<a class=\"reference internal\" href=\"../../../api/apidocs/types/#dagster.input_hydration_config\" title=\"dagster.input_hydration_config\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;input_hydration_config</span></code></a> decorator.</p>\n<p>Here, we introduce the <a class=\"reference internal\" href=\"../../../api/apidocs/types/#dagster.Selector\" title=\"dagster.Selector\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Selector</span></code></a> type, which lets you specify\nmutually exclusive options in config schemas. Here, there\u2019s only one option, <code class=\"docutils literal notranslate\"><span class=\"pre\">csv</span></code>, but you can\nimagine a more sophisticated data frame type that might also know how to hydrate its inputs from\nother formats and sources, and might have a selector with fields like <code class=\"docutils literal notranslate\"><span class=\"pre\">parquet</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">xlsx</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sql</span></code>, etc.</p>\n<p>Then insert this into the original declaration:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id9\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">custom_types_3.py</span><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>40\n41\n42\n43\n44\n45\n46\n47</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@dagster_type</span><span class=\"p\">(</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;LessSimpleDataFrame&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;A more sophisticated data frame that type checks its structure.&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">type_check</span><span class=\"o\">=</span><span class=\"n\">less_simple_data_frame_type_check</span><span class=\"p\">,</span>\n<span class=\"hll\">    <span class=\"n\">input_hydration_config</span><span class=\"o\">=</span><span class=\"n\">less_simple_data_frame_input_hydration_config</span><span class=\"p\">,</span>\n</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">LessSimpleDataFrame</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Now if you run a pipeline with this solid from dagit you will be able to provide sources for\nthese inputs via config:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id10\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">custom_types_3.py</span><a class=\"headerlink\" href=\"#id10\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>73\n74\n75\n76\n77\n78\n79</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span>        <span class=\"p\">{</span>\n            <span class=\"s1\">&#39;solids&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;sort_by_calories&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"s1\">&#39;inputs&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;cereals&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;csv&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;cereal.csv&#39;</span><span class=\"p\">}}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n</div>\n<div class=\"section\" id=\"testing-custom-types\">\n<h2>Testing custom types<a class=\"headerlink\" href=\"#testing-custom-types\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>As you write your own custom types, you\u2019ll also want to set up unit tests that ensure your types\nare doing what you expect them to. Dagster includes a utility function,\n<a class=\"reference internal\" href=\"../../../api/apidocs/types/#dagster.check_dagster_type\" title=\"dagster.check_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">check_dagster_type</span></code></a>, that lets you type check any Dagster\ntype against any value.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id11\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">custom_types_test.py</span><a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_less_simple_data_frame</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">check_dagster_type</span><span class=\"p\">(</span>\n        <span class=\"n\">LessSimpleDataFrame</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}]</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">success</span>\n\n    <span class=\"n\">type_check</span> <span class=\"o\">=</span> <span class=\"n\">check_dagster_type</span><span class=\"p\">(</span>\n        <span class=\"n\">LessSimpleDataFrame</span><span class=\"p\">,</span> <span class=\"p\">[{</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">}]</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">type_check</span><span class=\"o\">.</span><span class=\"n\">success</span>\n    <span class=\"k\">assert</span> <span class=\"n\">type_check</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">==</span> <span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Rows in LessSimpleDataFrame should have the same fields, &#39;</span>\n        <span class=\"s1\">&#39;got [</span><span class=\"se\">\\&#39;</span><span class=\"s1\">bar</span><span class=\"se\">\\&#39;</span><span class=\"s1\">] for row 2, expected [</span><span class=\"se\">\\&#39;</span><span class=\"s1\">foo</span><span class=\"se\">\\&#39;</span><span class=\"s1\">]&#39;</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Well tested library types can be reused across solids and pipelines to provide standardized type\nchecking within your organization\u2019s data applications.</p>\n</div>\n</div>\n<div class=\"section\" id=\"metadata-and-data-quality-checks\">\n<h1>Metadata and data quality checks<a class=\"headerlink\" href=\"#metadata-and-data-quality-checks\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Custom types can also yield metadata about the type check. For example, in the case of our data\nframe, we might want to record the number of rows and columns in the dataset when our type checks\nsucceed, and provide more information about why type checks failed when they fail.</p>\n<p>User-defined type check functions can optionally return a <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.TypeCheck\" title=\"dagster.TypeCheck\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TypeCheck</span></code></a>\nobject that contains metadata about the success or failure of the type check.</p>\n<p>Let\u2019s see how to use this to emit some summary statistics about our DataFrame type:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id12\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">custom_types_4.py</span><a class=\"headerlink\" href=\"#id12\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre>17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">less_simple_data_frame_type_check</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n<span class=\"hll\">        <span class=\"k\">return</span> <span class=\"n\">TypeCheck</span><span class=\"p\">(</span>\n</span><span class=\"hll\">            <span class=\"n\">success</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n</span><span class=\"hll\">            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;LessSimpleDataFrame should be a list of dicts, got &#39;</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;</span><span class=\"si\">{type_}</span><span class=\"s1\">&#39;</span>\n</span><span class=\"hll\">            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)),</span>\n</span><span class=\"hll\">        <span class=\"p\">)</span>\n</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">field</span> <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)):</span>\n        <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">TypeCheck</span><span class=\"p\">(</span>\n                <span class=\"n\">success</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;LessSimpleDataFrame should be a list of dicts, &#39;</span>\n                    <span class=\"s1\">&#39;got </span><span class=\"si\">{type_}</span><span class=\"s1\"> for row </span><span class=\"si\">{idx}</span><span class=\"s1\">&#39;</span>\n                <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">type_</span><span class=\"o\">=</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">),</span> <span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)),</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">row_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">field</span> <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">()]</span>\n        <span class=\"k\">if</span> <span class=\"n\">fields</span> <span class=\"o\">!=</span> <span class=\"n\">row_fields</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">TypeCheck</span><span class=\"p\">(</span>\n                <span class=\"n\">success</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                    <span class=\"s1\">&#39;Rows in LessSimpleDataFrame should have the same fields, &#39;</span>\n                    <span class=\"s1\">&#39;got </span><span class=\"si\">{actual}</span><span class=\"s1\"> for row </span><span class=\"si\">{idx}</span><span class=\"s1\">, expected </span><span class=\"si\">{expected}</span><span class=\"s1\">&#39;</span>\n                <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">actual</span><span class=\"o\">=</span><span class=\"n\">row_fields</span><span class=\"p\">,</span> <span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">expected</span><span class=\"o\">=</span><span class=\"n\">fields</span><span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n\n<span class=\"hll\">    <span class=\"k\">return</span> <span class=\"n\">TypeCheck</span><span class=\"p\">(</span>\n</span><span class=\"hll\">        <span class=\"n\">success</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n</span><span class=\"hll\">        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;LessSimpleDataFrame summary statistics&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">        <span class=\"n\">metadata_entries</span><span class=\"o\">=</span><span class=\"p\">[</span>\n</span><span class=\"hll\">            <span class=\"n\">EventMetadataEntry</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span>\n</span><span class=\"hll\">                <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)),</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;n_rows&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;Number of rows seen in the data frame&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">            <span class=\"p\">),</span>\n</span><span class=\"hll\">            <span class=\"n\">EventMetadataEntry</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span>\n</span><span class=\"hll\">                <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"p\">),</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;n_cols&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;Number of columns seen in the data frame&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">            <span class=\"p\">),</span>\n</span><span class=\"hll\">            <span class=\"n\">EventMetadataEntry</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span>\n</span><span class=\"hll\">                <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"p\">[]),</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;column_names&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">                <span class=\"s1\">&#39;Keys of columns seen in the data frame&#39;</span><span class=\"p\">,</span>\n</span><span class=\"hll\">            <span class=\"p\">),</span>\n</span><span class=\"hll\">        <span class=\"p\">],</span>\n</span><span class=\"hll\">    <span class=\"p\">)</span>\n</span></pre></div>\n</td></tr></table></div>\n</div>\n<p>A <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.TypeCheck\" title=\"dagster.TypeCheck\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TypeCheck</span></code></a> must include a <code class=\"docutils literal notranslate\"><span class=\"pre\">success</span></code> argument describing whether\nthe check passed or failed, and may include a description and/or a list of\n<a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.EventMetadataEntry\" title=\"dagster.EventMetadataEntry\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EventMetadataEntry</span></code></a> objects. You should use the\nstatic constructors on <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.EventMetadataEntry\" title=\"dagster.EventMetadataEntry\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EventMetadataEntry</span></code></a> to construct\nthese objects, which are flexible enough to support arbitrary metadata in JSON or Markdown format.</p>\n<p>Dagit knows how to display and archive structured metadata of this kind for future review:</p>\n<a class=\"\"\n               data-lightbox=\"group-df7e8e1b-b52b-4d36-ae2c-c2fede98409e\"\n               href=\"../../../../_images/custom_types_figure_two1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../_images/custom_types_figure_two1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><div class=\"section\" id=\"expectations\">\n<h2>Expectations<a class=\"headerlink\" href=\"#expectations\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Custom type checks and metadata are appropriate for checking that a value will behave as we expect,\nand for collecting summary information about values.</p>\n<p>But sometimes we want to make more specific, data- and business logic-dependent assertions about\nthe semantics of values. It typically isn\u2019t appropriate to embed assertions like these into data\ntypes directly.</p>\n<p>For one, they will usually vary substantially between instantiations \u2013 for example, we don\u2019t\nexpect all data frames to have the same number of columns, and over-specifying data types (e.g.,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SixColumnedDataFrame</span></code>) makes it difficult for generic logic to work generically (e.g., over all\ndata frames).</p>\n<p>What\u2019s more, these additional, deeper semantic assertions are often non-stationary. Typically,\nyou\u2019ll start running a pipeline with certain expectations about the data that you\u2019ll see; but\nover time, you\u2019ll learn more about your data (making your expectations more precise), and the\nprocess in the world that generates your data will shift (making some of your expectations invalid.)</p>\n<p>To support this kind of assertion, Dagster includes support for expressing your expectations about\ndata in solid logic.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id13\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">custom_types_5.py</span><a class=\"headerlink\" href=\"#id13\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"hll\"><span class=\"k\">def</span> <span class=\"nf\">expect_column_to_be_integers</span><span class=\"p\">(</span>\n</span><span class=\"hll\">    <span class=\"n\">data_frame</span><span class=\"p\">:</span> <span class=\"n\">LessSimpleDataFrame</span><span class=\"p\">,</span> <span class=\"n\">column_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n</span><span class=\"hll\"><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">ExpectationResult</span><span class=\"p\">:</span>\n</span>    <span class=\"n\">bad_values</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data_frame</span><span class=\"p\">)):</span>\n        <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">data_frame</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">[</span><span class=\"n\">column_name</span><span class=\"p\">],</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"n\">bad_values</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">[</span><span class=\"n\">column_name</span><span class=\"p\">])))</span>\n    <span class=\"k\">return</span> <span class=\"n\">ExpectationResult</span><span class=\"p\">(</span>\n        <span class=\"n\">success</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">bad_values</span><span class=\"p\">),</span>\n        <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">&#39;col_</span><span class=\"si\">{column_name}</span><span class=\"s1\">_is_int&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">column_name</span><span class=\"o\">=</span><span class=\"n\">column_name</span><span class=\"p\">),</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;Check whether type of column </span><span class=\"si\">{column_name}</span><span class=\"s1\"> in &#39;</span>\n            <span class=\"s1\">&#39;LessSimpleDataFrame is int&#39;</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">column_name</span><span class=\"o\">=</span><span class=\"n\">column_name</span><span class=\"p\">),</span>\n        <span class=\"n\">metadata_entries</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"n\">EventMetadataEntry</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span>\n                <span class=\"p\">{</span><span class=\"s1\">&#39;index&#39;</span><span class=\"p\">:</span> <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"s1\">&#39;bad_value&#39;</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">},</span>\n                <span class=\"s1\">&#39;bad_value&#39;</span><span class=\"p\">,</span>\n                <span class=\"s1\">&#39;Bad value in column </span><span class=\"si\">{column_name}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"n\">column_name</span><span class=\"o\">=</span><span class=\"n\">column_name</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">bad_values</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">sort_by_calories</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">cereals</span><span class=\"p\">:</span> <span class=\"n\">LessSimpleDataFrame</span><span class=\"p\">):</span>\n<span class=\"hll\">    <span class=\"k\">yield</span> <span class=\"n\">expect_column_to_be_integers</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">)</span>\n</span>    <span class=\"n\">sorted_cereals</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">cereals</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">cereal</span><span class=\"p\">:</span> <span class=\"n\">cereal</span><span class=\"p\">[</span><span class=\"s1\">&#39;calories&#39;</span><span class=\"p\">])</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Least caloric cereal: </span><span class=\"si\">{least_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">least_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span>\n        <span class=\"s1\">&#39;Most caloric cereal: </span><span class=\"si\">{most_caloric}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">most_caloric</span><span class=\"o\">=</span><span class=\"n\">sorted_cereals</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"n\">Output</span><span class=\"p\">(</span><span class=\"n\">sorted_cereals</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></table></div>\n</div>\n<p>Until now, every solid we\u2019ve encountered has returned its result value, or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. But solids can\nalso yield events of various types for side-channel communication about the results of their\ncomputations. We\u2019ve already encountered the <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.TypeCheck\" title=\"dagster.TypeCheck\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TypeCheck</span></code></a> event, which\nis typically yielded by the type machinery (but can also be yielded manually from the body of a\nsolid\u2019s compute function); <a class=\"reference internal\" href=\"../../../api/apidocs/solids/#dagster.ExpectationResult\" title=\"dagster.ExpectationResult\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ExpectationResult</span></code></a> is another\nkind of structured side-channel result that a solid can yield. These extra events don\u2019t get passed\nto downstream solids and they aren\u2019t used to define the data dependencies of a pipeline DAG.</p>\n<p>If you\u2019re already using the <a class=\"reference external\" href=\"https://greatexpectations.io/\">Great Expectations</a> library\nto express expectations about your data, you may be interested in the <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_ge</span></code> wrapper\nlibrary.</p>\n<p>This part of this system remains relatively immature, but yielding structured expectation results\nfrom your solid logic means that in future, tools like Dagit will be able to aggregate and track\nexpectation results, as well as implement sophisticated policy engines to drive alerting and\nexception handling on a deep semantic basis.</p>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    [
      "sections/learn/tutorial/multiple_outputs",
      "Multiple and conditional outputs",
      "N",
      "next"
    ],
    [
      "sections/learn/tutorial/config",
      "Parametrizing solids with config",
      "P",
      "previous"
    ]
  ],
  "sourcename": "sections/learn/tutorial/types.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">User-defined types</a><ul>\n<li><a class=\"reference internal\" href=\"#custom-type-checks\">Custom type checks</a></li>\n<li><a class=\"reference internal\" href=\"#providing-input-values-for-custom-types-in-config\">Providing input values for custom types in config</a></li>\n<li><a class=\"reference internal\" href=\"#testing-custom-types\">Testing custom types</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#metadata-and-data-quality-checks\">Metadata and data quality checks</a><ul>\n<li><a class=\"reference internal\" href=\"#expectations\">Expectations</a></li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/tutorial/types",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
