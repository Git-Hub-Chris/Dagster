{
  "parents": [
    { "link": "../../../learn/", "title": "Learn" },
    { "link": "../../", "title": "Guides" }
  ],
  "prev": { "link": "../../logging/logging/", "title": "Logging Guide" },
  "next": { "link": "../../../../api/api/", "title": "API Docs" },
  "title": "Data Science with Notebooks",
  "meta": {},
  "body": "\n<style>\n/* CSS for nbsphinx extension */\n\n/* remove conflicting styling from Sphinx themes */\ndiv.nbinput,\ndiv.nbinput div.prompt,\ndiv.nbinput div.input_area,\ndiv.nbinput div[class*=highlight],\ndiv.nbinput div[class*=highlight] pre,\ndiv.nboutput,\ndiv.nbinput div.prompt,\ndiv.nbinput div.output_area,\ndiv.nboutput div[class*=highlight],\ndiv.nboutput div[class*=highlight] pre {\n    background: none;\n    border: none;\n    padding: 0 0;\n    margin: 0;\n    box-shadow: none;\n}\n\n/* avoid gaps between output lines */\ndiv.nboutput div[class*=highlight] pre {\n    line-height: normal;\n}\n\n/* input/output containers */\ndiv.nbinput,\ndiv.nboutput {\n    display: -webkit-flex;\n    display: flex;\n    align-items: flex-start;\n    margin: 0;\n    width: 100%;\n}\n@media (max-width: 540px) {\n    div.nbinput,\n    div.nboutput {\n        flex-direction: column;\n    }\n}\n\n/* input container */\ndiv.nbinput {\n    padding-top: 5px;\n}\n\n/* last container */\ndiv.nblast {\n    padding-bottom: 5px;\n}\n\n/* input prompt */\ndiv.nbinput div.prompt pre {\n    color: #307FC1;\n}\n\n/* output prompt */\ndiv.nboutput div.prompt pre {\n    color: #BF5B3D;\n}\n\n/* all prompts */\ndiv.nbinput div.prompt,\ndiv.nboutput div.prompt {\n    min-width: 5ex;\n    padding-top: 0.4em;\n    padding-right: 0.4em;\n    text-align: right;\n    flex: 0;\n}\n@media (max-width: 540px) {\n    div.nbinput div.prompt,\n    div.nboutput div.prompt {\n        text-align: left;\n        padding: 0.4em;\n    }\n    div.nboutput div.prompt.empty {\n        padding: 0;\n    }\n}\n\n/* disable scrollbars on prompts */\ndiv.nbinput div.prompt pre,\ndiv.nboutput div.prompt pre {\n    overflow: hidden;\n}\n\n/* input/output area */\ndiv.nbinput div.input_area,\ndiv.nboutput div.output_area {\n    padding: 0.4em;\n    -webkit-flex: 1;\n    flex: 1;\n    overflow: auto;\n}\n@media (max-width: 540px) {\n    div.nbinput div.input_area,\n    div.nboutput div.output_area {\n        width: 100%;\n    }\n}\n\n/* input area */\ndiv.nbinput div.input_area {\n    border: 1px solid #e0e0e0;\n    border-radius: 2px;\n    background: #f5f5f5;\n}\n\n/* override MathJax center alignment in output cells */\ndiv.nboutput div[class*=MathJax] {\n    text-align: left !important;\n}\n\n/* override sphinx.ext.imgmath center alignment in output cells */\ndiv.nboutput div.math p {\n    text-align: left;\n}\n\n/* standard error */\ndiv.nboutput div.output_area.stderr {\n    background: #fdd;\n}\n\n/* ANSI colors */\n.ansi-black-fg { color: #3E424D; }\n.ansi-black-bg { background-color: #3E424D; }\n.ansi-black-intense-fg { color: #282C36; }\n.ansi-black-intense-bg { background-color: #282C36; }\n.ansi-red-fg { color: #E75C58; }\n.ansi-red-bg { background-color: #E75C58; }\n.ansi-red-intense-fg { color: #B22B31; }\n.ansi-red-intense-bg { background-color: #B22B31; }\n.ansi-green-fg { color: #00A250; }\n.ansi-green-bg { background-color: #00A250; }\n.ansi-green-intense-fg { color: #007427; }\n.ansi-green-intense-bg { background-color: #007427; }\n.ansi-yellow-fg { color: #DDB62B; }\n.ansi-yellow-bg { background-color: #DDB62B; }\n.ansi-yellow-intense-fg { color: #B27D12; }\n.ansi-yellow-intense-bg { background-color: #B27D12; }\n.ansi-blue-fg { color: #208FFB; }\n.ansi-blue-bg { background-color: #208FFB; }\n.ansi-blue-intense-fg { color: #0065CA; }\n.ansi-blue-intense-bg { background-color: #0065CA; }\n.ansi-magenta-fg { color: #D160C4; }\n.ansi-magenta-bg { background-color: #D160C4; }\n.ansi-magenta-intense-fg { color: #A03196; }\n.ansi-magenta-intense-bg { background-color: #A03196; }\n.ansi-cyan-fg { color: #60C6C8; }\n.ansi-cyan-bg { background-color: #60C6C8; }\n.ansi-cyan-intense-fg { color: #258F8F; }\n.ansi-cyan-intense-bg { background-color: #258F8F; }\n.ansi-white-fg { color: #C5C1B4; }\n.ansi-white-bg { background-color: #C5C1B4; }\n.ansi-white-intense-fg { color: #A1A6B2; }\n.ansi-white-intense-bg { background-color: #A1A6B2; }\n\n.ansi-default-inverse-fg { color: #FFFFFF; }\n.ansi-default-inverse-bg { background-color: #000000; }\n\n.ansi-bold { font-weight: bold; }\n.ansi-underline { text-decoration: underline; }\n\n/* Some additional styling taken form the Jupyter notebook CSS */\ndiv.rendered_html table {\n  border: none;\n  border-collapse: collapse;\n  border-spacing: 0;\n  color: black;\n  font-size: 12px;\n  table-layout: fixed;\n}\ndiv.rendered_html thead {\n  border-bottom: 1px solid black;\n  vertical-align: bottom;\n}\ndiv.rendered_html tr,\ndiv.rendered_html th,\ndiv.rendered_html td {\n  text-align: right;\n  vertical-align: middle;\n  padding: 0.5em 0.5em;\n  line-height: normal;\n  white-space: normal;\n  max-width: none;\n  border: none;\n}\ndiv.rendered_html th {\n  font-weight: bold;\n}\ndiv.rendered_html tbody tr:nth-child(odd) {\n  background: #f5f5f5;\n}\ndiv.rendered_html tbody tr:hover {\n  background: rgba(66, 165, 245, 0.2);\n}\n</style>\n<div class=\"section\" id=\"data-science-with-notebooks\">\n<h1>Data Science with Notebooks<a class=\"headerlink\" href=\"#data-science-with-notebooks\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"#notebooks-solids\"><span class=\"std std-ref\">Notebooks as solids</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"#expressing-dependencies\"><span class=\"std std-ref\">Expressing dependencies</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"#notebook-context\"><span class=\"std std-ref\">The notebook context</span></a></p></li>\n<li><p><a class=\"reference internal\" href=\"#results\"><span class=\"std std-ref\">Results and custom materializations</span></a></p></li>\n</ul>\n</div></blockquote>\n<p>Fast iteration, the literate combination of arbitrary code with markdown blocks, and inline plotting\nmake notebooks an indispensible tool for data science. The Dagstermill package makes it\nstraightforward to run notebooks using the Dagster tools and to integrate them into data pipelines\nwith heterogeneous solids: for instance, Spark jobs, SQL statements run against a data warehouse, or\narbitrary Python code.</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ pip install dagstermill\n</pre></div>\n</div>\n<p>Dagstermill lets you:</p>\n<ul class=\"simple\">\n<li><p>Run notebooks as solids in heterogeneous data pipelines with minimal changes to notebook code</p></li>\n<li><p>Define data dependencies to flow inputs and outputs between notebooks, and between notebooks and\nother solids</p></li>\n<li><p>Use Dagster resources, and the Dagster config system, from inside notebooks</p></li>\n<li><p>Aggregate notebook logs with logs from other Dagster solids</p></li>\n<li><p>Yield custom materializations and other Dagster events from your notebook code</p></li>\n</ul>\n<p>Our goal is to make it unnecessary to go through a tedious \u201cproductionization\u201d process where code\ndeveloped in notebooks must be translated into some other (less readable and interpretable) format\nin order to be integrated into production workflows. Instead, we can use notebooks as solids\ndirectly, with minimal, incremental metadata declarations to integrate them into pipelines that may\nalso contain arbitrary heterogeneous solids.</p>\n<div class=\"section\" id=\"notebooks-as-solids\">\n<span id=\"notebooks-solids\"></span><h2>Notebooks as solids<a class=\"headerlink\" href=\"#notebooks-as-solids\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Let\u2019s consider the classic Iris dataset (<a class=\"reference internal\" href=\"#id2\"><span class=\"std std-ref\">1</span></a>, <a class=\"reference internal\" href=\"#id3\"><span class=\"std std-ref\">2</span></a>), collected in 1936 by the\nAmerican botanist Edgar Anderson and made famous by statistician Ronald Fisher. The Iris dataset is\na basic example in machine learning because it contains three classes of observation, one of which\nis straightforwardly linearly separable from the other two, which in turn can only be distinguished\nby more sophisticated methods.</p>\n<blockquote>\n<div><ul class=\"simple\">\n<li><p><a class=\"reference internal\" href=\"../iris-kmeans/\"><span class=\"doc\">K-means clustering for the Iris data set</span></a>.</p></li>\n</ul>\n</div></blockquote>\n<p>Like many notebooks, this example does some fairly sophisticated work, producing diagnostic plots\nand a (flawed) statistical model \u2013 which are then locked away in the .ipynb format, can only\nbe reproduced using a complex Jupyter setup, and are only programmatically accessible within the\nnotebook context.</p>\n<p>Once we turn our notebook into a solid, we can start to make its outputs more accessible.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">iris_pipeline.py</span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dagstermill</span> <span class=\"k\">as</span> <span class=\"nn\">dm</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">PipelineDefinition</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster.utils</span> <span class=\"kn\">import</span> <span class=\"n\">script_relative_path</span>\n\n<span class=\"n\">k_means_iris_solid</span> <span class=\"o\">=</span> <span class=\"n\">dm</span><span class=\"o\">.</span><span class=\"n\">define_dagstermill_solid</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;k_means_iris&#39;</span><span class=\"p\">,</span> <span class=\"n\">script_relative_path</span><span class=\"p\">(</span><span class=\"s1\">&#39;iris-kmeans.ipynb&#39;</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">define_iris_pipeline</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">PipelineDefinition</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;iris_pipeline&#39;</span><span class=\"p\">,</span> <span class=\"n\">solid_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">k_means_iris_solid</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</div>\n<p>This is the simplest form of notebook integration \u2013 we don\u2019t actually have to make any changes in\nthe notebook itself to run it using the dagster tooling. Just run:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>dagit -f iris_pipeline.py -n define_iris_pipeline\n</pre></div>\n</div>\n<p>What\u2019s more, every time we run the notebook from Dagit, a copy of the notebook <cite>as executed</cite> will\nbe written to disk and the path of this output notebook will be made available in Dagit:</p>\n<a class=\"\"\n               data-lightbox=\"group-12d8b8d5-c4d8-4acf-9a1c-151adc34f6c0\"\n               href=\"../../../../../_images/iris_output_notebook1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../../_images/iris_output_notebook1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>The output notebook is both a rich log of notebook computations as they actually occurred, including\nall inline plots and results, and also an important tool for interactive debugging. When a notebook\nfails, the output notebook can be used to determine the cause of the failure.</p>\n</div>\n<div class=\"section\" id=\"expressing-dependencies\">\n<span id=\"id1\"></span><h2>Expressing dependencies<a class=\"headerlink\" href=\"#expressing-dependencies\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Notebooks often have implicit dependencies on external state like data warehouses, filesystems, and\nbatch processes. For example, even in our simple Iris example we\u2019re making assumptions about data\nthat\u2019s available locally, in this case the <code class=\"docutils literal notranslate\"><span class=\"pre\">iris.data</span></code> file:</p>\n<div class=\"nbinput docutils container\">\n<div class=\"prompt highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>[2]:\n</pre></div>\n</div>\n<div class=\"input_area highlight-ipython3 notranslate\"><div class=\"highlight\"><pre>\n<span></span> <span class=\"n\">iris</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span>\n     <span class=\"s1\">&#39;iris.data&#39;</span><span class=\"p\">,</span>\n     <span class=\"o\">...</span>\n <span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>The ability to express data dependencies between heterogeneous units of computation is core to\nDagster, and we can easily make notebooks depend on upstream solids.</p>\n<p>We\u2019ll illustrate this process by adding a non-notebook solid to our pipeline, which will take care\nof downloading the Iris data from the UCI repository. This is a somewhat contrived example; in\npractice, your notebook solids are more likely to rely on upstream jobs whose outputs might be\nhandles to tables in the data warehouse or to files on S3, and your notebook will likely handle\nthe task of fetching the data.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">iris_pipeline_2.py</span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><table class=\"highlighttable\"><tr><td class=\"linenos\"><div class=\"linenodiv\"><pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td><td class=\"code\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dagstermill</span> <span class=\"k\">as</span> <span class=\"nn\">dm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dagster_examples.util</span> <span class=\"kn\">import</span> <span class=\"n\">download_file</span>\n<span class=\"hll\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">DependencyDefinition</span><span class=\"p\">,</span> <span class=\"n\">InputDefinition</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">PipelineDefinition</span>\n<span class=\"hll\"><span class=\"kn\">from</span> <span class=\"nn\">dagster.utils</span> <span class=\"kn\">import</span> <span class=\"n\">script_relative_path</span>\n</span>\n<span class=\"n\">k_means_iris_solid</span> <span class=\"o\">=</span> <span class=\"n\">dm</span><span class=\"o\">.</span><span class=\"n\">define_dagstermill_solid</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;k_means_iris&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">script_relative_path</span><span class=\"p\">(</span><span class=\"s1\">&#39;iris-kmeans_2.ipynb&#39;</span><span class=\"p\">),</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;Local path to the Iris dataset&#39;</span><span class=\"p\">)],</span>\n<span class=\"hll\"><span class=\"p\">)</span>\n</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">define_iris_pipeline</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">PipelineDefinition</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;iris_pipeline&#39;</span><span class=\"p\">,</span>\n        <span class=\"n\">solid_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">download_file</span><span class=\"p\">,</span> <span class=\"n\">k_means_iris_solid</span><span class=\"p\">],</span>\n<span class=\"hll\">        <span class=\"n\">dependencies</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;k_means_iris&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">:</span> <span class=\"n\">DependencyDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;download_file&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;path&#39;</span><span class=\"p\">)}},</span>\n</span><span class=\"hll\">    <span class=\"p\">)</span>\n</span></pre></div>\n</td></tr></table></div>\n</div>\n<p>We\u2019ll configure the <code class=\"docutils literal notranslate\"><span class=\"pre\">download_file</span></code> solid with the URL to download the file from, and the local\npath at which to save it. This solid has one output, the path to the downloaded file. We\u2019ll want\nto use this path in place of the hardcoded string when we read the csv in to our notebook:</p>\n<div class=\"nbinput docutils container\">\n<div class=\"prompt highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>[2]:\n</pre></div>\n</div>\n<div class=\"input_area highlight-ipython3 notranslate\"><div class=\"highlight\"><pre>\n<span></span> <span class=\"n\">iris</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span>\n     <span class=\"n\">path</span><span class=\"p\">,</span>\n     <span class=\"o\">...</span>\n <span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>We need to make one more change to our notebook so that the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> parameter is injected by the\nDagstermill machinery at runtime.</p>\n<p>Dagstermill is built on Papermill (<a class=\"reference internal\" href=\"#id4\"><span class=\"std std-ref\">3</span></a>), which uses Jupyter cell tags to identify the cell\ninto which it should inject parameters at runtime. You will need to be running Jupyter 5.0 or later\nand may need to turn the display of cell tags on (select <em>View &gt; Cell Toolbar &gt; Tags</em> from the\nJupyter menu).</p>\n<a class=\"\"\n               data-lightbox=\"group-b5ac21d1-813b-440c-88d5-8b221c05befd\"\n               href=\"../../../../../_images/tags1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../../_images/tags1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>Tag the cell you want Dagstermill to replace at runtime with the tag <code class=\"docutils literal notranslate\"><span class=\"pre\">parameters</span></code>.</p>\n<p>In the <a class=\"reference internal\" href=\"../iris-kmeans_2/\"><span class=\"doc\">source notebook</span></a>., this cell will look like this:</p>\n<a class=\"\"\n               data-lightbox=\"group-ee544824-f122-42f3-966a-89f9fcbf18d8\"\n               href=\"../../../../../_images/parameters1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../../_images/parameters1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>In the source notebook, we can give our parameters values that are useful for interactive\ndevelopment (say, with a test dataset).</p>\n<p>Now we are ready to execute a pipeline that flows the output of arbitrary Python code into a\nnotebook:</p>\n<a class=\"\"\n               data-lightbox=\"group-e01fb389-2b18-4e1f-a101-34086db87cb6\"\n               href=\"../../../../../_images/iris_pipeline1.png\"\n               title=\"\"\n               data-title=\"\"\n               ><img src=\"../../../../../_images/iris_pipeline1.png\"\n                     class=\"\"\n                     width=\"100%\"\n                     height=\"auto\"\n                     alt=\"\"/>\n                </a><p>We\u2019ll use the following config:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id7\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">iris_pipeline.yaml</span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-yaml notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nt\">storage</span><span class=\"p\">:</span>\n  <span class=\"nt\">filesystem</span><span class=\"p\">:</span>\n<span class=\"nt\">solids</span><span class=\"p\">:</span>\n  <span class=\"nt\">download_file</span><span class=\"p\">:</span>\n    <span class=\"nt\">config</span><span class=\"p\">:</span>\n      <span class=\"nt\">path</span><span class=\"p\">:</span> <span class=\"s\">&quot;iris.data&quot;</span>\n      <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"s\">&quot;https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data&quot;</span>\n</pre></div>\n</div>\n</div>\n<p>When we execute this pipeline with Dagit, the <code class=\"docutils literal notranslate\"><span class=\"pre\">parameters</span></code> cell in the source notebook will be\ndynamically replaced in the output notebook by a new <code class=\"docutils literal notranslate\"><span class=\"pre\">injected-parameters</span></code> cell.</p>\n<p>The execution log contains the path to the output notebook so that you can access it after\nexecution to examine and potentially debug the output. This path is also displayed in dagit.</p>\n</div>\n<div class=\"section\" id=\"the-notebook-context\">\n<span id=\"notebook-context\"></span><h2>The notebook context<a class=\"headerlink\" href=\"#the-notebook-context\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You\u2019ll notice that the <code class=\"docutils literal notranslate\"><span class=\"pre\">injected-parameters</span></code> cell in your output notebooks defines a variable\ncalled <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code>.</p>\n<p>This context object mirrors the execution context object that\u2019s available in the body of any other\nsolid\u2019s compute function.</p>\n<p>As with the parameters that dagstermill injects, you can also construct a context object for\ninteractive exploration and development by using the <code class=\"docutils literal notranslate\"><span class=\"pre\">dagstermill.get_context</span></code> API in the\ntagged <code class=\"docutils literal notranslate\"><span class=\"pre\">parameters</span></code> cell of your input notebook. When dagstermill executes your notebook, this\ndevelopment context will be replaced with the injected runtime context.</p>\n<p>You can use the development context to access solid config and resources, to log messages, and to\nyield results and other Dagster events just as you would in production. When the runtime context is\ninjected by dagstermill, none of your other code needs to change.</p>\n<p>For instance, suppose we want to make the number of clusters (the _k_ in k-means) configurable.\nWe\u2019ll change our solid definition to include a config field:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id8\">\n<div class=\"code-block-caption\"><span class=\"caption-text\">iris_pipeline_3.py</span><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span>    <span class=\"s1\">&#39;k_means_iris&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">script_relative_path</span><span class=\"p\">(</span><span class=\"s1\">&#39;iris-kmeans_2.ipynb&#39;</span><span class=\"p\">),</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">,</span> <span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;Local path to the Iris dataset&#39;</span><span class=\"p\">)],</span>\n    <span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span>\n<span class=\"hll\">        <span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">is_optional</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;The number of clusters to find&#39;</span>\n</span><span class=\"hll\">    <span class=\"p\">),</span>\n</span><span class=\"hll\"><span class=\"p\">)</span>\n</span>\n</pre></div>\n</div>\n</div>\n<p>In our notebook, we\u2019ll stub the context as follows (in the <code class=\"docutils literal notranslate\"><span class=\"pre\">parameters</span></code> cell):</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">dagstermill</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">dagster</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">SolidDefinition</span>\n\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">dagstermill</span><span class=\"o\">.</span><span class=\"n\">get_context</span><span class=\"p\">(</span><span class=\"n\">solid_config</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now we can use our config value in our estimator. In production, this will be replaced by the config\nvalue provided to the pipeline:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">estimator</span> <span class=\"o\">=</span> <span class=\"n\">sklearn</span><span class=\"o\">.</span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">KMeans</span><span class=\"p\">(</span><span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"results-and-custom-materializations\">\n<span id=\"results\"></span><h2>Results and custom materializations<a class=\"headerlink\" href=\"#results-and-custom-materializations\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you\u2019d like to yield a result to be consumed downstream of a dagstermill notebook, you can call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dagstermill.yield_result</span></code> with the value of the result and its name. In interactive execution,\nthis is a no-op, so you don\u2019t need to change anything when moving from interactive exploration and\ndevelopment to production.</p>\n<p>You can also yield custom <a class=\"reference internal\" href=\"../../../../api/apidocs/solids/#dagster.Materialization\" title=\"dagster.Materialization\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dagster.Materialization</span></code></a> objects\n(for instance, to tell dagit where you\u2019ve saved a plot) by calling <code class=\"docutils literal notranslate\"><span class=\"pre\">dagstermill.yield_event</span></code>.</p>\n</div>\n<div class=\"section\" id=\"references\">\n<h2>References<a class=\"headerlink\" href=\"#references\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ol class=\"arabic simple\" id=\"id2\">\n<li><p>Dua, D. and Graff, C. (2019). Iris Data Set. UCI Machine Learning Repository\n[<a class=\"reference external\" href=\"https://archive.ics.uci.edu/ml/datasets/iris\">https://archive.ics.uci.edu/ml/datasets/iris</a>]. Irvine, CA: University of California,\nSchool of Information and Computer Science.</p></li>\n</ol>\n<ol class=\"arabic simple\" id=\"id3\" start=\"2\">\n<li><p>_Iris_ flower data set [<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Iris_flower_data_set\">https://en.wikipedia.org/wiki/Iris_flower_data_set</a>]</p></li>\n</ol>\n<ol class=\"arabic simple\" id=\"id4\" start=\"3\">\n<li><p>nteract/papermill [<a class=\"reference external\" href=\"https://papermill.readthedocs.io/en/latest/\">https://papermill.readthedocs.io/en/latest/</a>]</p></li>\n</ol>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    ["sections/api/api", "API Docs", "N", "next"],
    ["sections/learn/guides/logging/logging", "Logging Guide", "P", "previous"]
  ],
  "sourcename": "sections/learn/guides/data_science/data_science.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Data Science with Notebooks</a><ul>\n<li><a class=\"reference internal\" href=\"#notebooks-as-solids\">Notebooks as solids</a></li>\n<li><a class=\"reference internal\" href=\"#expressing-dependencies\">Expressing dependencies</a></li>\n<li><a class=\"reference internal\" href=\"#the-notebook-context\">The notebook context</a></li>\n<li><a class=\"reference internal\" href=\"#results-and-custom-materializations\">Results and custom materializations</a></li>\n<li><a class=\"reference internal\" href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/learn/guides/data_science/data_science",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
