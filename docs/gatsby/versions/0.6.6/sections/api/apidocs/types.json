{
  "parents": [{ "link": "../../api/", "title": "API Docs" }],
  "prev": { "link": "../execution/", "title": "Execution" },
  "next": { "link": "../errors/", "title": "Errors" },
  "title": "Types",
  "meta": {},
  "body": "<div class=\"section\" id=\"module-dagster\">\n<span id=\"types\"></span><h1>Types<a class=\"headerlink\" href=\"#module-dagster\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Dagster includes facilities for typing the input and output values of solids (\u201cruntime\u201d types), as\nwell as for writing strongly typed config schemas to support tools like Dagit\u2019s config editor\n(\u201cconfig\u201d types).</p>\n<div class=\"section\" id=\"built-in-types\">\n<span id=\"builtin\"></span><h2>Built-in types<a class=\"headerlink\" href=\"#built-in-types\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"attribute\">\n<dt id=\"dagster.Any\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Any</code><a class=\"headerlink\" href=\"#dagster.Any\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type for any input, output, or config field whose type is unconstrained</p>\n<p>All values are considered to be instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">Any</span></code>.</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">identity</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"c1\"># Untyped inputs and outputs are implicitly typed Any</span>\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">identity_imp</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"c1\"># Explicitly typed on Python 2</span>\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Any</span><span class=\"p\">)],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Any</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">identity_py2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Any</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">any_config</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.Bool\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Bool</code><a class=\"headerlink\" href=\"#dagster.Bool\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type for any boolean input, output, or config_field. At runtime, this will perform an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">isinstance(value,</span> <span class=\"pre\">bool)</span></code> check. You may also use the ordinary <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#bool\" title=\"(in Python v3.8)\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code></a>\ntype as an alias.</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">boolean</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Bool</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">String</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;true&#39;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;false&#39;</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">empty_string</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># Python 2</span>\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Bool</span><span class=\"p\">)],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">String</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">boolean_py2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;true&#39;</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;false&#39;</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">String</span><span class=\"p\">)],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"nb\">bool</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">empty_string_py2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Bool</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">bool_config</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;true&#39;</span> <span class=\"k\">if</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span> <span class=\"k\">else</span> <span class=\"s1\">&#39;false&#39;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.Int\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Int</code><a class=\"headerlink\" href=\"#dagster.Int\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type for any integer input or output. At runtime, this will perform an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">isinstance(value,</span> <span class=\"pre\">six.integer_types)</span></code> check \u2013 that is, on Python 2, both <code class=\"docutils literal notranslate\"><span class=\"pre\">long</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> will pass this check. In Python 3, you may also use the ordinary <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#int\" title=\"(in Python v3.8)\"><code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code></a>\ntype as an alias.</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_3</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">3</span>\n\n<span class=\"c1\"># Python 2</span>\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Int</span><span class=\"p\">)],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_3_py2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">3</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.Float\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Float</code><a class=\"headerlink\" href=\"#dagster.Float\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type for any float input, output, or config value. At runtime, this will perform an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">isinstance(value,</span> <span class=\"pre\">float)</span></code> check. You may also use the ordinary <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#float\" title=\"(in Python v3.8)\"><code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code></a>\ntype as an alias.</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">div_2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Float</span><span class=\"p\">)],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"nb\">float</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">div_2_py_2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Float</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">div_y</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">Float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.String\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">String</code><a class=\"headerlink\" href=\"#dagster.String\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type for any string input, output, or config value. At runtime, this will perform an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">isinstance(value,</span> <span class=\"pre\">six.string_types)</span></code> \u2013 that is on Python 2, both <code class=\"docutils literal notranslate\"><span class=\"pre\">unicode</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>\nwill pass this check. In Python 3, you may also use the ordinary <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code></a> type\nas an alias.</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">concat</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">String</span><span class=\"p\">),</span>\n        <span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">concat_py_2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;Hello, </span><span class=\"si\">{friend}</span><span class=\"s1\">!&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">friend</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.Path\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Path</code><a class=\"headerlink\" href=\"#dagster.Path\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type to indicate that a string input, output, or config value represents a path. At\nruntime, this will perform an <code class=\"docutils literal notranslate\"><span class=\"pre\">isinstance(value,</span> <span class=\"pre\">six.string_types)</span></code> \u2013 that is on Python 2,\nboth <code class=\"docutils literal notranslate\"><span class=\"pre\">unicode</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> will pass this check.</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Path</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Bool</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;path&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Path</span><span class=\"p\">)],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Bool</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">exists_py2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">unpickle</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">,</span> <span class=\"s1\">&#39;rb&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.Nothing\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Nothing</code><a class=\"headerlink\" href=\"#dagster.Nothing\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type only for inputs and outputs, in order to establish an execution dependency without\ncommunicating a value. Inputs of this type will not be pased to the solid compute function, so\nit is necessary to use the explicit <a class=\"reference internal\" href=\"../solids/#dagster.InputDefinition\" title=\"dagster.InputDefinition\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InputDefinition</span></code></a> API to define them rather than\nthe Python 3 type hint syntax.</p>\n<p>All values are considered to be instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">Nothing</span></code>.</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">wait</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Nothing</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;ready&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Nothing</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">done</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;done&#39;</span>\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">nothing_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">done</span><span class=\"p\">(</span><span class=\"n\">wait</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Any value will pass the type check for Nothing</span>\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">wait_int</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Int</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">nothing_int_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">done</span><span class=\"p\">(</span><span class=\"n\">wait_int</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.Optional\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Optional</code><a class=\"headerlink\" href=\"#dagster.Optional\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type only for inputs and outputs, if the value can also be <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. For config values,\nset the <code class=\"docutils literal notranslate\"><span class=\"pre\">is_optional</span></code> parameter on <a class=\"reference internal\" href=\"#dagster.Field\" title=\"dagster.Field\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Field</span></code></a>.</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">nullable_concat</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">String</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"ow\">or</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Python 2</span>\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">String</span><span class=\"p\">),</span>\n        <span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;y&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">])</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">String</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">nullable_concat_py2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"ow\">or</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.List\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">List</code><a class=\"headerlink\" href=\"#dagster.List\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type for inputs, outputs, or config values that are lists of values of the inner type.</p>\n<p>Lists are also the appropriate input types when fanning in multiple outputs using a\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultiDependencyDefinition</span></code> or the equivalent composition function syntax.</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">concat_list</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">xs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">String</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Python 2</span>\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;xs&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">])],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">String</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">concat_list_py2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">xs</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">String</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">]))</span>\n<span class=\"k\">def</span> <span class=\"nf\">concat_config</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">String</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Fanning in multiple outputs</span>\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">emit_1</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"mi\">1</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">emit_2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"mi\">2</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">emit_3</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"mi\">3</span>\n\n<span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">sum_solid</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">xs</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">xs</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@pipeline</span>\n<span class=\"k\">def</span> <span class=\"nf\">sum_pipeline</span><span class=\"p\">():</span>\n    <span class=\"n\">sum_solid</span><span class=\"p\">([</span><span class=\"n\">emit_1</span><span class=\"p\">(),</span> <span class=\"n\">emit_2</span><span class=\"p\">(),</span> <span class=\"n\">emit_3</span><span class=\"p\">()])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.Dict\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Dict</code><a class=\"headerlink\" href=\"#dagster.Dict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type for inputs, outputs, or config values that are dicts.</p>\n<p>For inputs and outputs, you may optionally specify the key and value types using the square\nbrackets syntax for Python typing.</p>\n<p>For config values, you should pass an argument that is itself a dict from string keys to\n<a class=\"reference internal\" href=\"#dagster.Field\" title=\"dagster.Field\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> values, which will define the schema of the config dict. For config\nvalues where you do not intend to enforce a schema on the dict, use <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PermissiveDict</span></code>.\n(If the top level <code class=\"docutils literal notranslate\"><span class=\"pre\">config_field</span></code> of a solid is a dict, as is usually the case, you may also\nuse the <code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code> param on <a class=\"reference internal\" href=\"../solids/#dagster.solid\" title=\"dagster.solid\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;solid</span></code></a> and omit the top-level <code class=\"docutils literal notranslate\"><span class=\"pre\">Dict</span></code> type.)</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">repeat</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">spec</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">spec</span><span class=\"p\">[</span><span class=\"s1\">&#39;word&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">spec</span><span class=\"p\">[</span><span class=\"s1\">&#39;times&#39;</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Python 2</span>\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;spec&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Dict</span><span class=\"p\">)],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)]</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">repeat_py2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">spec</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">spec</span><span class=\"p\">[</span><span class=\"s1\">&#39;word&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">spec</span><span class=\"p\">[</span><span class=\"s1\">&#39;times&#39;</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Dict</span><span class=\"p\">({</span><span class=\"s1\">&#39;word&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">),</span> <span class=\"s1\">&#39;times&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Int</span><span class=\"p\">)})))</span>\n<span class=\"k\">def</span> <span class=\"nf\">repeat_config</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;word&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;times&#39;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.Set\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Set</code><a class=\"headerlink\" href=\"#dagster.Set\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type for inputs, outputs, or config values that are sets. Alias for\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/typing.html#typing.Set\" title=\"(in Python v3.8)\"><code class=\"docutils literal notranslate\"><span class=\"pre\">typing.Set</span></code></a>.</p>\n<p>You may optionally specify the inner type using the square brackets syntax for Python typing.</p>\n<p>Config values should be passed as a list (in YAML or the Python config dict). Duplicate\nentries will be silently coalesced.</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_solid</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">set_input</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">]:</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">set_input</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Python 2</span>\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;set_input&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">])],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">])],</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_solid_py2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">set_input</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">set_input</span><span class=\"p\">])</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Set</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_config</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">])</span>\n\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]))</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_any_config</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">])</span>\n\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]))</span>\n<span class=\"k\">def</span> <span class=\"nf\">set_string_config</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"attribute\">\n<dt id=\"dagster.Tuple\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Tuple</code><a class=\"headerlink\" href=\"#dagster.Tuple\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Use this type for inputs, outputs, or config fields that are tuples. Alias for\n<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">typing.Tuple</span></code>.</p>\n<p>You may optionally specify the inner types using the square brackets syntax for Python typing.</p>\n<p>Config values should be passed as a list (in YAML or the Python config dict).</p>\n<p><strong>Examples:</strong></p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span>\n<span class=\"k\">def</span> <span class=\"nf\">tuple_solid</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">tuple_input</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">Float</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"n\">List</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">tuple_input</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Python 2</span>\n<span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">input_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">InputDefinition</span><span class=\"p\">(</span><span class=\"s1\">&#39;tuple_input&#39;</span><span class=\"p\">,</span> <span class=\"n\">dagster_type</span><span class=\"o\">=</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">Float</span><span class=\"p\">])],</span>\n    <span class=\"n\">output_defs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">OutputDefinition</span><span class=\"p\">(</span><span class=\"n\">List</span><span class=\"p\">)],</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">tuple_solid_py2</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">tuple_input</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">tuple_input</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Tuple</span><span class=\"p\">))</span>\n<span class=\"k\">def</span> <span class=\"nf\">tuple_config</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">])</span>\n\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]))</span>\n<span class=\"k\">def</span> <span class=\"nf\">any_tuple_config</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">])</span>\n\n<span class=\"nd\">@solid</span><span class=\"p\">(</span><span class=\"n\">config_field</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">Float</span><span class=\"p\">]))</span>\n<span class=\"k\">def</span> <span class=\"nf\">heterogeneous_tuple_config</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"s1\">&#39;:&#39;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"config-types\">\n<h2>Config Types<a class=\"headerlink\" href=\"#config-types\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The following types are used to describe the schema of configuration\ndata via <code class=\"docutils literal notranslate\"><span class=\"pre\">config_field</span></code>. They are used in conjunction with the\nbuiltin types above.</p>\n<dl class=\"function\">\n<dt id=\"dagster.Field\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Field</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dagster_type</em>, <em class=\"sig-param\">default_value=&lt;class 'dagster.config.field_utils.__FieldValueSentinel'&gt;</em>, <em class=\"sig-param\">is_optional=None</em>, <em class=\"sig-param\">is_required=None</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/config/field/#Field\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.Field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defines the schema for a configuration field.</p>\n<p>Config fields are parsed according to their schemas in order to yield values available at\npipeline execution time through the config system. Config fields can be set on solids, on custom\ndata types (as the <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;input_hydration_schema</span></code>), and on\nother pluggable components of the system, such as resources, loggers, and executors.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>dagster_type</strong> (<em>Any</em>) \u2013 The type of this field. Users should provide one of the\n<a class=\"reference internal\" href=\"#builtin\"><span class=\"std std-ref\">built-in types</span></a>, a composite constructed using <a class=\"reference internal\" href=\"#dagster.Selector\" title=\"dagster.Selector\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Selector()</span></code></a>\nor <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Permissive()</span></code>, or a dagster type constructed with\n<a class=\"reference internal\" href=\"#dagster.as_dagster_type\" title=\"dagster.as_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">as_dagster_type()</span></code></a>, <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;dagster_type</span> <span class=\"pre\">&lt;dagster_type()</span></code>, or\n<a class=\"reference internal\" href=\"#dagster.define_python_dagster_type\" title=\"dagster.define_python_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">define_python_dagster_type()</span></code></a> that has an <code class=\"docutils literal notranslate\"><span class=\"pre\">input_hydration_config</span></code> defined.\nNote that these constructs can be nested \u2013 i.e., a <a class=\"reference internal\" href=\"#dagster.Dict\" title=\"dagster.Dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dict</span></code></a> can itself contain\n<a class=\"reference internal\" href=\"#dagster.Field\" title=\"dagster.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Fields</span></code></a> of other types, etc.</p></li>\n<li><p><strong>default_value</strong> (<em>Any</em>) \u2013 A default value for this field, conformant to the schema set by the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_type</span></code> argument. If a default value is provided, <code class=\"docutils literal notranslate\"><span class=\"pre\">is_optional</span></code> should be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p></li>\n<li><p><strong>is_required</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#bool\" title=\"(in Python v3.8)\"><em>bool</em></a>) \u2013 Whether the presence of this field is required. Defaults to true. If <code class=\"docutils literal notranslate\"><span class=\"pre\">is_required</span></code>\nis <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, no default value should be provided.</p></li>\n<li><p><strong>is_optional</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#bool\" title=\"(in Python v3.8)\"><em>bool</em></a><em>) </em><em>(</em><em>deprecated</em>) \u2013 Whether the presence of this field is optional. If <code class=\"docutils literal notranslate\"><span class=\"pre\">is_optional</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, no\ndefault value should be provided. Deprecated. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">is_required</span></code> instead.</p></li>\n<li><p><strong>description</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 A human-readable description of this config field.</p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span>\n        <span class=\"n\">Dict</span><span class=\"p\">({</span><span class=\"s1\">&#39;word&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">),</span> <span class=\"s1\">&#39;repeats&#39;</span><span class=\"p\">:</span> <span class=\"n\">Int</span><span class=\"p\">})</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">repeat_word</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;word&#39;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;repeats&#39;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"dagster.Selector\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Selector</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">fields</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/config/field_utils/#Selector\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.Selector\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Define a config field requiring the user to select one option.</p>\n<p>Selectors are used when you want to be able to present several different options in config but\nallow only one to be selected. For example, a single input might be read in from either a csv\nfile or a parquet file, but not both at once.</p>\n<p>Note that in some other type systems this might be called an \u2018input union\u2019.</p>\n<p>Functionally, a selector is like a <a class=\"reference internal\" href=\"#dagster.Dict\" title=\"dagster.Dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Dict</span></code></a>, except that only one key from the dict can\nbe specified in valid config.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>fields</strong> (<em>Dict</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>, </em><em>Field</em><em>]</em>) \u2013 The fields from which the user must select.</p>\n</dd>\n</dl>\n<p>Examples:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span>\n        <span class=\"n\">Selector</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span>\n                <span class=\"s1\">&#39;haw&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;whom&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;honua&#39;</span><span class=\"p\">,</span> <span class=\"n\">is_required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)},</span>\n                <span class=\"s1\">&#39;cn&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;whom&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;\u4e16\u754c&#39;</span><span class=\"p\">,</span> <span class=\"n\">is_required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)},</span>\n                <span class=\"s1\">&#39;en&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;whom&#39;</span><span class=\"p\">:</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"s1\">&#39;world&#39;</span><span class=\"p\">,</span> <span class=\"n\">is_required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)},</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">is_required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">default_value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">&#39;en&#39;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;whom&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;world&#39;</span><span class=\"p\">}},</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">hello_world_with_default</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;haw&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;Aloha </span><span class=\"si\">{whom}</span><span class=\"s1\">!&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">whom</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;haw&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;whom&#39;</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;cn&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;\u4f60\u597d\uff0c</span><span class=\"si\">{whom}</span><span class=\"s1\">!&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">whom</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;cn&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;whom&#39;</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;en&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;Hello, </span><span class=\"si\">{whom}</span><span class=\"s1\">!&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">whom</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">solid_config</span><span class=\"p\">[</span><span class=\"s1\">&#39;en&#39;</span><span class=\"p\">][</span><span class=\"s1\">&#39;whom&#39;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"dagster.Enum\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">Enum</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name</em>, <em class=\"sig-param\">enum_values</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/config/config_type/#Enum\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.Enum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defines a enum configuration type that allows one of a defined set of possible values.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>name</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 </p></li>\n<li><p><strong>enum_values</strong> (<em>List</em><em>[</em><em>EnumValue</em><em>]</em>) \u2013 </p></li>\n</ul>\n</dd>\n</dl>\n<p class=\"rubric\">Example</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@solid</span><span class=\"p\">(</span>\n    <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">Field</span><span class=\"p\">(</span>\n        <span class=\"n\">Enum</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;CowboyType&#39;</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span>\n                <span class=\"n\">EnumValue</span><span class=\"p\">(</span><span class=\"s1\">&#39;good&#39;</span><span class=\"p\">),</span>\n                <span class=\"n\">EnumValue</span><span class=\"p\">(</span><span class=\"s1\">&#39;bad&#39;</span><span class=\"p\">),</span>\n                <span class=\"n\">EnumValue</span><span class=\"p\">(</span><span class=\"s1\">&#39;ugly&#39;</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">resolve_standoff</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"dagster.EnumValue\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">EnumValue</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">config_value</em>, <em class=\"sig-param\">python_value=None</em>, <em class=\"sig-param\">description=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/config/config_type/#EnumValue\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.EnumValue\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Define an entry in a <a class=\"reference internal\" href=\"#dagster.Enum\" title=\"dagster.Enum\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Enum()</span></code></a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>config_value</strong> (<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a>) \u2013 The string representation of the config to accept when passed.</p></li>\n<li><p><strong>python_value</strong> (<em>Optional</em><em>[</em><em>Any</em><em>]</em>) \u2013 The python value to convert the enum entry in to. Defaults to the <code class=\"docutils literal notranslate\"><span class=\"pre\">config_value</span></code>.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 </p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n</div>\n<hr class=\"docutils\" />\n<div class=\"section\" id=\"making-new-types\">\n<h2>Making New Types<a class=\"headerlink\" href=\"#making-new-types\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"function\">\n<dt id=\"dagster.as_dagster_type\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">as_dagster_type</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">existing_type</em>, <em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">input_hydration_config=None</em>, <em class=\"sig-param\">output_materialization_config=None</em>, <em class=\"sig-param\">serialization_strategy=None</em>, <em class=\"sig-param\">auto_plugins=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/types/decorator/#as_dagster_type\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.as_dagster_type\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create a Dagster type corresponding to an existing Python type.</p>\n<p>This function allows you to explicitly wrap existing types in a new Dagster type, and is\nespecially useful when using library types (e.g., from a data processing library) that might\nrequire additional functionality such as input config to be useful in your pipelines.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>python_type</strong> (<em>cls</em>) \u2013 The python type to wrap as a Dagster type.</p></li>\n<li><p><strong>name</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Name of the new Dagster type. If <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the name (<code class=\"docutils literal notranslate\"><span class=\"pre\">__name__</span></code>) of\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">python_type</span></code> will be used.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A user-readable description of the type.</p></li>\n<li><p><strong>input_hydration_config</strong> (<em>Optional</em><em>[</em><em>InputHydrationConfig</em><em>]</em>) \u2013 An instance of a class that\ninherits from <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InputHydrationConfig</span></code> and can map config data to a value of\nthis type. Specify this argument if you will need to shim values of this type using the\nconfig machinery. As a rule, you should use the\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;input_hydration_config</span></code> decorator to construct\nthese arguments.</p></li>\n<li><p><strong>output_materialization_config</strong> (<em>Optiona</em><em>[</em><em>OutputMaterializationConfig</em><em>]</em>) \u2013 An instance of a class\nthat inherits from <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OutputMaterializationConfig</span></code> and can persist values of\nthis type. As a rule, you should use the\n<a class=\"reference internal\" href=\"#dagster.output_materialization_config\" title=\"dagster.output_materialization_config\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;output_materialization_config</span></code></a>\ndecorator to construct these arguments.</p></li>\n<li><p><strong>serialization_strategy</strong> (<em>Optional</em><em>[</em><em>SerializationStrategy</em><em>]</em>) \u2013 An instance of a class that\ninherits from <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SerializationStrategy</span></code>. The default strategy for serializing\nthis value when automatically persisting it between execution steps. You should set\nthis value if the ordinary serialization machinery (e.g., pickle) will not be adequate\nfor this type.</p></li>\n<li><p><strong>auto_plugins</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><em>TypeStoragePlugin</em><em>]</em><em>]</em>) \u2013 If types must be serialized differently\ndepending on the storage being used for intermediates, they should specify this\nargument. In these cases the serialization_strategy argument is not sufficient because\nserialization requires specialized API calls, e.g. to call an S3 API directly instead\nof using a generic file object. See <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_pyspark.DataFrame</span></code> for an example.</p></li>\n</ul>\n</dd>\n</dl>\n<p>Examples:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Partial example drawn from dagster_pandas.DataFrame</span>\n\n<span class=\"n\">DataFrame</span> <span class=\"o\">=</span> <span class=\"n\">as_dagster_type</span><span class=\"p\">(</span>\n    <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;PandasDataFrame&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;&#39;Two-dimensional size-mutable, potentially heterogeneous</span>\n<span class=\"s1\">    tabular data structure with labeled axes (rows and columns).</span>\n<span class=\"s1\">    See http://pandas.pydata.org/&#39;&#39;&#39;</span><span class=\"p\">,</span>\n    <span class=\"n\">input_hydration_config</span><span class=\"o\">=</span><span class=\"n\">dataframe_input_schema</span><span class=\"p\">,</span>\n    <span class=\"n\">output_materialization_config</span><span class=\"o\">=</span><span class=\"n\">dataframe_output_schema</span><span class=\"p\">,</span>\n    <span class=\"n\">type_check</span><span class=\"o\">=</span><span class=\"n\">df_type_check</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>See, e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_pandas.DataFrame</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_pyspark.SparkRDD</span></code> for fuller worked\nexamples.</p>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"dagster.dagster_type\">\n<code class=\"sig-prename descclassname\">&#64;</code><code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">dagster_type</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">input_hydration_config=None</em>, <em class=\"sig-param\">output_materialization_config=None</em>, <em class=\"sig-param\">serialization_strategy=None</em>, <em class=\"sig-param\">auto_plugins=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/types/decorator/#dagster_type\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.dagster_type\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Decorate a Python class to turn it into a Dagster type.</p>\n<p>This is intended to make it straightforward to annotate existing business logic classes to\nmake them compatible with the Dagster type system and to add any additional facilities, such\nas input schemas, that they may need to be useful in your pipelines.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>python_type</strong> (<em>cls</em>) \u2013 The python type to wrap as a Dagster type.</p></li>\n<li><p><strong>name</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Name of the new Dagster type. If <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the name (<code class=\"docutils literal notranslate\"><span class=\"pre\">__name__</span></code>) of\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">python_type</span></code> will be used.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A user-readable description of the type.</p></li>\n<li><p><strong>input_hydration_config</strong> (<em>Optional</em><em>[</em><em>InputHydrationConfig</em><em>]</em>) \u2013 An instance of a class that\ninherits from <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InputHydrationConfig</span></code> and can map config data to a value of\nthis type. Specify this argument if you will need to shim values of this type using the\nconfig machinery. As a rule, you should use the\n<code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;input_hydration_config</span></code> decorator to construct\nthese arguments.</p></li>\n<li><p><strong>output_materialization_config</strong> (<em>Optiona</em><em>[</em><em>OutputMaterializationConfig</em><em>]</em>) \u2013 An instance of a class\nthat inherits from <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OutputMaterializationConfig</span></code> and can persist values of\nthis type. As a rule, you should use the\n<a class=\"reference internal\" href=\"#dagster.output_materialization_config\" title=\"dagster.output_materialization_config\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;output_materialization_config</span></code></a>\ndecorator to construct these arguments.</p></li>\n<li><p><strong>serialization_strategy</strong> (<em>Optional</em><em>[</em><em>SerializationStrategy</em><em>]</em>) \u2013 An instance of a class that\ninherits from <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SerializationStrategy</span></code>. The default strategy for serializing\nthis value when automatically persisting it between execution steps. You should set\nthis value if the ordinary serialization machinery (e.g., pickle) will not be adequate\nfor this type.</p></li>\n<li><p><strong>auto_plugins</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><em>TypeStoragePlugin</em><em>]</em><em>]</em>) \u2013 If types must be serialized differently\ndepending on the storage being used for intermediates, they should specify this\nargument. In these cases the serialization_strategy argument is not sufficient because\nserialization requires specialized API calls, e.g. to call an S3 API directly instead\nof using a generic file object. See <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_pyspark.DataFrame</span></code> for an example.</p></li>\n</ul>\n</dd>\n</dl>\n<p>Examples:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># dagster_aws.s3.file_manager.S3FileHandle</span>\n<span class=\"nd\">@dagster_type</span>\n<span class=\"k\">class</span> <span class=\"nc\">S3FileHandle</span><span class=\"p\">(</span><span class=\"n\">FileHandle</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s3_bucket</span><span class=\"p\">,</span> <span class=\"n\">s3_key</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_s3_bucket</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">str_param</span><span class=\"p\">(</span><span class=\"n\">s3_bucket</span><span class=\"p\">,</span> <span class=\"s1\">&#39;s3_bucket&#39;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_s3_key</span> <span class=\"o\">=</span> <span class=\"n\">check</span><span class=\"o\">.</span><span class=\"n\">str_param</span><span class=\"p\">(</span><span class=\"n\">s3_key</span><span class=\"p\">,</span> <span class=\"s1\">&#39;s3_key&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">s3_bucket</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_s3_bucket</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">s3_key</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_s3_key</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">path_desc</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">s3_path</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">s3_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;s3://</span><span class=\"si\">{bucket}</span><span class=\"s1\">/</span><span class=\"si\">{key}</span><span class=\"s1\">&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">bucket</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">s3_bucket</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">s3_key</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"dagster.define_python_dagster_type\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">define_python_dagster_type</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">python_type</em>, <em class=\"sig-param\">name=None</em>, <em class=\"sig-param\">description=None</em>, <em class=\"sig-param\">input_hydration_config=None</em>, <em class=\"sig-param\">output_materialization_config=None</em>, <em class=\"sig-param\">serialization_strategy=None</em>, <em class=\"sig-param\">auto_plugins=None</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/types/dagster_type/#define_python_dagster_type\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.define_python_dagster_type\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Core machinery for defining a Dagster type corresponding to an existing python type.</p>\n<p>Users should generally use the <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;dagster_type()</span></code> decorator or <a class=\"reference internal\" href=\"#dagster.as_dagster_type\" title=\"dagster.as_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">as_dagster_type()</span></code></a>,\nboth of which defer to this function.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>python_type</strong> (<em>cls</em>) \u2013 The python type to wrap as a Dagster type.</p></li>\n<li><p><strong>name</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 Name of the new Dagster type. If <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the name (<code class=\"docutils literal notranslate\"><span class=\"pre\">__name__</span></code>) of\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">python_type</span></code> will be used.</p></li>\n<li><p><strong>description</strong> (<em>Optional</em><em>[</em><a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str\" title=\"(in Python v3.8)\"><em>str</em></a><em>]</em>) \u2013 A user-readable description of the type.</p></li>\n<li><p><strong>input_hydration_config</strong> (<em>Optional</em><em>[</em><em>InputHydrationConfig</em><em>]</em>) \u2013 An instance of a class constructed\nusing the <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;input_hydration_config</span></code> decorator\nthat can map config data to a value of this type.</p></li>\n<li><p><strong>output_materialization_config</strong> (<em>Optiona</em><em>[</em><em>OutputMaterializationConfig</em><em>]</em>) \u2013 An instance of a class\nconstructed using the\n<a class=\"reference internal\" href=\"#dagster.output_materialization_config\" title=\"dagster.output_materialization_config\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;output_materialization_config</span></code></a>\ndecorator that can persist values of this type.</p></li>\n<li><p><strong>serialization_strategy</strong> (<em>Optional</em><em>[</em><em>SerializationStrategy</em><em>]</em>) \u2013 An instance of a class that\ninherits from <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SerializationStrategy</span></code>. The default strategy for serializing\nthis value when automatically persisting it between execution steps. You should set\nthis value if the ordinary serialization machinery (e.g., pickle) will not be adequate\nfor this type.</p></li>\n<li><p><strong>auto_plugins</strong> (<em>Optional</em><em>[</em><em>List</em><em>[</em><em>TypeStoragePlugin</em><em>]</em><em>]</em>) \u2013 If types must be serialized differently\ndepending on the storage being used for intermediates, they should specify this\nargument. In these cases the serialization_strategy argument is not sufficient because\nserialization requires specialized API calls, e.g. to call an S3 API directly instead\nof using a generic file object. See <code class=\"docutils literal notranslate\"><span class=\"pre\">dagster_pyspark.DataFrame</span></code> for an example.</p></li>\n</ul>\n</dd>\n</dl>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"dagster.input_hydration_config\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">input_hydration_config</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">config_cls</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/types/config_schema/#input_hydration_config\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.input_hydration_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an input hydration config that maps config data to a runtime value.</p>\n<p>The decorated function should take the execution context and parsed config value and return the\nappropriate runtime value.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>config_cls</strong> (<em>Any</em>) \u2013 The type of the config data expected by the decorated function. Users\nshould provide one of the <a class=\"reference internal\" href=\"#builtin\"><span class=\"std std-ref\">built-in types</span></a>, or a composite constructed\nusing <a class=\"reference internal\" href=\"#dagster.Selector\" title=\"dagster.Selector\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Selector()</span></code></a> or <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Permissive()</span></code>.</p>\n</dd>\n</dl>\n<p>Examples:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@input_hydration_config</span><span class=\"p\">(</span><span class=\"n\">Permissive</span><span class=\"p\">())</span>\n<span class=\"k\">def</span> <span class=\"nf\">_dict_input</span><span class=\"p\">(</span><span class=\"n\">_context</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"function\">\n<dt id=\"dagster.output_materialization_config\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">output_materialization_config</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">config_cls</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/core/types/config_schema/#output_materialization_config\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.output_materialization_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Create an output materialization hydration config that configurably materializes a runtime\nvalue.</p>\n<p>The decorated function should take the execution context, the parsed config value, and the\nruntime value and the parsed config data, should materialize the runtime value, and should\nreturn an appropriate <a class=\"reference internal\" href=\"../solids/#dagster.Materialization\" title=\"dagster.Materialization\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Materialization</span></code></a>.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><p><strong>config_cls</strong> (<em>Any</em>) \u2013 The type of the config data expected by the decorated function. Users\nshould provide one of the <a class=\"reference internal\" href=\"#builtin\"><span class=\"std std-ref\">built-in types</span></a>, or a composite constructed\nusing <a class=\"reference internal\" href=\"#dagster.Selector\" title=\"dagster.Selector\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Selector()</span></code></a> or <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">Permissive()</span></code>.</p>\n</dd>\n</dl>\n<p>Examples:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Takes a list of dicts such as might be read in using csv.DictReader, as well as a config</span>\n<span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"ow\">and</span> <span class=\"n\">writes</span>\n<span class=\"nd\">@output_materialization_config</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">df_output_schema</span><span class=\"p\">(</span><span class=\"n\">_context</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n        <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictWriter</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"n\">fieldnames</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writeheader</span><span class=\"p\">()</span>\n        <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerows</span><span class=\"p\">(</span><span class=\"n\">rowdicts</span><span class=\"o\">=</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">Materialization</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<div class=\"section\" id=\"testing-new-types\">\n<h3>Testing New Types<a class=\"headerlink\" href=\"#testing-new-types\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"function\">\n<dt id=\"dagster.check_dagster_type\">\n<code class=\"sig-prename descclassname\">dagster.</code><code class=\"sig-name descname\">check_dagster_type</code><span class=\"sig-paren\">(</span><em class=\"sig-param\">dagster_type</em>, <em class=\"sig-param\">value</em><span class=\"sig-paren\">)</span><a class=\"reference internal\" href=\"../../../../_modules/dagster/utils/test/#check_dagster_type\"><span class=\"viewcode-link\">[source]</span></a><a class=\"headerlink\" href=\"#dagster.check_dagster_type\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Test a custom Dagster type.</p>\n<dl class=\"field-list simple\">\n<dt class=\"field-odd\">Parameters</dt>\n<dd class=\"field-odd\"><ul class=\"simple\">\n<li><p><strong>dagster_type</strong> (<em>Any</em>) \u2013 The Dagster type to test. Should be one of the\n<a class=\"reference internal\" href=\"#builtin\"><span class=\"std std-ref\">built-in types</span></a>, a dagster type explicitly constructed with\n<a class=\"reference internal\" href=\"#dagster.as_dagster_type\" title=\"dagster.as_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">as_dagster_type()</span></code></a>, <a class=\"reference internal\" href=\"#dagster.dagster_type\" title=\"dagster.dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;dagster_type</span></code></a>, or\n<a class=\"reference internal\" href=\"#dagster.define_python_dagster_type\" title=\"dagster.define_python_dagster_type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">define_python_dagster_type()</span></code></a>, or a Python type.</p></li>\n<li><p><strong>value</strong> (<em>Any</em>) \u2013 The runtime value to test.</p></li>\n</ul>\n</dd>\n<dt class=\"field-even\">Returns</dt>\n<dd class=\"field-even\"><p>The result of the type check.</p>\n</dd>\n<dt class=\"field-odd\">Return type</dt>\n<dd class=\"field-odd\"><p><a class=\"reference internal\" href=\"../solids/#dagster.TypeCheck\" title=\"dagster.TypeCheck\">TypeCheck</a></p>\n</dd>\n</dl>\n<p class=\"rubric\">Examples</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">assert</span> <span class=\"n\">check_dagster_type</span><span class=\"p\">(</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"p\">{</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">})</span><span class=\"o\">.</span><span class=\"n\">success</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n</div>\n</div>\n",
  "metatags": "",
  "rellinks": [
    ["genindex", "General Index", "I", "index"],
    ["py-modindex", "Python Module Index", "", "modules"],
    ["sections/api/apidocs/errors", "Errors", "N", "next"],
    ["sections/api/apidocs/execution", "Execution", "P", "previous"]
  ],
  "sourcename": "sections/api/apidocs/types.rst.txt",
  "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Types</a><ul>\n<li><a class=\"reference internal\" href=\"#built-in-types\">Built-in types</a></li>\n<li><a class=\"reference internal\" href=\"#config-types\">Config Types</a></li>\n<li><a class=\"reference internal\" href=\"#making-new-types\">Making New Types</a><ul>\n<li><a class=\"reference internal\" href=\"#testing-new-types\">Testing New Types</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
  "display_toc": true,
  "page_source_suffix": ".rst",
  "current_page_name": "sections/api/apidocs/types",
  "sidebars": ["globaltoc.html", "searchbox.html"],
  "customsidebar": null,
  "alabaster_version": "0.7.12"
}
