[project]
name = "docs_snippets"
description = "Dagster project for docs snippets"
version = "0.1.0"
authors = [
  {name = "Dagster Labs", email = "hello@dagsterlabs.com"}
]
license = "Apache-2.0"
classifiers = [
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
]
readme = "README.md"
requires-python = ">=3.8,<3.13"
dependencies = [
    "dagster",
    "dagster-webserver",
    "dagstermill",
    "dagster-airbyte",
    "dagster-airflow",
    "dagster-aws",
    "dagster-celery",
    "dagster-dbt",
    "dagster-dask",
    "dagster-databricks",
    "dagster-deltalake",
    "dagster-deltalake-pandas",
    "dagster-deltalake-polars",
    "dagster-duckdb",
    "dagster-duckdb-pandas",
    "dagster-embedded-elt",
    "dagster-fivetran",
    "dagster-gcp",
    "dagster-gcp-pandas",
    "dagster-gcp-pyspark",
    "dagster-graphql",
    "dagster-k8s",
    "dagster-postgres",
    "dagster-slack",
    "dagster-snowflake",
    "dagster-snowflake-pandas",
]

[project.urls]
url = "https://github.com/dagster-io/dagster/tree/master/examples/docs_snippets"

[project.optional-dependencies]
full = [
    "click",
    "dagster-webserver[test]",
    "dbt-duckdb",
    "matplotlib",
    # matplotlib-inline 0.1.5 is causing mysterious
    # "'NoneType' object has no attribute 'canvas'" errors in the tests that involve
    # Jupyter notebooks
    "matplotlib-inline<=0.1.3",
    "moto<5.0",
    "numpy",
    "pandas",
    "pandera",
    "plotly",
    "pytest",
    "requests",
    "seaborn",
    "scikit-learn",
    "slack_sdk",
    "syrupy",
    "xgboost",
]
        
[tool.ruff]

# Extend example root configuration.
extend = "../pyproject.toml"

# Shorter line length for docs snippets for better browser formatting.
line-length = 88

[tool.ruff.lint]

# Use extend-ignore so that we ignore all the same codes ignored in root.
extend-ignore = [

  # (Unused import): When the same symbol is imported in multiple blocks, the
  # last import takes precedence for python. This causes Ruff to think an
  # import in an earlier block is unused and report F401.
  "F401",

  # (Redefinition): This happens frequently in docs_snippets when we import the same symbol in multiple
  # snippets within the same file.
  "F811",

  # (local variable assigned but never used): This happens a lot in docs snippets for didactic
  # purposes.
  "F841",

  # (flake8-type-checking) No need to complicate docs snippets with `if TYPE_CHECKING` blocks.
  "TCH",
]

[tool.ruff.lint.isort]

# Ensures ruff classifies imports from `dagster` as first-party. Keeps snippet imports relatively
# compressed.
known-first-party = ["dagster"]

[tool.setuptools.packages.find]
exclude = ["docs_snippets_tests"]
