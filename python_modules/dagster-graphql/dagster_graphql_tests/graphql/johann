from collections import OrderedDict


{
    "data": OrderedDict(
        [
            (
                "launchPipelineReexecution",
                {
                    "__typename": "PythonError",
                    "message": 'dagster.core.errors.DagsterInvalidConfigError: Error in config for pipeline\n    Error 1: Received unexpected config entry "bad" at the root. Expected: "{ execution?: { in_process?: { config?: { marker_to_close?: String retries?: { disabled?: { } enabled?: { } } } } multiprocess?: { config?: { max_concurrent?: Int retries?: { disabled?: { } enabled?: { } } start_method?: { forkserver?: { preload_modules?: [String] } spawn?: { } } } } } loggers?: { console?: { config?: { log_level?: String name?: String } } } resources?: { io_manager?: { config?: { base_dir?: (String | { env: String }) } } } solids?: { after_failure?: { config?: Any outputs?: [{ result?: { json: { path: String } pickle: { path: String } } }] } always_succeed?: { config?: Any outputs?: [{ result?: { json: { path: String } pickle: { path: String } } }] } conditionally_fail?: { config?: Any outputs?: [{ result?: { json: { path: String } pickle: { path: String } } }] } } }".\n',
                    "className": "DagsterInvalidConfigError",
                    "stack": [
                        '  File "/Users/johann/dagster/python_modules/dagster/dagster/grpc/impl.py", line 366, in get_external_execution_plan_snapshot\n    create_execution_plan(\n',
                        '  File "/Users/johann/dagster/python_modules/dagster/dagster/core/execution/api.py", line 757, in create_execution_plan\n    resolved_run_config = ResolvedRunConfig.build(pipeline_def, run_config, mode=mode)\n',
                        '  File "/Users/johann/dagster/python_modules/dagster/dagster/core/system_config/objects.py", line 160, in build\n    raise DagsterInvalidConfigError(\n',
                    ],
                    "cause": None,
                },
            )
        ]
    )
}
