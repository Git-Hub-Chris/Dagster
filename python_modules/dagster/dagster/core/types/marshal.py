from abc import ABCMeta, abstractmethod
import pickle

import six

from dagster import check


HAS_P4J = True
try:
    import py4j
except ImportError:
    HAS_P4J = False


@six.add_metaclass(ABCMeta)
class SerializationStrategy:
    @abstractmethod
    def serialize_value(self, context, value, write_file_obj):
        pass

    @abstractmethod
    def deserialize_value(self, context, read_file_obj):
        pass


class MaybeUnpickleableObjectException(Exception):
    pass


class PickleSerializationStrategy(SerializationStrategy):
    def serialize_value(self, _context, value, write_file_obj):
        if HAS_P4J:
            try:
                pickle.dump(value, write_file_obj)
            except py4j.protocol.Py4JError as py4j_error:
                six.raise_from(
                    MaybeUnpickleableObjectException(
                        (
                            'You have attempted to pickle obj {obj} which is of python type '
                            '{type_name} and encountered a py4j error. This likely means (but is '
                            'not guaranted to mean) that object cannot be pickled and must use a '
                            'custom serialization strategy. The error generated by py4j is '
                            'effectively inscrutable and this is our best guess as to what is '
                            'happening when this error occurs.'
                        ).format(obj=repr(value), type_name=type(value))
                    ),
                    py4j_error,
                )
        else:
            pickle.dump(value, write_file_obj)

    def deserialize_value(self, _context, read_file_obj):
        return pickle.load(read_file_obj)


def serialize_to_file(context, serialization_strategy, value, write_path):
    check.inst_param(serialization_strategy, 'serialization_strategy', SerializationStrategy)
    check.str_param(write_path, 'write_path')

    with open(write_path, 'wb') as write_obj:
        return serialization_strategy.serialize_value(context, value, write_obj)


def deserialize_from_file(context, serialization_strategy, read_path):
    check.inst_param(serialization_strategy, 'serialization_strategy', SerializationStrategy)
    check.str_param(read_path, 'read_path')

    with open(read_path, 'rb') as read_obj:
        return serialization_strategy.deserialize_value(context, read_obj)
